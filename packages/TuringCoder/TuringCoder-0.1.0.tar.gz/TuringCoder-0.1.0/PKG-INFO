Metadata-Version: 2.1
Name: TuringCoder
Version: 0.1.0
Summary: TuringCoder is an innovative Python application designed to streamline your workflow through automations, leveraging the power of OpenAI's GPT models. Whether you're organizing your project files, processing text data, or integrating AI-based text generation, DemoApp offers a flexible solution tailored to various needs.
Home-page: https://github.com/FukjemiCZ/TuringCoder
Author: FukjemiCZ
Author-email: turing.coder@fukjemi.cz
License: LICENSE
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: json5

# TuringCoder

Welcome to **TuringCoder**, an innovative Python application designed to streamline your workflow through automations, leveraging the power of OpenAI's GPT models. Whether you're organizing your project files, processing text data, or integrating AI-based text generation, TuringCoder offers a flexible solution tailored to your various needs.

## Features

- **Efficient File Management**: Automatically manage your project's folder structure.
- **Seamless OpenAI Integration**: Use the power of GPT models for processing and generating text.
- **Customizable Workflow**: Tailor TuringCoder to your specific project needs with a simple configuration.

## Installation

Before you can utilize TuringCoder, you'll need to have Python installed on your machine. Once Python is installed, follow these steps to get TuringCoder up and running:

1. Clone the repository:
   ```bash
   git clone https://github.com/FukjemiCZ/TuringCoder.git
   cd TuringCoder
   ```

2. Install the required packages:
   ```bash
   pip install -r requirements.txt
   ```

3. To install TuringCoder, run:
   ```bash
   python setup.py install
   ```

## Usage

To start using TuringCoder, navigate to your project directory in the command line and run:

```bash
turingcoder <service_name>
```

Make sure to replace `<service_name>` with your actual service name.

## Configuration

`config.py` contains the basic configuration for TuringCoder:

```python
APP_DIR="DemoApp"
TEMPLATE_DIR="Templates"
OUTPUT_DIR="Request"
RESPONSE_DIR="Response"

# API Tokens
OPENAI_API_KEY=""
OPENAI_MODEL="gpt-4-turbo-preview"
OPENAI_TEMPERATURE="0.7"
OPENAI_MAX_TOKENS="2048"
```

Feel free to adapt these settings to fit your project's requirements.

## Application Structure

TuringCoder follows a clear and modular structure for ease of use and extendibility:

```plaintext
DemoApp
├── config.py
├── setup.py
├── lib
│   ├── __init__.py
│   ├── file_content.py
│   ├── openai_integration.py
│   ├── preparation.py
│   └── structure.py
└── main.py
```

## How It Works

1. **main.py**: The main script validates input parameters, prepares the output file, and orchestrates the integration with OpenAI's GPT models.

2. **lib/**: This directory contains various modules for handling file content, integrating with OpenAI, and more.

## Contributing

Contributions, issues, and feature requests are welcome! Feel free to check [issues page](https://github.com/FukjemiCZ/TuringCoder/issues). For major changes, please open an issue first to discuss what you would like to change.

## License

Distributed under the MIT License. See `LICENSE` for more information.

## Contact

FukjemiCZ - turing.coder@fukjemi.cz

Project Link: [https://github.com/FukjemiCZ/TuringCoder](https://github.com/FukjemiCZ/TuringCoder)

---

Remember, this `README.md` is a template to get you started. You should customize it to better fit your project's needs and highlight its features, usage, and unique selling points.
