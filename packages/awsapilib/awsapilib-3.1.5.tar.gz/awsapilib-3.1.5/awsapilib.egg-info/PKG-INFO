Metadata-Version: 2.1
Name: awsapilib
Version: 3.1.5
Summary: A python library that exposes AWS services that are not covered by boto3, through the usage of undocumented APIs.
Home-page: https://github.com/schubergphilis/awsapilib
Author: Costas Tyfoxylos
Author-email: ctyfoxylos@schubergphilis.com
License: MIT
Keywords: awsapilib AWS api
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.9
License-File: LICENSE
License-File: AUTHORS.rst

=========
awsapilib
=========

A python library that exposes AWS services that are not covered by boto3, through the usage of undocumented APIs.


* Documentation: https://awsapilib.readthedocs.org/en/latest


Development Workflow
====================

The workflow supports the following steps

 * lint
 * test
 * build
 * document
 * upload
 * graph

These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.

The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project

Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
So for the initial delivery one would call

    $ _tag --minor

which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.


So the full workflow after git is initialized is:

 * repeat as necessary (of course it could be test - code - lint :) )

   * code
   * lint
   * test
 * commit and push
 * develop more through the code-lint-test cycle
 * tag (with the appropriate argument)
 * build
 * upload (if you want to host your package in pypi)
 * document (of course this could be run at any point)


Important Information
=====================

This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
So when building a package out of this **do not** simple call

    $ python setup.py sdist bdist_egg

**as this will produce an unusable artifact with files missing.**
Instead use the provided build and upload scripts that create all the necessary files in the artifact.



Project Features
================

* Please look into the usage files.




History
-------

0.0.1 (26-04-2021)
---------------------

* First code creation


0.1.0 (11-05-2021)
------------------

* Initial release


0.1.1 (17-05-2021)
------------------

* Filtering out failed accounts from checking their update status


0.1.2 (17-05-2021)
------------------

* Fixed a timing issue with getting the active service catalog product on account creation.


0.2.0 (18-05-2021)
------------------

* Exposed governed and non governed regions and a small fix with latest update changes.


0.2.1 (18-05-2021)
------------------

* Dynamically retrieving updatable information about control tower.


0.2.2 (19-05-2021)
------------------

* Added some blocking on actions to prevent race conditions.


0.2.3 (08-06-2021)
------------------

* Bumped dependencies.


0.2.4 (16-06-2021)
------------------

* Added new feature to provision instance_id for an account


0.3.0 (16-06-2021)
------------------

* Added new method to provision saml config in the account


0.4.0 (17-06-2021)
------------------

* Added provision_saml_provider to the public api


0.4.1 (19-08-2021)
------------------

* Add explict error handling on bad response.


0.4.2 (01-09-2021)
------------------

* Added pagination on organizational OU retrieval.


0.5.0 (09-09-2021)
------------------

* Explicitly passing region to control tower instantiation.


0.5.1 (09-09-2021)
------------------

* Raising exception if csrf token retrieved has no value.


0.5.2 (09-09-2021)
------------------

* Fixed hardcoded url pointing to eu-west-1 making it possible to deploy to other home regions than Ireland.


0.6.0 (01-10-2021)
------------------

* Implemented contol tower repair and bumped dependencies.


0.7.0 (14-10-2021)
------------------

* - Adding a force option to the register_ou function to force re-registering


0.8.0 (14-10-2021)
------------------

* - Adding a force option to the register_ou function to force re-registering


0.9.0 (18-10-2021)
------------------

* - Adding support to also show updated state when the landingzone gets a new configuration


0.10.0 (29-11-2021)
-------------------

* Implemented cloudformation stack set organizations trusted access enabling and disabling.


0.10.1 (29-11-2021)
-------------------

* Added missing dependencies.


1.0.0 (03-12-2021)
------------------

* Implemented account lifecycle and info update, MFA support and IAM billing console enablement.


1.1.0 (18-12-2021)
------------------

* Added support for nested OUs


2.0.0 (28-12-2021)
------------------

* Releasing support for 5 levels of nested OUs


2.0.1 (29-12-2021)
------------------

* Fixed a bug where on account creation the OU was not created unless there was a failure with the parent hierarchy.


2.0.2 (29-12-2021)
------------------

* Fixed a bug with the handling of the OU without hierarchies.


2.1.0 (30-12-2021)
------------------

* Implemented capability of retrieving account by email.


2.1.1 (22-02-2022)
------------------

* Updated 'get_changing_accounts' to use the search_provisioned_products with a filter which will fix the bug where only the first 100 provisioned products were checked for status "UNDER_CHAGE".


2.2.0 (26-04-2022)
------------------

* Fix for new console authentication flow courtesy of Soenke Ruempler <soenke+github@ruempler.eu>, author of the awesome superwerker!


2.3.0 (05-05-2022)
------------------

* Fix for IAM authentication flow.


2.3.1 (18-05-2022)
------------------

* Fix for cases where captcha is actually not required.


2.3.2 (23-05-2022)
------------------

* Another captcha fix for the root console curtesy of Rafael Zamana Kineippe <rafael@zamana.com.br>


3.0.0 (13-06-2022)
------------------

* awsapilib calling aws native apis rather than shadow apis


3.1.0 (17-06-2022)
------------------

* fix control tower deploy/setup 


3.1.1 (17-08-2022)
------------------

* Bumped dependencies.


3.1.2 (27-09-2022)
------------------

* Fix for support for Control Tower update for versions over 2.6.


3.1.3 (03-03-2023)
------------------

* Bump and loosen dependencies.


3.1.4 (29-11-2023)
------------------

* Remove gov regions from Control Tower. Bump dependencies.


3.1.5 (08-04-2024)
------------------

* Fix billing api changes.
