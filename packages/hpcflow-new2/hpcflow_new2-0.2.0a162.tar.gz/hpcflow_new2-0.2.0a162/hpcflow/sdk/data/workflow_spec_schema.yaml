rules:
  - path: []
    condition:
      value.allowed_keys: [tasks]

  - path: [tasks]
    condition: { value.type.equal_to: list }

  - path: [tasks, { type: list_value }]
    condition:
      value.allowed_keys:
        [
          objective,
          method,
          implementation,
          resources,
          inputs,
          input_sources,
          input_files,
          perturbations,
          sequences,
          groups,
          repeats,
          nesting_order,
        ]

  - path: [tasks, { type: list_value }, resources]
    condition: { value.type.equal_to: dict }

  - path: [tasks, { type: list_value }, perturbations]
    condition: { value.type.equal_to: dict }

  - path: [tasks, { type: list_value }, nesting_order]
    condition: { value.type.equal_to: dict }

  - path: [tasks, { type: list_value }, sequences]
    condition: { value.type.equal_to: list }

  - path: [tasks, { type: list_value }, inputs]
    condition: { value.type.in: [list, dict] }

  - path: [tasks, { type: list_value }, inputs, { type: list_value }]
    condition:
      and:
        - value.required_keys: [parameter, value]
        - value.allowed_keys: [parameter, value, path]

  - path: [tasks, { type: list_value }, inputs, { type: list_value }, parameter]
    condition: { value.type.equal_to: str }

  - path: [tasks, { type: list_value }, inputs, { type: list_value }, path]
    condition: { value.type.equal_to: list }

  - path: [tasks, { type: list_value }, sequences, { type: list_value }]
    condition:
      and:
        - value.required_keys: [path, nesting_order]
        - value.keys_contain_one_of:
            [
              values,
              values.from_linear_space,
              values.from_grometric_space,
              values_from_log_space,
            ]
