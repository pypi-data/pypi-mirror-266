[project]
name = "buildinfo-om"
version = "0.7.0"
description = "JFrog BuildInfo ObjectModel written in python"
authors = [
    { name = "Carsten Igel", email = "cig@bite-that-bit.de" },
]
dependencies = [
    "dacite>=1.8.1",
    "makefun>=1.15.2",
]
requires-python = ">=3.11"
readme = "README.md"

[project.license]
file = "LICENSE"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true
plugins = [
    "pdm-bump",
    "pdm-audit",
]

[tool.pdm.scripts]
get-schema = "curl https://raw.githubusercontent.com/jfrog/build-info-go/6d8e36041ae4263c97d5984cdc7cebbdd7c04112/buildinfo-schema.json -o schema/build-info.schema.json"
run_dmcg = "datamodel-codegen --input schema/build-info.schema.json --custom-file-header-path .licenseheader --output src/buildinfo_om/_model.py --output-model-type dataclasses.dataclass --enum-field-as-literal all --field-constraints --set-default-enum-member --strict-types str bytes int float bool --use-annotated --use-generic-container-types --use-non-positive-negative-number-constrained-types --use-double-quotes --use-standard-collections --use-subclass-enum --use-union-operator --capitalise-enum-members --use-default-kwarg --use-field-description --disable-appending-item-suffix --enable-version-header --target-python-version 3.11 --use-schema-description --use-title-as-name --no-color --input-file-type jsonschema"
remove_future_annotations = "sed -i /'^from __future__ import annotations$'/d src/buildinfo_om/_model.py"
flake = "flake518 src/"
mypy = "mypy src/"
pylint = "pylint src/"
isort = "isort src/"
black = "black src/"
unimport = "unimport src/"
autoflake = "autoflake --ignore-pass-statements --remove-all-unused-imports --in-place --recursive src"
radon_cc = "radon cc --total-average --show-complexity --json --output-file radon.cc.json src/"
radon_mi = "radon mi --show --json --output-file radon.mi.json src/"
radon_hal = "radon hal --functions --json --output-file radon.hal.json src/"
vulture = "vulture src/"
bandit = "bandit src/"
prospector = "prospector src/"
copyright-headers = "licenseheaders -y 2024 -o 'Carsten Igel' -n pdm-bump -d . -u https://github.com/carstencodes/pdm-bump -x src/pdm_bump/dynamic.py -t ./.licenseheader.j2 -E .py"

[tool.pdm.scripts.create-om]
composite = [
    "run_dmcg",
    "remove_future_annotations",
]

[tool.pdm.scripts.docs]
cmd = "mkdocs build -c -s -v"

[tool.pdm.scripts.docs.env]
PYTHONPATH = "./util/griffe"

[tool.pdm.scripts.check-style]
composite = [
    "flake",
    "pylint",
    "mypy",
]

[tool.pdm.scripts.format]
composite = [
    "copyright-headers",
    "isort",
    "black",
    "autoflake",
]

[tool.pdm.scripts.radon]
composite = [
    "radon_cc",
    "radon_mi",
    "radon_hal",
]

[tool.pdm.scripts.static-analysis]
composite = [
    "radon",
    "vulture",
    "bandit",
    "prospector",
]

[tool.pdm.scripts.check-commits]
shell = "gitlint --commits $(git describe --tags --abbrev=0)..HEAD lint"

[tool.pdm.dev-dependencies]
build = [
    "datamodel-code-generator[http]>=0.25.3",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocstrings[python]>=0.24.0",
    "griffe-inherited-docstrings>=1.0.0",
]
test = [
    "pytest>=7.1.2",
    "tox>=3.25.1",
    "tox-pdm>=0.6.0",
    "pytest-cov>=3.0.0",
]
formatting = [
    "black>=22.6.0",
    "isort>=5.10.1",
    "licenseheaders>=0.8.8",
    "autoflake>=2.0.2",
    "pyment>=0.3.3",
]
release = [
    "gitlint>=0.17.0",
    "pip-audit>=2.4.4",
]
static-code-analysis = [
    "radon>=5.1.0",
    "vulture>=2.7",
    "bandit>=1.7.4",
    "prospector>=0.12.2",
]
checkstyle = [
    "flake8>=3.9.2",
    "flake518>=1.2.3",
    "mypy>=1.8.0",
    "pylint>=2.14.5",
    "pycodestyle>=2.7.0",
    "pep8-naming>=0.13.3",
]

[tool.black]
line-length = 79
target-version = [
    "py311",
]

[tool.flake8]
exclude = "src/buildinfo_om/_model.py"

[tool.pylint.MAIN]
fail-under = 9
ignore-paths = [
    "src/buildinfo_om/_model.py",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "C0112",
    "R0901",
]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
junit_suite_name = "buildinfo-om"
pythonpath = [
    "src",
]
minversion = "7.0.0"
addopts = [
    "--cache-clear",
    "--junit-xml",
    "pytest.result.xml",
    "--cov=src",
    "--cov-branch",
    "--cov-report",
    "xml:pytest.coverage.xml",
    "--cov-report",
    "term",
]
filterwarnings = [
    "ignore::DeprecationWarning ",
]

[tool.tox]
legacy_tox_ini = "[tox]\nminversion = 3.25.0\nrequires = tox-pdm\nskip_missing_interpreters = false\nenvlist = py{311, 312}\nisolated_build = true\nskipsdist = true\n\n\n[testenv]\nsetenv =\n    PDM_IGNORE_SAVED_PYTHON=\"1\"\nallowlist_externals =\n    mv\n    mkdir\n    pytest\n    pdm\n    python\ndeps = pdm\nrecreate = true\npassenv =\n    PYTHONPATH\ncommands =\n    pdm install --dev\n    pytest\ncommands_pre =\n    mkdir -p {toxinidir}/results/{envname}\ncommands_post =\n    mv {toxinidir}/pytest.result.xml {toxinidir}/pytest.coverage.xml {toxinidir}/results/{envname}/\n"

[tool.git-cliff.changelog]
header = "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n"
body = "{% if version %}##  Changelog for release {{ version | trim_start_matches(pat=\"v\") }}\n{% else %}## [unreleased]\n{% endif %}Released on {{ timestamp | date(format=\"%Y-%m-%d\") }}\n\n{% for group, commits in commits | group_by(attribute=\"group\") %}\n    ### {{ group | upper_first }}\n    {% for commit in commits %}\n        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} by {{ commit.author.name }} [{{ commit.id| truncate(length=7, end=\"\")}}](https://github.com/carstencodes/pdm-bump/commit/{{ commit.id }}){% endfor %}\n{% endfor %}\n\n{% if version %}{% if previous %}**Full changelog**: [{{ previous.version }}...{{ version }}](https://github.com/carstencodes/pdm-bump/compare/{{ previous.version }}...{{ version }})\n{% endif %}\n\n{% endif %}"
trim = true
footer = "<!-- generated by git-cliff -->\n"

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^docs", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactored" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^qa", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^ci", group = "Integration Tasks" },
    { message = "^build", group = "Build recipes" },
    { message = "^chore", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
protect_breaking_commits = false
filter_commits = false
tag_pattern = "v[0-9]*"
skip_tags = "v0.1.0-beta.1"
ignore_tags = ""
date_order = false
sort_commits = "oldest"

[[tool.git-cliff.git.commit_preprocessors]]
pattern = "\\((\\w+\\s)?#([0-9]+)\\)"
replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"
