AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DevOps stack

Parameters:
    GithubPAT:
        Type: String
        Description: Github personal access token
        NoEcho: true
    DockerhubUser:
        Type: String
        Description: hub.docker.com user name
        NoEcho: true
    DockerhubPasswd:
        Type: String
        Description: hub.docker.com user password
        NoEcho: true
    GenericKey:
        Type: String
        Description: key for general usage
        NoEcho: true
Outputs:
    SourceBucket:
        Description: S3 bucket used for devops source
        Value: !Ref SourceBucket
        Export:
            Name: !Sub 'SourceBucket-${AWS::StackName}'
    ArtifactBucket:
        Description: S3 bucket used for devops artifact
        Value: !Ref ArtifactBucket
        Export:
            Name: !Sub 'ArtifactBucket-${AWS::StackName}'
    CacheBucket:
        Description: S3 bucket used for devops cache
        Value: !Ref CacheBucket
        Export:
            Name: !Sub 'CacheBucket-${AWS::StackName}'
    DockerHubCreds:
        Description: DockerHub credentials
        Value: !Ref DockerHubCreds
        Export:
            Name: !Sub 'DockerHubCreds-${AWS::StackName}'
    GitHubCreds:
        Description: GitHub credentials
        Value: !Ref GitHubCreds
        Export:
            Name: !Sub 'GitHubCreds-${AWS::StackName}'
    GenericCreds:
        Description: Generic credentials
        Value: !Ref GenericCreds
        Export:
            Name: !Sub 'GenericCreds-${AWS::StackName}'
    CodeBuildProjectUrl:
        Description: Codebuild Project
        Value: !Join
          - ''
          - - 'https://'
            - !Ref 'AWS::Region'
            - '.console.aws.amazon.com/codesuite/codebuild/'
            - !Ref 'AWS::AccountId'
            - '/projects/'
            - !Ref CodeBuildProject
Resources:
    SourceBucket:
        DeletionPolicy: Delete
        Description: Creating Amazon S3 bucket for DevOps Source
        Properties:
            BucketName: !Sub 'source-bucket-${AWS::StackName}'
            LifecycleConfiguration:
                Rules:
                    - ExpirationInDays: 1
                      Status: Enabled
        Type: AWS::S3::Bucket

    ArtifactBucket:
        DeletionPolicy: Delete
        Description: Creating Amazon S3 bucket for DevOps Artifact
        Properties:
            BucketName: !Sub 'artifact-bucket-${AWS::StackName}'
            VersioningConfiguration:
                Status: Enabled
        Type: AWS::S3::Bucket

    CacheBucket:
        DeletionPolicy: Delete
        Description: Creating Amazon S3 bucket for DevOps Cache
        Properties:
            BucketName: !Sub 'cache-bucket-${AWS::StackName}'
            LifecycleConfiguration:
                Rules:
                    - ExpirationInDays: 3
                      Status: Enabled
        Type: AWS::S3::Bucket

    GitHubCreds:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
            Name: GitHubCreds
            Description: GitHub credentials
            SecretString: !Sub '{ "pat": "${GithubPAT}" }'
    DockerHubCreds:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
            Name: DockerHubCreds
            Description: DocketHub credentials
            SecretString: !Sub '{ "user": "${DockerhubUser}", "password": "${DockerhubPasswd}" }'
    GenericCreds:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
            Name: GenericCreds
            Description: Generic credentials
            SecretString: !Sub '{ "key": "${GenericKey}" }'
    CodeBuildSourceCreds:
        Type: 'AWS::CodeBuild::SourceCredential'
        DependsOn:
          - GitHubCreds
        Properties: 
            Token: '{{resolve:secretsmanager:GitHubCreds:SecretString:pat}}'
            ServerType: GITHUB
            AuthType: PERSONAL_ACCESS_TOKEN

    CodeBuildRole:
        Type: AWS::IAM::Role
        Description: Creating service role in IAM for AWS CodeBuild
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                - Action: sts:AssumeRole
                  Effect: Allow
                  Principal:
                    Service: codebuild.amazonaws.com
            Path: /
            RoleName: !Sub 'CodeBuild-${AWS::StackName}'

    CodeBuildPolicy:
        Type: AWS::IAM::Policy
        Description: Setting IAM policy for service role for CodeBuild
        Properties:
            PolicyDocument:
                Statement:
                - Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Effect: Allow
                  Resource: '*'
                - Action:
                    - s3:*
                  Effect: Allow
                  Resource: '*'
                - Action:
                    - kms:GenerateDataKey*
                    - kms:Encrypt
                    - kms:Decrypt
                  Effect: Allow
                  Resource:
                    - !Join
                        - ':'
                        - - arn:aws:kms
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - !Join
                            - /
                            - - alias
                              - aws/s3
            PolicyName: !Sub 'CodeBuildPolicy-${AWS::StackName}'
            Roles:
                - !Ref 'CodeBuildRole'

    CodeBuildProject:
        Type: AWS::CodeBuild::Project
        DependsOn:
            - CodeBuildPolicy
            - CodeBuildSourceCreds
            - DockerHubCreds
        Properties:
            ServiceRole: !Ref 'CodeBuildRole'
            Source:
                Type: GITHUB
                Location: https://github.com/xin-at-marathon/makefile.git
                BuildSpec: 'buildspec.yml'
            Artifacts:
                Location: !Ref 'ArtifactBucket'
                Name: 'output.zip'
                NamespaceType: BUILD_ID
                Packaging: ZIP
                Path: 'codebuild'
                Type: S3
            Cache:
                Type: LOCAL
                Modes: # You can specify one or more cache mode, 
                - LOCAL_CUSTOM_CACHE
                - LOCAL_DOCKER_LAYER_CACHE
                - LOCAL_SOURCE_CACHE
            ConcurrentBuildLimit: 1
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/standard:5.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - Name: DOCKERHUB_USER
                      Type: PLAINTEXT
                      Value: '{{resolve:secretsmanager:DockerHubCreds:SecretString:user}}'
                    - Name: DOCKERHUB_PASSWD
                      Type: PLAINTEXT
                      Value: '{{resolve:secretsmanager:DockerHubCreds:SecretString:password}}'
            Name: !Sub 'CodeBuild-${AWS::StackName}'
