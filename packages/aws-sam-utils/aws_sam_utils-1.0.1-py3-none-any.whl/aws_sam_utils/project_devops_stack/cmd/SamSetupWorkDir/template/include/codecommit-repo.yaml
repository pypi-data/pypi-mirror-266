    #############################
    # New CodeCommit Repository #
    #############################
    S3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete
        UpdateReplacePolicy: Delete
        Properties:
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256

    S3FileFunction:
        DependsOn:
            - S3Bucket
        Type: AWS::Lambda::Function
        Properties:
            Description: !Sub >-
                Creates a zip file in S3 used when initializing the CodeCommit repository created by
                CloudFormation stack ${AWS::StackName}.
            Role: !Sub "${S3FileFunctionRole.Arn}"
            Handler: index.handler
            Timeout: 20
            Runtime: python3.8
            Environment:
                Variables:
                    S3_BUCKET: !Ref S3Bucket
                    S3_KEY: initial-repository-code.zip
                    STACK_NAME: !Ref AWS::StackName
                    DEFAULT_GIT_BRANCH: !Ref DefaultGitBranch
                    REPOSITORY_DESCRIPTION: "project {{ project }} repository {{ repo }}"
            Code:
                ZipFile: |
                    import boto3
                    import botocore
                    import json
                    import os
                    import traceback
                    import cfnresponse
                    import zipfile
                    import textwrap

                    s3 = boto3.resource("s3", region_name=os.environ["AWS_REGION"])
                    cfn = boto3.client("cloudformation", region_name=os.environ["AWS_REGION"])

                    def handler(event, context):
                        print(json.dumps(event))
                        try:
                            phys_id = event.get("PhysicalResourceId")
                            logical_id = event["LogicalResourceId"]
                            stack_id = event["StackId"]
                            rp = event["ResourceProperties"]
                            s3_obj = s3.Object(os.environ['S3_BUCKET'], os.environ['S3_KEY'])
                            if event["RequestType"] in ["Create", "Update"]:
                                # Build the initial CodeCommit repository as a zip file
                                local_zip = '/tmp/initial-repository-code.zip'
                                zf = zipfile.ZipFile(local_zip, mode='w', compression=zipfile.ZIP_DEFLATED)
                                zf.writestr('README.md', textwrap.dedent(f"""\
                                # {{ repo }}
                                """))
                                zf.close()
                                # Store the zip file in S3 to be loaded into the CodeCommit initial repository
                                s3_obj.put(Body=open(local_zip, 'rb'))
                            elif event["RequestType"] == "Delete":
                                s3_obj.delete()
                            
                            cfnresponse.send(
                                event,
                                context,
                                cfnresponse.SUCCESS,
                                {'Bucket': os.environ['S3_BUCKET'], 'Key': os.environ['S3_KEY']},
                                physicalResourceId=phys_id,
                            )
                        except Exception as e:
                            print(f"Error - {repr(e)} - {traceback.format_exc()}")
                            cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId=phys_id, reason=repr(e))

    S3FileFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: Inline
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:PutObject
                                - s3:DeleteObject
                            Resource: !Sub "${S3Bucket.Arn}/*"
                          - Effect: Allow
                            Action:
                                - cloudformation:GetTemplate
                            Resource: !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"

    CodeCommitRepositoryCode:
        Type: Custom::S3File
        Properties:
            ServiceToken: !Sub "${S3FileFunction.Arn}"

    CodeCommitRepository:
        Type: AWS::CodeCommit::Repository
        DeletionPolicy: Delete
        UpdateReplacePolicy: Delete
        Properties:
            RepositoryName: !Ref AWS::StackName
            Code:
                BranchName: !Ref DefaultGitBranch
                S3:
                    Bucket: !Sub "${CodeCommitRepositoryCode.Bucket}"
                    Key: !Sub "${CodeCommitRepositoryCode.Key}"
