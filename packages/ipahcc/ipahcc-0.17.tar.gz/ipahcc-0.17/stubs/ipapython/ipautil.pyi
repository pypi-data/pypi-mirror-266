import datetime

# import netaddr
import os
import subprocess
from _typeshed import Incomplete
from collections.abc import Generator
from ipapython.dn import DN as DN
from typing import NamedTuple

logger: Incomplete
TMP_PWD_ENTROPY_BITS: int
PROTOCOL_NAMES: Incomplete

class InterfaceDetails(NamedTuple):
    name: Incomplete
    ifnet: Incomplete

# class UnsafeIPAddress(netaddr.IPAddress):
class UnsafeIPAddress:
    netaddr_ip_flags: Incomplete
    def __init__(self, addr) -> None: ...

class CheckedIPAddress(UnsafeIPAddress):
    prefixlen: Incomplete
    def __init__(
        self,
        addr,
        parse_netmask: bool = ...,
        allow_loopback: bool = ...,
        allow_multicast: bool = ...,
    ) -> None: ...
    def is_network_addr(self): ...
    def is_broadcast_addr(self): ...
    def get_matching_interface(self): ...
    def set_ip_net(self, ifnet) -> None: ...

class CheckedIPAddressLoopback(CheckedIPAddress):
    def __init__(
        self, addr, parse_netmask: bool = ..., allow_multicast: bool = ...
    ) -> None: ...

def valid_ip(addr): ...
def format_netloc(host, port: Incomplete | None = ...): ...
def realm_to_suffix(realm_name): ...
def suffix_to_realm(suffix_dn): ...
def template_str(txt, vars): ...
def template_file(infilename, vars): ...
def copy_template_file(infilename, outfilename, vars) -> None: ...
def write_tmp_file(txt): ...
def flush_sync(f) -> None: ...
def shell_quote(string): ...

class _RunResult: ...

class CalledProcessError(subprocess.CalledProcessError):
    stderr: Incomplete
    def __init__(
        self,
        returncode,
        cmd,
        output: Incomplete | None = ...,
        stderr: Incomplete | None = ...,
    ) -> None: ...

def run(
    args,
    stdin: Incomplete | None = ...,
    raiseonerr: bool = ...,
    nolog=...,
    env: Incomplete | None = ...,
    capture_output: bool = ...,
    skip_output: bool = ...,
    cwd: Incomplete | None = ...,
    runas: Incomplete | None = ...,
    suplementary_groups=...,
    capture_error: bool = ...,
    encoding: Incomplete | None = ...,
    redirect_output: bool = ...,
    umask: Incomplete | None = ...,
    nolog_output: bool = ...,
    nolog_error: bool = ...,
): ...
def nolog_replace(string, nolog): ...
def install_file(fname, dest) -> None: ...
def backup_file(fname) -> None: ...

class CIDict(dict):
    def __init__(
        self, default: Incomplete | None = ..., **kwargs
    ) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value, seen_keys: Incomplete | None = ...): ...
    def __delitem__(self, key): ...
    # def update(self, new: Incomplete | None = ..., **kwargs) -> None: ...
    def __contains__(self, key): ...
    def get(self, key, failobj: Incomplete | None = ...): ...
    def __iter__(self): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def copy(self): ...
    def iteritems(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def setdefault(self, key, value: Incomplete | None = ...): ...
    def pop(self, key, *args): ...
    def popitem(self): ...
    def clear(self): ...
    def viewitems(self) -> None: ...
    def viewkeys(self) -> None: ...
    def viewvvalues(self) -> None: ...

class GeneralizedTimeZone(datetime.tzinfo):
    name: Incomplete
    houroffset: int
    minoffset: int
    def __init__(self, offsetstr: str = ...) -> None: ...
    def utcoffset(self, dt): ...
    def dst(self): ...
    def tzname(self): ...

def parse_generalized_time(timestr): ...
def ipa_generate_password(
    entropy_bits: int = ...,
    uppercase: int = ...,
    lowercase: int = ...,
    digits: int = ...,
    special: int = ...,
    min_len: int = ...,
): ...
def user_input(
    prompt, default: Incomplete | None = ..., allow_empty: bool = ...
): ...
def host_port_open(
    host,
    port,
    socket_type=...,
    socket_timeout: Incomplete | None = ...,
    log_errors: bool = ...,
    log_level=...,
): ...
def check_port_bindable(port, socket_type=...): ...
def config_replace_variables(
    filepath,
    replacevars=...,
    appendvars=...,
    removevars: Incomplete | None = ...,
): ...
def inifile_replace_variables(
    filepath, section, replacevars=..., appendvars=...
): ...
def backup_config_and_replace_variables(
    fstore, filepath, replacevars=..., appendvars=...
): ...
def wait_for_open_ports(host, ports, timeout: int = ...) -> None: ...
def wait_for_open_socket(socket_name, timeout: int = ...) -> None: ...
def dn_attribute_property(private_name): ...
def posixify(string): ...
def private_ccache(
    path: Incomplete | None = ...,
) -> Generator[Incomplete, None, None]: ...
def private_krb5_config(
    realm, server, dir: str = ...
) -> Generator[Incomplete, None, None]: ...

fsdecode = os.fsdecode

def unescape_seq(seq, *args): ...
def escape_seq(seq, *args): ...
def decode_json(data): ...

class APIVersion(tuple):
    def __new__(cls, version): ...
    def __getnewargs__(self): ...
    @property
    def major(self): ...
    @property
    def minor(self): ...

def remove_keytab(keytab_path) -> None: ...
def remove_ccache(
    ccache_path: Incomplete | None = ..., run_as: Incomplete | None = ...
) -> None: ...
def remove_file(filename) -> None: ...
def rmtree(path) -> None: ...
def datetime_from_utctimestamp(t, units: int = ...): ...

class Sleeper:
    multiplier: int
    timeout: Incomplete
    sleep: Incomplete
    raises: Incomplete
    deadline: Incomplete
    def __init__(
        self, *, sleep, timeout, raises: Incomplete | None = ...
    ) -> None: ...
    def __bool__(self): ...
    def __call__(self): ...

def get_config_debug(context): ...
