from _typeshed import Incomplete
from collections.abc import Mapping
from ipaplatform.paths import paths as paths
from ipaplatform.tasks import tasks as tasks

logger: Incomplete
wellknownservices: Incomplete
wellknownports: Incomplete
SERVICE_POLL_INTERVAL: float

class KnownServices(Mapping):
    def __init__(self, d) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __call__(self): ...
    def __getattr__(self, name): ...

class PlatformService:
    service_name: Incomplete
    api: Incomplete
    def __init__(
        self, service_name, api: Incomplete | None = ...
    ) -> None: ...
    def start(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
        update_service_list: bool = ...,
    ) -> None: ...
    def stop(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        update_service_list: bool = ...,
    ) -> None: ...
    def reload_or_restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def try_restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def is_running(self, instance_name: str = ..., wait: bool = ...): ...
    def is_installed(self): ...
    def is_enabled(self, instance_name: str = ...): ...
    def is_masked(self, instance_name: str = ...): ...
    def enable(self, instance_name: str = ...) -> None: ...
    def disable(self, instance_name: str = ...) -> None: ...
    def mask(self, instance_name: str = ...) -> None: ...
    def unmask(self, instance_name: str = ...) -> None: ...
    def install(self, instance_name: str = ...) -> None: ...
    def remove(self, instance_name: str = ...) -> None: ...

class SystemdService(PlatformService):
    SYSTEMD_SRV_TARGET: str
    systemd_name: Incomplete
    lib_path: Incomplete
    lib_path_exists: Incomplete
    def __init__(
        self, service_name, systemd_name, api: Incomplete | None = ...
    ) -> None: ...
    def service_instance(
        self, instance_name, operation: Incomplete | None = ...
    ): ...
    def parse_variables(self, text, separator: Incomplete | None = ...): ...
    def wait_for_open_ports(self, instance_name: str = ...) -> None: ...
    def stop(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        update_service_list: bool = ...,
    ) -> None: ...
    def start(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
        update_service_list: bool = ...,
    ) -> None: ...
    def reload_or_restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def try_restart(
        self,
        instance_name: str = ...,
        capture_output: bool = ...,
        wait: bool = ...,
    ) -> None: ...
    def is_running(self, instance_name: str = ..., wait: bool = ...): ...
    def is_installed(self): ...
    def is_enabled(self, instance_name: str = ...): ...
    def is_masked(self, instance_name: str = ...): ...
    def enable(self, instance_name: str = ...) -> None: ...
    def disable(self, instance_name: str = ...) -> None: ...
    def mask(self, instance_name: str = ...) -> None: ...
    def unmask(self, instance_name: str = ...) -> None: ...
    def install(self, instance_name: str = ...) -> None: ...
    def remove(self, instance_name: str = ...) -> None: ...

def base_service_class_factory(
    name, api: Incomplete | None = ...
) -> None: ...

service = base_service_class_factory
knownservices: Incomplete
timedate_services: Incomplete
