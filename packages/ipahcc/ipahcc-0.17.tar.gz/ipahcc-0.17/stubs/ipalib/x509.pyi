import abc
import datetime
from _typeshed import Incomplete
from collections.abc import Generator
from cryptography import x509 as crypto_x509
from ipalib import errors as errors

default_backend: Incomplete
unicode = str
PEM: int
DER: int
PEM_CERT_REGEX: Incomplete
PEM_PRIV_REGEX: Incomplete
EKU_SERVER_AUTH: str
EKU_CLIENT_AUTH: str
EKU_CODE_SIGNING: str
EKU_EMAIL_PROTECTION: str
EKU_PKINIT_CLIENT_AUTH: str
EKU_PKINIT_KDC: str
EKU_ANY: str
EKU_PLACEHOLDER: str
SAN_UPN: str
SAN_KRB5PRINCIPALNAME: str

class IPACertificate(crypto_x509.Certificate, metaclass=abc.ABCMeta):
    backend: Incomplete
    def __init__(self, cert, backend: Incomplete | None = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def public_bytes(self, encoding): ...
    def is_self_signed(self): ...
    def fingerprint(self, algorithm): ...
    @property
    def serial_number(self): ...
    @property
    def serial_number_bytes(self): ...
    @property
    def version(self): ...
    @property
    def subject(self): ...
    @property
    def subject_bytes(self): ...
    @property
    def signature_hash_algorithm(self): ...
    @property
    def signature_algorithm_oid(self): ...
    @property
    def signature(self): ...
    @property
    def issuer(self): ...
    @property
    def issuer_bytes(self): ...
    @property
    def not_valid_before(self): ...
    @property
    def not_valid_after(self): ...
    @property
    def tbs_certificate_bytes(self): ...
    @property
    def extensions(self): ...
    def public_key(self): ...
    @property
    def public_key_info_bytes(self): ...
    @property
    def extended_key_usage(self): ...
    @property
    def extended_key_usage_bytes(self): ...
    @property
    def san_general_names(self): ...
    @property
    def san_a_label_dns_names(self): ...
    def match_hostname(self, hostname) -> None: ...
    @property
    def tbs_precertificate_bytes(self): ...
    def verify_directly_issued_by(
        self, cert: crypto_x509.Certificate
    ) -> None: ...

def load_pem_x509_certificate(data): ...
def load_der_x509_certificate(data): ...
def load_unknown_x509_certificate(data): ...
def load_certificate_from_file(filename): ...
def load_certificate_list(data): ...
def load_certificate_list_from_file(filename): ...
def load_private_key_list(data, password: Incomplete | None = ...): ...
def pkcs7_to_certs(data, datatype=...): ...
def validate_pem_x509_certificate(cert) -> None: ...
def validate_der_x509_certificate(cert) -> None: ...
def write_certificate(cert, filename) -> None: ...
def write_certificate_list(
    certs, filename, mode: Incomplete | None = ...
) -> None: ...
def write_pem_private_key(
    priv_key, filename, passwd: Incomplete | None = ...
) -> None: ...
def process_othernames(gns) -> Generator[Incomplete, None, None]: ...
def chunk(size, s): ...
def add_colons(s): ...
def to_hex_with_colons(bs): ...

class UTC(datetime.tzinfo):
    ZERO: Incomplete
    def tzname(self, dt): ...
    def utcoffset(self, dt): ...
    def dst(self, dt): ...

def format_datetime(t): ...
