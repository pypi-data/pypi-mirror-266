import optparse
from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from ipalib import errors as errors
from ipalib.base import (
    ReadOnly as ReadOnly,
    islocked as islocked,
    lock as lock,
)
from ipalib.config import Env as Env
from ipalib.constants import DEFAULT_CONFIG as DEFAULT_CONFIG
from ipalib.util import classproperty as classproperty

unicode = str
logger: Incomplete
TYPE_ERROR: str

def find_modules_in_dir(src_dir) -> Generator[Incomplete, None, None]: ...

class Registry:
    def __init__(self) -> None: ...
    def __call__(self, **kwargs): ...
    def __iter__(self): ...

class Plugin(ReadOnly):
    version: str
    def __init__(self, api) -> None: ...
    name: Incomplete
    full_name: Incomplete
    bases: Incomplete
    doc: Incomplete
    summary: Incomplete
    @property
    def api(self): ...
    @property
    def env(self): ...
    @property
    def Backend(self): ...
    @property
    def Command(self): ...
    def finalize(self) -> None: ...
    def ensure_finalized(self) -> None: ...

    class finalize_attr:
        name: Incomplete
        value: Incomplete
        def __init__(self, name, value: Incomplete | None = ...) -> None: ...
        def __get__(self, obj, cls): ...

class APINameSpace(Mapping):
    def __init__(self, api, base) -> None: ...
    def __len__(self): ...
    def __contains__(self, key): ...
    def __iter__(self): ...
    def __dir__(self): ...
    def get_plugin(self, key): ...
    def __getitem__(self, key): ...
    def __call__(self): ...
    def __getattr__(self, key): ...

class API(ReadOnly):
    env: Incomplete
    def __init__(self) -> None: ...
    @property
    def bases(self) -> None: ...
    @property
    def packages(self) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __contains__(self, name): ...
    def __getitem__(self, name): ...
    def __call__(self) -> Generator[Incomplete, None, None]: ...
    def is_production_mode(self): ...
    def isdone(self, name): ...
    parser: Incomplete
    def bootstrap(
        self, parser: Incomplete | None = ..., **overrides
    ) -> None: ...
    def build_global_parser(
        self,
        parser: Incomplete | None = ...,
        context: Incomplete | None = ...,
    ): ...
    def bootstrap_with_global_options(
        self,
        parser: Incomplete | None = ...,
        context: Incomplete | None = ...,
    ): ...
    def load_plugins(self) -> None: ...
    def add_package(self, package) -> None: ...
    def add_module(self, module) -> None: ...
    def add_plugin(
        self, plugin, override: bool = ..., no_fail: bool = ...
    ) -> None: ...
    def finalize(self) -> None: ...
    def get_plugin_next(self, plugin): ...

class IPAHelpFormatter(optparse.IndentedHelpFormatter):
    def format_epilog(self, epilog): ...
