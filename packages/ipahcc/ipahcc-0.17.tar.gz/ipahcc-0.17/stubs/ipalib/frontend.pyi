from _typeshed import Incomplete
from collections.abc import Generator
from ipalib import errors as errors, messages as messages
from ipalib.base import NameSpace as NameSpace
from ipalib.errors import (
    ConversionError as ConversionError,
    MaxArgumentError as MaxArgumentError,
    OptionError as OptionError,
    OverlapError as OverlapError,
    ValidationError as ValidationError,
    VersionError as VersionError,
    ZeroArgumentError as ZeroArgumentError,
)
from ipalib.output import (
    Entry as Entry,
    ListOfEntries as ListOfEntries,
    Output as Output,
)
from ipalib.parameters import (
    Flag as Flag,
    Param as Param,
    Password as Password,
    Str as Str,
    create_param as create_param,
    create_signature as create_signature,
)
from ipalib.plugable import APINameSpace as APINameSpace, Plugin as Plugin
from ipalib.request import context as context, context_frame as context_frame
from ipalib.util import (
    classobjectproperty as classobjectproperty,
    classproperty as classproperty,
    json_serialize as json_serialize,
)

unicode = str
logger: Incomplete
RULE_FLAG: str

def rule(obj): ...
def is_rule(obj): ...
def entry_count(entry): ...

class HasParam(Plugin):
    NO_CLI: bool
    @property
    def context(self): ...

class Command(HasParam):
    takes_options: Incomplete
    takes_args: Incomplete
    args: Incomplete
    options: Incomplete
    params: Incomplete
    params_by_default: Incomplete
    obj: Incomplete
    use_output_validation: bool
    output: Incomplete
    has_output: Incomplete
    output_params: Incomplete
    has_output_params: Incomplete
    internal_options: Incomplete
    msg_summary: Incomplete
    msg_truncated: Incomplete
    callback_types: Incomplete
    api_version: Incomplete
    topic: Incomplete
    @classmethod
    def __signature__(cls, obj): ...
    @property
    def forwarded_name(self): ...
    def __call__(self, *args, **options): ...
    def add_message(self, message) -> None: ...
    def args_options_2_params(self, *args, **options): ...
    def args_options_2_entry(self, *args, **options): ...
    def params_2_args_options(self, **params): ...
    def prompt_param(
        self,
        param,
        default: Incomplete | None = ...,
        optional: bool = ...,
        kw=...,
        label: Incomplete | None = ...,
    ): ...
    def normalize(self, **kw): ...
    def convert(self, **kw): ...
    def get_default(self, _params: Incomplete | None = ..., **kw): ...
    def get_default_of(self, _name, **kw): ...
    def validate(self, **kw) -> None: ...
    def verify_client_version(self, client_version) -> None: ...
    def run(self, *args, **options): ...
    def execute(self, *args, **kw) -> None: ...
    def forward(self, *args, **kw): ...
    def get_args(self) -> Generator[Incomplete, None, None]: ...
    def check_args(self, args) -> None: ...
    def get_options(self) -> Generator[Incomplete, None, None]: ...
    def validate_output(self, output, version=...) -> None: ...
    def get_output_params(self) -> Generator[Incomplete, None, None]: ...
    def get_summary_default(self, output): ...
    def log_messages(self, output) -> None: ...
    def output_for_cli(self, textui, output, *args, **options): ...
    json_friendly_attributes: Incomplete
    def __json__(self): ...
    @classmethod
    def get_callbacks(
        cls, callback_type
    ) -> Generator[Incomplete, None, None]: ...
    @classmethod
    def register_callback(
        cls, callback_type, callback, first: bool = ...
    ) -> None: ...
    @classmethod
    def register_interactive_prompt_callback(
        cls, callback, first: bool = ...
    ) -> None: ...
    def interactive_prompt_callback(self, kw) -> None: ...

class LocalOrRemote(Command):
    takes_options: Incomplete
    def run(self, *args, **options): ...

class Local(Command):
    def run(self, *args, **options): ...
    def forward(self, *args, **options): ...

class Object(HasParam):
    backend: Incomplete
    methods: Incomplete
    params: Incomplete
    primary_key: Incomplete
    params_minus_pk: Incomplete
    backend_name: Incomplete
    takes_params: Incomplete
    def params_minus(self, *names) -> Generator[Incomplete, None, None]: ...
    def get_dn(self, *args, **kwargs) -> None: ...
    def get_params(self) -> Generator[Incomplete, None, None]: ...
    json_friendly_attributes: Incomplete
    def __json__(self): ...

class Attribute(Plugin):
    obj_version: str
    @property
    def obj_name(self): ...
    @property
    def obj_full_name(self): ...
    @property
    def attr_name(self): ...
    @property
    def obj(self): ...

class Method(Attribute, Command):
    extra_options_first: bool
    extra_args_first: bool
    def get_output_params(self) -> Generator[Incomplete, None, None]: ...

class Updater(Plugin):
    def execute(self, **options) -> None: ...
    def __call__(self, **options): ...
