from _typeshed import Incomplete
from collections.abc import Generator
from ipalib.constants import (
    DEL_ERROR as DEL_ERROR,
    NAME_ERROR as NAME_ERROR,
    NAME_REGEX as NAME_REGEX,
    OVERRIDE_ERROR as OVERRIDE_ERROR,
    SET_ERROR as SET_ERROR,
    TYPE_ERROR as TYPE_ERROR,
)

class ReadOnly:
    def __lock__(self) -> None: ...
    def __islocked__(self): ...
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...

def lock(instance): ...
def islocked(instance): ...
def check_name(name): ...

class NameSpace(ReadOnly):
    def __init__(self, members, sort: bool = ..., name_attr: str = ...): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __call__(self) -> Generator[Incomplete, None, None]: ...
    def __contains__(self, name): ...
    def __getitem__(self, key): ...
    def __todict__(self): ...
