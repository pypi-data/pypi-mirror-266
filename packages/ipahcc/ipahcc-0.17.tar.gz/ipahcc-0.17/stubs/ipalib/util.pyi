import reprlib
from _typeshed import Incomplete

unicode = str
logger: Incomplete

def json_serialize(obj): ...
def verify_host_resolvable(fqdn) -> None: ...
def has_soa_or_ns_record(domain): ...
def normalize_name(name): ...
def isvalid_base64(data): ...
def strip_csr_header(csr): ...
def validate_ipaddr(ipaddr): ...
def check_writable_file(filename) -> None: ...
def normalize_zonemgr(zonemgr): ...
def normalize_zone(zone): ...
def get_proper_tls_version_span(tls_version_min, tls_version_max): ...
def create_https_connection(
    host,
    port=...,
    cafile: Incomplete | None = ...,
    client_certfile: Incomplete | None = ...,
    client_keyfile: Incomplete | None = ...,
    keyfile_passwd: Incomplete | None = ...,
    tls_version_min=...,
    tls_version_max=...,
    **kwargs,
): ...
def validate_dns_label(
    dns_label, allow_underscore: bool = ..., allow_slash: bool = ...
) -> None: ...
def validate_domain_name(
    domain_name,
    allow_underscore: bool = ...,
    allow_slash: bool = ...,
    entity: str = ...,
) -> None: ...
def validate_zonemgr(zonemgr) -> None: ...
def validate_zonemgr_str(zonemgr): ...
def validate_hostname(
    hostname,
    check_fqdn: bool = ...,
    allow_underscore: bool = ...,
    allow_slash: bool = ...,
    maxlen: int = ...,
) -> None: ...
def normalize_sshpubkey(value): ...
def validate_sshpubkey(ugettext, value): ...
def validate_sshpubkey_no_options(ugettext, value): ...
def convert_sshpubkey_post(entry_attrs) -> None: ...
def add_sshpubkey_to_attrs_pre(context, attrs_list) -> None: ...
def remove_sshpubkey_from_output_post(context, entry_attrs) -> None: ...
def remove_sshpubkey_from_output_list_post(context, entries) -> None: ...

time_duration_re: Incomplete
time_duration_units: Incomplete

def parse_time_duration(value): ...
def get_dns_forward_zone_update_policy(realm, rrtypes=...): ...
def get_dns_reverse_zone_update_policy(realm, reverse_zone, rrtypes=...): ...

REVERSE_DNS_ZONES: Incomplete

def zone_is_reverse(zone_name): ...
def get_reverse_zone_default(ip_address): ...
def validate_rdn_param(ugettext, value): ...
def validate_hostmask(ugettext, hostmask): ...

class ForwarderValidationError(Exception):
    format: Incomplete
    def __init__(
        self,
        format: Incomplete | None = ...,
        message: Incomplete | None = ...,
        **kw,
    ) -> None: ...

class UnresolvableRecordError(ForwarderValidationError):
    format: Incomplete

class EDNS0UnsupportedError(ForwarderValidationError):
    format: Incomplete

class DNSSECSignatureMissingError(ForwarderValidationError):
    format: Incomplete

class DNSSECValidationError(ForwarderValidationError):
    format: Incomplete

def validate_dnssec_global_forwarder(ip_addr, timeout: int = ...) -> None: ...
def validate_dnssec_zone_forwarder_step1(
    ip_addr, fwzone, timeout: int = ...
) -> None: ...
def validate_dnssec_zone_forwarder_step2(
    ipa_ip_addr, fwzone, timeout: int = ...
) -> None: ...
def validate_idna_domain(value) -> None: ...
def detect_dns_zone_realm_type(api, domain): ...
def has_managed_topology(api): ...
def print_replication_status(entry, verbose) -> None: ...

class classproperty:
    fget: Incomplete
    __doc__: Incomplete
    def __init__(
        self, fget: Incomplete | None = ..., doc: Incomplete | None = ...
    ) -> None: ...
    def __get__(self, obj, obj_type): ...
    def __set__(self, obj, value) -> None: ...
    def __delete__(self, obj) -> None: ...
    def getter(self, fget): ...

class classobjectproperty(classproperty):
    def __get__(self, obj, obj_type): ...

def normalize_hostname(hostname): ...
def hostname_validator(ugettext, value, maxlen: int = ...): ...
def ipaddr_validator(
    ugettext, ipaddr, ip_version: Incomplete | None = ...
): ...
def validate_bind_forwarder(ugettext, forwarder): ...
def set_krbcanonicalname(entry_attrs) -> None: ...
def ensure_last_krbprincipalname(ldap, entry_attrs, *keys) -> None: ...
def ensure_krbcanonicalname_set(ldap, entry_attrs) -> None: ...
def check_client_configuration(env: Incomplete | None = ...): ...
def check_principal_realm_in_trust_namespace(api_instance, *keys) -> None: ...
def no_matching_interface_for_ip_address_warning(addr_list) -> None: ...
def get_terminal_height(fd: int = ...): ...
def get_pager(): ...
def open_in_pager(data, pager) -> None: ...

class APIRepr(reprlib.Repr):
    builtin_types: Incomplete
    def __init__(self) -> None: ...
    def repr_str(self, x, level): ...
    def repr_type(self, x, level): ...

apirepr: Incomplete
apirepr = repr
