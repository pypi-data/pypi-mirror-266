"""
Provide de/serialization of AAS classes to/from JSON.

We can not use one-pass deserialization for JSON since the object
properties do not have fixed order, and hence we can not read
``modelType`` property ahead of the remaining properties.
"""

# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.

import base64
import collections.abc
import sys
from typing import (
    Any,
    Callable,
    Iterable,
    List,
    Mapping,
    MutableMapping,
    Optional,
    Sequence,
    Union,
)

if sys.version_info >= (3, 8):
    from typing import Final
else:
    from typing_extensions import Final

import aas_core3.common as aas_common
import aas_core3.stringification as aas_stringification
import aas_core3.types as aas_types

class PropertySegment:
    """Represent a property on a path to the erroneous value."""

    #: Instance that contains the property
    instance: Final[Mapping[str, Any]]

    #: Name of the property
    name: Final[str]

    def __init__(self, instance: Mapping[str, Any], name: str) -> None:
        """Initialize with the given values."""
        ...

class IndexSegment:
    """Represent an index access on a path to the erroneous value."""

    #: Container that contains the item
    container: Final[Iterable[Any]]

    #: Index of the item
    index: Final[int]

    def __init__(self, container: Iterable[Any], index: int) -> None:
        """Initialize with the given values."""
        ...

Segment = Union[PropertySegment, IndexSegment]

class Path:
    """Represent the relative path to the erroneous value."""

    def __init__(self) -> None:
        """Initialize as an empty path."""
        ...

    @property
    def segments(self) -> Sequence[Segment]:
        """Get the segments of the path."""
        ...

    def _prepend(self, segment: Segment) -> None:
        """Insert the :paramref:`segment` in front of other segments."""
        ...

    def __str__(self) -> str: ...

class DeserializationException(Exception):
    """Signal that the JSON de-serialization could not be performed."""

    #: Human-readable explanation of the exception's cause
    cause: Final[str]

    #: Relative path to the erroneous value
    path: Final[Path]

    def __init__(self, cause: str) -> None:
        """Initialize with the given :paramref:`cause` and an empty path."""
        ...

# NOTE (mristin, 2022-10-03):
# Recursive definitions are not yet available in mypy
# (see https://github.com/python/mypy/issues/731). We have to use ``Any``
# here, instead of recursive type annotations.
Jsonable = Union[bool, int, float, str, Sequence[Any], Mapping[str, Any]]

MutableJsonable = Union[bool, int, float, str, List[Any], MutableMapping[str, Any]]

# region De-serialization

def _bool_from_jsonable(jsonable: Jsonable) -> bool:
    """
    Parse :paramref:`jsonable` as a boolean.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed boolean
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def _int_from_jsonable(jsonable: Jsonable) -> int:
    """
    Parse :paramref:`jsonable` as an integer.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed integer
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def _float_from_jsonable(jsonable: Jsonable) -> float:
    """
    Parse :paramref:`jsonable` as a floating-point number.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed floating-point number
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def _str_from_jsonable(jsonable: Jsonable) -> str:
    """
    Parse :paramref:`jsonable` as a string.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed string
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def _bytes_from_jsonable(jsonable: Jsonable) -> bytes:
    """
    Decode :paramref:`jsonable` as base64 string to a ``bytearray``.

    :param jsonable: JSON-able structure to be decoded
    :return: decoded bytearray
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def has_semantics_from_jsonable(jsonable: Jsonable) -> aas_types.HasSemantics:
    """
    Parse an instance of :py:class:`.types.HasSemantics` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.HasSemantics`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForExtension:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_refers_to_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~refers_to`.

        :param jsonable: input to be parsed
        """
        ...

def extension_from_jsonable(jsonable: Jsonable) -> aas_types.Extension:
    """
    Parse an instance of :py:class:`.types.Extension` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Extension`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def has_extensions_from_jsonable(jsonable: Jsonable) -> aas_types.HasExtensions:
    """
    Parse an instance of :py:class:`.types.HasExtensions` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.HasExtensions`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def referable_from_jsonable(jsonable: Jsonable) -> aas_types.Referable:
    """
    Parse an instance of :py:class:`.types.Referable` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.Referable`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def identifiable_from_jsonable(jsonable: Jsonable) -> aas_types.Identifiable:
    """
    Parse an instance of :py:class:`.types.Identifiable` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.Identifiable`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def modelling_kind_from_jsonable(jsonable: Jsonable) -> aas_types.ModellingKind:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.ModellingKind`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def has_kind_from_jsonable(jsonable: Jsonable) -> aas_types.HasKind:
    """
    Parse an instance of :py:class:`.types.HasKind` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.HasKind`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def has_data_specification_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.HasDataSpecification:
    """
    Parse an instance of :py:class:`.types.HasDataSpecification` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.HasDataSpecification`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForAdministrativeInformation:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_version_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~version`.

        :param jsonable: input to be parsed
        """
        ...

    def set_revision_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~revision`.

        :param jsonable: input to be parsed
        """
        ...

    def set_creator_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~creator`.

        :param jsonable: input to be parsed
        """
        ...

    def set_template_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~template_id`.

        :param jsonable: input to be parsed
        """
        ...

def administrative_information_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.AdministrativeInformation:
    """
    Parse an instance of :py:class:`.types.AdministrativeInformation` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.AdministrativeInformation`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def qualifiable_from_jsonable(jsonable: Jsonable) -> aas_types.Qualifiable:
    """
    Parse an instance of :py:class:`.types.Qualifiable` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.Qualifiable`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def qualifier_kind_from_jsonable(jsonable: Jsonable) -> aas_types.QualifierKind:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.QualifierKind`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForQualifier:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_kind_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~kind`.

        :param jsonable: input to be parsed
        """
        ...

    def set_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_id`.

        :param jsonable: input to be parsed
        """
        ...

def qualifier_from_jsonable(jsonable: Jsonable) -> aas_types.Qualifier:
    """
    Parse an instance of :py:class:`.types.Qualifier` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Qualifier`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForAssetAdministrationShell:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_administration_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~administration`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_derived_from_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~derived_from`.

        :param jsonable: input to be parsed
        """
        ...

    def set_asset_information_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~asset_information`.

        :param jsonable: input to be parsed
        """
        ...

    def set_submodels_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~submodels`.

        :param jsonable: input to be parsed
        """
        ...

def asset_administration_shell_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.AssetAdministrationShell:
    """
    Parse an instance of :py:class:`.types.AssetAdministrationShell` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.AssetAdministrationShell`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForAssetInformation:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_asset_kind_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~asset_kind`.

        :param jsonable: input to be parsed
        """
        ...

    def set_global_asset_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~global_asset_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_specific_asset_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~specific_asset_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_asset_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~asset_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_default_thumbnail_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~default_thumbnail`.

        :param jsonable: input to be parsed
        """
        ...

def asset_information_from_jsonable(jsonable: Jsonable) -> aas_types.AssetInformation:
    """
    Parse an instance of :py:class:`.types.AssetInformation` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.AssetInformation`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForResource:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_path_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~path`.

        :param jsonable: input to be parsed
        """
        ...

    def set_content_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~content_type`.

        :param jsonable: input to be parsed
        """
        ...

def resource_from_jsonable(jsonable: Jsonable) -> aas_types.Resource:
    """
    Parse an instance of :py:class:`.types.Resource` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Resource`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def asset_kind_from_jsonable(jsonable: Jsonable) -> aas_types.AssetKind:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.AssetKind`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForSpecificAssetID:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_external_subject_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~external_subject_id`.

        :param jsonable: input to be parsed
        """
        ...

def specific_asset_id_from_jsonable(jsonable: Jsonable) -> aas_types.SpecificAssetID:
    """
    Parse an instance of :py:class:`.types.SpecificAssetID` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.SpecificAssetID`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForSubmodel:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_administration_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~administration`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_kind_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~kind`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_submodel_elements_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~submodel_elements`.

        :param jsonable: input to be parsed
        """
        ...

def submodel_from_jsonable(jsonable: Jsonable) -> aas_types.Submodel:
    """
    Parse an instance of :py:class:`.types.Submodel` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Submodel`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def submodel_element_from_jsonable(jsonable: Jsonable) -> aas_types.SubmodelElement:
    """
    Parse an instance of :py:class:`.types.SubmodelElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.SubmodelElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def relationship_element_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.RelationshipElement:
    """
    Parse an instance of :py:class:`.types.RelationshipElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.RelationshipElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForRelationshipElement:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_first_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~first`.

        :param jsonable: input to be parsed
        """
        ...

    def set_second_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~second`.

        :param jsonable: input to be parsed
        """
        ...

def _relationship_element_from_jsonable_without_dispatch(
    jsonable: Jsonable,
) -> aas_types.RelationshipElement:
    """
    Parse an instance of :py:class:`.types.RelationshipElement` from the JSON-able
    structure :paramref:`jsonable`.

    This function performs no dispatch! It is used to parse the properties
    as-are, and already assumes the exact model type. Usually, this function
    is called from within a dispatching function, and you never call it
    directly. If you want to de-serialize an instance of
    :py:class:`.types.RelationshipElement`, call
    :py:func:`relationship_element_from_jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.RelationshipElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def aas_submodel_elements_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.AASSubmodelElements:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.AASSubmodelElements`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForSubmodelElementList:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_order_relevant_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~order_relevant`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_list_element_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id_list_element`.

        :param jsonable: input to be parsed
        """
        ...

    def set_type_value_list_element_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~type_value_list_element`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_type_list_element_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_type_list_element`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

def submodel_element_list_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.SubmodelElementList:
    """
    Parse an instance of :py:class:`.types.SubmodelElementList` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.SubmodelElementList`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForSubmodelElementCollection:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

def submodel_element_collection_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.SubmodelElementCollection:
    """
    Parse an instance of :py:class:`.types.SubmodelElementCollection` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.SubmodelElementCollection`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def data_element_from_jsonable(jsonable: Jsonable) -> aas_types.DataElement:
    """
    Parse an instance of :py:class:`.types.DataElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.DataElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForProperty:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_id`.

        :param jsonable: input to be parsed
        """
        ...

def property_from_jsonable(jsonable: Jsonable) -> aas_types.Property:
    """
    Parse an instance of :py:class:`.types.Property` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Property`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForMultiLanguageProperty:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_id`.

        :param jsonable: input to be parsed
        """
        ...

def multi_language_property_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.MultiLanguageProperty:
    """
    Parse an instance of :py:class:`.types.MultiLanguageProperty` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.MultiLanguageProperty`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForRange:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_min_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~min`.

        :param jsonable: input to be parsed
        """
        ...

    def set_max_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~max`.

        :param jsonable: input to be parsed
        """
        ...

def range_from_jsonable(jsonable: Jsonable) -> aas_types.Range:
    """
    Parse an instance of :py:class:`.types.Range` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Range`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForReferenceElement:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

def reference_element_from_jsonable(jsonable: Jsonable) -> aas_types.ReferenceElement:
    """
    Parse an instance of :py:class:`.types.ReferenceElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.ReferenceElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForBlob:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_content_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~content_type`.

        :param jsonable: input to be parsed
        """
        ...

def blob_from_jsonable(jsonable: Jsonable) -> aas_types.Blob:
    """
    Parse an instance of :py:class:`.types.Blob` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Blob`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForFile:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_content_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~content_type`.

        :param jsonable: input to be parsed
        """
        ...

def file_from_jsonable(jsonable: Jsonable) -> aas_types.File:
    """
    Parse an instance of :py:class:`.types.File` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.File`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForAnnotatedRelationshipElement:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_first_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~first`.

        :param jsonable: input to be parsed
        """
        ...

    def set_second_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~second`.

        :param jsonable: input to be parsed
        """
        ...

    def set_annotations_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~annotations`.

        :param jsonable: input to be parsed
        """
        ...

def annotated_relationship_element_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.AnnotatedRelationshipElement:
    """
    Parse an instance of :py:class:`.types.AnnotatedRelationshipElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.AnnotatedRelationshipElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForEntity:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_statements_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~statements`.

        :param jsonable: input to be parsed
        """
        ...

    def set_entity_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~entity_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_global_asset_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~global_asset_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_specific_asset_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~specific_asset_ids`.

        :param jsonable: input to be parsed
        """
        ...

def entity_from_jsonable(jsonable: Jsonable) -> aas_types.Entity:
    """
    Parse an instance of :py:class:`.types.Entity` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Entity`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def entity_type_from_jsonable(jsonable: Jsonable) -> aas_types.EntityType:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.EntityType`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def direction_from_jsonable(jsonable: Jsonable) -> aas_types.Direction:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.Direction`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def state_of_event_from_jsonable(jsonable: Jsonable) -> aas_types.StateOfEvent:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.StateOfEvent`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForEventPayload:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_source_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~source`.

        :param jsonable: input to be parsed
        """
        ...

    def set_source_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~source_semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_observable_reference_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~observable_reference`.

        :param jsonable: input to be parsed
        """
        ...

    def set_observable_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~observable_semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_topic_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~topic`.

        :param jsonable: input to be parsed
        """
        ...

    def set_subject_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~subject_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_time_stamp_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~time_stamp`.

        :param jsonable: input to be parsed
        """
        ...

    def set_payload_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~payload`.

        :param jsonable: input to be parsed
        """
        ...

def event_payload_from_jsonable(jsonable: Jsonable) -> aas_types.EventPayload:
    """
    Parse an instance of :py:class:`.types.EventPayload` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.EventPayload`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def event_element_from_jsonable(jsonable: Jsonable) -> aas_types.EventElement:
    """
    Parse an instance of :py:class:`.types.EventElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.EventElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForBasicEventElement:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_observed_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~observed`.

        :param jsonable: input to be parsed
        """
        ...

    def set_direction_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~direction`.

        :param jsonable: input to be parsed
        """
        ...

    def set_state_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~state`.

        :param jsonable: input to be parsed
        """
        ...

    def set_message_topic_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~message_topic`.

        :param jsonable: input to be parsed
        """
        ...

    def set_message_broker_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~message_broker`.

        :param jsonable: input to be parsed
        """
        ...

    def set_last_update_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~last_update`.

        :param jsonable: input to be parsed
        """
        ...

    def set_min_interval_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~min_interval`.

        :param jsonable: input to be parsed
        """
        ...

    def set_max_interval_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~max_interval`.

        :param jsonable: input to be parsed
        """
        ...

def basic_event_element_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.BasicEventElement:
    """
    Parse an instance of :py:class:`.types.BasicEventElement` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.BasicEventElement`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForOperation:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_input_variables_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~input_variables`.

        :param jsonable: input to be parsed
        """
        ...

    def set_output_variables_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~output_variables`.

        :param jsonable: input to be parsed
        """
        ...

    def set_inoutput_variables_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~inoutput_variables`.

        :param jsonable: input to be parsed
        """
        ...

def operation_from_jsonable(jsonable: Jsonable) -> aas_types.Operation:
    """
    Parse an instance of :py:class:`.types.Operation` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Operation`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForOperationVariable:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

def operation_variable_from_jsonable(jsonable: Jsonable) -> aas_types.OperationVariable:
    """
    Parse an instance of :py:class:`.types.OperationVariable` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.OperationVariable`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForCapability:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_supplemental_semantic_ids_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~supplemental_semantic_ids`.

        :param jsonable: input to be parsed
        """
        ...

    def set_qualifiers_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~qualifiers`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

def capability_from_jsonable(jsonable: Jsonable) -> aas_types.Capability:
    """
    Parse an instance of :py:class:`.types.Capability` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Capability`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForConceptDescription:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_extensions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~extensions`.

        :param jsonable: input to be parsed
        """
        ...

    def set_category_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~category`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_short_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id_short`.

        :param jsonable: input to be parsed
        """
        ...

    def set_display_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~display_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_description_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~description`.

        :param jsonable: input to be parsed
        """
        ...

    def set_administration_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~administration`.

        :param jsonable: input to be parsed
        """
        ...

    def set_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_embedded_data_specifications_from_jsonable(
        self, jsonable: Jsonable
    ) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~embedded_data_specifications`.

        :param jsonable: input to be parsed
        """
        ...

    def set_is_case_of_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~is_case_of`.

        :param jsonable: input to be parsed
        """
        ...

def concept_description_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.ConceptDescription:
    """
    Parse an instance of :py:class:`.types.ConceptDescription` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.ConceptDescription`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def reference_types_from_jsonable(jsonable: Jsonable) -> aas_types.ReferenceTypes:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.ReferenceTypes`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForReference:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_referred_semantic_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~referred_semantic_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_keys_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~keys`.

        :param jsonable: input to be parsed
        """
        ...

def reference_from_jsonable(jsonable: Jsonable) -> aas_types.Reference:
    """
    Parse an instance of :py:class:`.types.Reference` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Reference`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForKey:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

def key_from_jsonable(jsonable: Jsonable) -> aas_types.Key:
    """
    Parse an instance of :py:class:`.types.Key` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Key`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def key_types_from_jsonable(jsonable: Jsonable) -> aas_types.KeyTypes:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.KeyTypes`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def data_type_def_xsd_from_jsonable(jsonable: Jsonable) -> aas_types.DataTypeDefXSD:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.DataTypeDefXSD`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def abstract_lang_string_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.AbstractLangString:
    """
    Parse an instance of :py:class:`.types.AbstractLangString` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.AbstractLangString`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLangStringNameType:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_language_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~language`.

        :param jsonable: input to be parsed
        """
        ...

    def set_text_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~text`.

        :param jsonable: input to be parsed
        """
        ...

def lang_string_name_type_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.LangStringNameType:
    """
    Parse an instance of :py:class:`.types.LangStringNameType` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LangStringNameType`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLangStringTextType:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_language_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~language`.

        :param jsonable: input to be parsed
        """
        ...

    def set_text_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~text`.

        :param jsonable: input to be parsed
        """
        ...

def lang_string_text_type_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.LangStringTextType:
    """
    Parse an instance of :py:class:`.types.LangStringTextType` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LangStringTextType`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForEnvironment:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_asset_administration_shells_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~asset_administration_shells`.

        :param jsonable: input to be parsed
        """
        ...

    def set_submodels_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~submodels`.

        :param jsonable: input to be parsed
        """
        ...

    def set_concept_descriptions_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~concept_descriptions`.

        :param jsonable: input to be parsed
        """
        ...

def environment_from_jsonable(jsonable: Jsonable) -> aas_types.Environment:
    """
    Parse an instance of :py:class:`.types.Environment` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.Environment`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def data_specification_content_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.DataSpecificationContent:
    """
    Parse an instance of :py:class:`.types.DataSpecificationContent` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Concrete instance of :py:class:`.types.DataSpecificationContent`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForEmbeddedDataSpecification:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_data_specification_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~data_specification`.

        :param jsonable: input to be parsed
        """
        ...

    def set_data_specification_content_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~data_specification_content`.

        :param jsonable: input to be parsed
        """
        ...

def embedded_data_specification_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.EmbeddedDataSpecification:
    """
    Parse an instance of :py:class:`.types.EmbeddedDataSpecification` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.EmbeddedDataSpecification`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

def data_type_iec_61360_from_jsonable(jsonable: Jsonable) -> aas_types.DataTypeIEC61360:
    """
    Convert the JSON-able structure :paramref:`jsonable` to a literal of
    :py:class:`.types.DataTypeIEC61360`.

    :param jsonable: JSON-able structure to be parsed
    :return: parsed literal
    :raise: :py:class:`.DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLevelType:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_min_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~min`.

        :param jsonable: input to be parsed
        """
        ...

    def set_nom_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~nom`.

        :param jsonable: input to be parsed
        """
        ...

    def set_typ_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~typ`.

        :param jsonable: input to be parsed
        """
        ...

    def set_max_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~max`.

        :param jsonable: input to be parsed
        """
        ...

def level_type_from_jsonable(jsonable: Jsonable) -> aas_types.LevelType:
    """
    Parse an instance of :py:class:`.types.LevelType` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LevelType`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForValueReferencePair:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_id`.

        :param jsonable: input to be parsed
        """
        ...

def value_reference_pair_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.ValueReferencePair:
    """
    Parse an instance of :py:class:`.types.ValueReferencePair` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.ValueReferencePair`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForValueList:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_value_reference_pairs_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_reference_pairs`.

        :param jsonable: input to be parsed
        """
        ...

def value_list_from_jsonable(jsonable: Jsonable) -> aas_types.ValueList:
    """
    Parse an instance of :py:class:`.types.ValueList` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.ValueList`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLangStringPreferredNameTypeIEC61360:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_language_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~language`.

        :param jsonable: input to be parsed
        """
        ...

    def set_text_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~text`.

        :param jsonable: input to be parsed
        """
        ...

def lang_string_preferred_name_type_iec_61360_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.LangStringPreferredNameTypeIEC61360:
    """
    Parse an instance of :py:class:`.types.LangStringPreferredNameTypeIEC61360` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LangStringPreferredNameTypeIEC61360`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLangStringShortNameTypeIEC61360:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_language_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~language`.

        :param jsonable: input to be parsed
        """
        ...

    def set_text_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~text`.

        :param jsonable: input to be parsed
        """
        ...

def lang_string_short_name_type_iec_61360_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.LangStringShortNameTypeIEC61360:
    """
    Parse an instance of :py:class:`.types.LangStringShortNameTypeIEC61360` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LangStringShortNameTypeIEC61360`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForLangStringDefinitionTypeIEC61360:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_language_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~language`.

        :param jsonable: input to be parsed
        """
        ...

    def set_text_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~text`.

        :param jsonable: input to be parsed
        """
        ...

def lang_string_definition_type_iec_61360_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.LangStringDefinitionTypeIEC61360:
    """
    Parse an instance of :py:class:`.types.LangStringDefinitionTypeIEC61360` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.LangStringDefinitionTypeIEC61360`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

class _SetterForDataSpecificationIEC61360:
    """Provide de-serialization-setters for properties."""

    def __init__(self) -> None:
        """Initialize with all the properties unset."""
        ...

    def ignore(self, jsonable: Jsonable) -> None:
        """Ignore :paramref:`jsonable` and do not set anything."""
        ...

    def set_preferred_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~preferred_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_short_name_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~short_name`.

        :param jsonable: input to be parsed
        """
        ...

    def set_unit_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~unit`.

        :param jsonable: input to be parsed
        """
        ...

    def set_unit_id_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~unit_id`.

        :param jsonable: input to be parsed
        """
        ...

    def set_source_of_definition_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~source_of_definition`.

        :param jsonable: input to be parsed
        """
        ...

    def set_symbol_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~symbol`.

        :param jsonable: input to be parsed
        """
        ...

    def set_data_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~data_type`.

        :param jsonable: input to be parsed
        """
        ...

    def set_definition_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~definition`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_format_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_format`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_list_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value_list`.

        :param jsonable: input to be parsed
        """
        ...

    def set_value_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~value`.

        :param jsonable: input to be parsed
        """
        ...

    def set_level_type_from_jsonable(self, jsonable: Jsonable) -> None:
        """
        Parse :paramref:`jsonable` as the value of :py:attr:`~level_type`.

        :param jsonable: input to be parsed
        """
        ...

def data_specification_iec_61360_from_jsonable(
    jsonable: Jsonable,
) -> aas_types.DataSpecificationIEC61360:
    """
    Parse an instance of :py:class:`.types.DataSpecificationIEC61360` from the JSON-able
    structure :paramref:`jsonable`.

    :param jsonable: structure to be parsed
    :return: Parsed instance of :py:class:`.types.DataSpecificationIEC61360`
    :raise: :py:class:`DeserializationException` if unexpected :paramref:`jsonable`
    """
    ...

_HAS_SEMANTICS_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.HasSemantics]
]

_SETTER_MAP_FOR_EXTENSION: Mapping[str, Callable[[_SetterForExtension, Jsonable], None]]

_HAS_EXTENSIONS_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.HasExtensions]
]

_REFERABLE_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.Referable]
]

_IDENTIFIABLE_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.Identifiable]
]

_HAS_KIND_FROM_JSONABLE_DISPATCH: Mapping[str, Callable[[Jsonable], aas_types.HasKind]]

_HAS_DATA_SPECIFICATION_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.HasDataSpecification]
]

_SETTER_MAP_FOR_ADMINISTRATIVE_INFORMATION: Mapping[
    str, Callable[[_SetterForAdministrativeInformation, Jsonable], None]
]

_QUALIFIABLE_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.Qualifiable]
]

_SETTER_MAP_FOR_QUALIFIER: Mapping[str, Callable[[_SetterForQualifier, Jsonable], None]]

_SETTER_MAP_FOR_ASSET_ADMINISTRATION_SHELL: Mapping[
    str, Callable[[_SetterForAssetAdministrationShell, Jsonable], None]
]

_SETTER_MAP_FOR_ASSET_INFORMATION: Mapping[
    str, Callable[[_SetterForAssetInformation, Jsonable], None]
]

_SETTER_MAP_FOR_RESOURCE: Mapping[str, Callable[[_SetterForResource, Jsonable], None]]

_SETTER_MAP_FOR_SPECIFIC_ASSET_ID: Mapping[
    str, Callable[[_SetterForSpecificAssetID, Jsonable], None]
]

_SETTER_MAP_FOR_SUBMODEL: Mapping[str, Callable[[_SetterForSubmodel, Jsonable], None]]

_SUBMODEL_ELEMENT_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.SubmodelElement]
]

_RELATIONSHIP_ELEMENT_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.RelationshipElement]
]

_SETTER_MAP_FOR_RELATIONSHIP_ELEMENT: Mapping[
    str, Callable[[_SetterForRelationshipElement, Jsonable], None]
]

_SETTER_MAP_FOR_SUBMODEL_ELEMENT_LIST: Mapping[
    str, Callable[[_SetterForSubmodelElementList, Jsonable], None]
]

_SETTER_MAP_FOR_SUBMODEL_ELEMENT_COLLECTION: Mapping[
    str, Callable[[_SetterForSubmodelElementCollection, Jsonable], None]
]

_DATA_ELEMENT_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.DataElement]
]

_SETTER_MAP_FOR_PROPERTY: Mapping[str, Callable[[_SetterForProperty, Jsonable], None]]

_SETTER_MAP_FOR_MULTI_LANGUAGE_PROPERTY: Mapping[
    str, Callable[[_SetterForMultiLanguageProperty, Jsonable], None]
]

_SETTER_MAP_FOR_RANGE: Mapping[str, Callable[[_SetterForRange, Jsonable], None]]

_SETTER_MAP_FOR_REFERENCE_ELEMENT: Mapping[
    str, Callable[[_SetterForReferenceElement, Jsonable], None]
]

_SETTER_MAP_FOR_BLOB: Mapping[str, Callable[[_SetterForBlob, Jsonable], None]]

_SETTER_MAP_FOR_FILE: Mapping[str, Callable[[_SetterForFile, Jsonable], None]]

_SETTER_MAP_FOR_ANNOTATED_RELATIONSHIP_ELEMENT: Mapping[
    str, Callable[[_SetterForAnnotatedRelationshipElement, Jsonable], None]
]

_SETTER_MAP_FOR_ENTITY: Mapping[str, Callable[[_SetterForEntity, Jsonable], None]]

_SETTER_MAP_FOR_EVENT_PAYLOAD: Mapping[
    str, Callable[[_SetterForEventPayload, Jsonable], None]
]

_EVENT_ELEMENT_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.EventElement]
]

_SETTER_MAP_FOR_BASIC_EVENT_ELEMENT: Mapping[
    str, Callable[[_SetterForBasicEventElement, Jsonable], None]
]

_SETTER_MAP_FOR_OPERATION: Mapping[str, Callable[[_SetterForOperation, Jsonable], None]]

_SETTER_MAP_FOR_OPERATION_VARIABLE: Mapping[
    str, Callable[[_SetterForOperationVariable, Jsonable], None]
]

_SETTER_MAP_FOR_CAPABILITY: Mapping[
    str, Callable[[_SetterForCapability, Jsonable], None]
]

_SETTER_MAP_FOR_CONCEPT_DESCRIPTION: Mapping[
    str, Callable[[_SetterForConceptDescription, Jsonable], None]
]

_SETTER_MAP_FOR_REFERENCE: Mapping[str, Callable[[_SetterForReference, Jsonable], None]]

_SETTER_MAP_FOR_KEY: Mapping[str, Callable[[_SetterForKey, Jsonable], None]]

_ABSTRACT_LANG_STRING_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.AbstractLangString]
]

_SETTER_MAP_FOR_LANG_STRING_NAME_TYPE: Mapping[
    str, Callable[[_SetterForLangStringNameType, Jsonable], None]
]

_SETTER_MAP_FOR_LANG_STRING_TEXT_TYPE: Mapping[
    str, Callable[[_SetterForLangStringTextType, Jsonable], None]
]

_SETTER_MAP_FOR_ENVIRONMENT: Mapping[
    str, Callable[[_SetterForEnvironment, Jsonable], None]
]

_DATA_SPECIFICATION_CONTENT_FROM_JSONABLE_DISPATCH: Mapping[
    str, Callable[[Jsonable], aas_types.DataSpecificationContent]
]

_SETTER_MAP_FOR_EMBEDDED_DATA_SPECIFICATION: Mapping[
    str, Callable[[_SetterForEmbeddedDataSpecification, Jsonable], None]
]

_SETTER_MAP_FOR_LEVEL_TYPE: Mapping[
    str, Callable[[_SetterForLevelType, Jsonable], None]
]

_SETTER_MAP_FOR_VALUE_REFERENCE_PAIR: Mapping[
    str, Callable[[_SetterForValueReferencePair, Jsonable], None]
]

_SETTER_MAP_FOR_VALUE_LIST: Mapping[
    str, Callable[[_SetterForValueList, Jsonable], None]
]

_SETTER_MAP_FOR_LANG_STRING_PREFERRED_NAME_TYPE_IEC_61360: Mapping[
    str, Callable[[_SetterForLangStringPreferredNameTypeIEC61360, Jsonable], None]
]

_SETTER_MAP_FOR_LANG_STRING_SHORT_NAME_TYPE_IEC_61360: Mapping[
    str, Callable[[_SetterForLangStringShortNameTypeIEC61360, Jsonable], None]
]

_SETTER_MAP_FOR_LANG_STRING_DEFINITION_TYPE_IEC_61360: Mapping[
    str, Callable[[_SetterForLangStringDefinitionTypeIEC61360, Jsonable], None]
]

_SETTER_MAP_FOR_DATA_SPECIFICATION_IEC_61360: Mapping[
    str, Callable[[_SetterForDataSpecificationIEC61360, Jsonable], None]
]

# endregion

# region Serialization

def _bytes_to_base64_str(value: bytes) -> str:
    """
    Encode :paramref:`value` as a base64 string.

    :param value: to be encoded
    :return: encoded :paramref:`value` in base64
    """
    # We need to decode as ascii as ``base64.b64encode`` returns bytes,
    # not a string!
    ...

class _Serializer(aas_types.AbstractTransformer[MutableJsonable]):
    """Transform the instance to its JSON-able representation."""

    def transform_extension(self, that: aas_types.Extension) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_administrative_information(
        self, that: aas_types.AdministrativeInformation
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_qualifier(self, that: aas_types.Qualifier) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_asset_administration_shell(
        self, that: aas_types.AssetAdministrationShell
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_asset_information(
        self, that: aas_types.AssetInformation
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_resource(self, that: aas_types.Resource) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_specific_asset_id(
        self, that: aas_types.SpecificAssetID
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_submodel(self, that: aas_types.Submodel) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_relationship_element(
        self, that: aas_types.RelationshipElement
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_submodel_element_list(
        self, that: aas_types.SubmodelElementList
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_submodel_element_collection(
        self, that: aas_types.SubmodelElementCollection
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_property(self, that: aas_types.Property) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_multi_language_property(
        self, that: aas_types.MultiLanguageProperty
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_range(self, that: aas_types.Range) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_reference_element(
        self, that: aas_types.ReferenceElement
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_blob(self, that: aas_types.Blob) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_file(self, that: aas_types.File) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_annotated_relationship_element(
        self, that: aas_types.AnnotatedRelationshipElement
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_entity(self, that: aas_types.Entity) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_event_payload(self, that: aas_types.EventPayload) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_basic_event_element(
        self, that: aas_types.BasicEventElement
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_operation(self, that: aas_types.Operation) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_operation_variable(
        self, that: aas_types.OperationVariable
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_capability(self, that: aas_types.Capability) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_concept_description(
        self, that: aas_types.ConceptDescription
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_reference(self, that: aas_types.Reference) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_key(self, that: aas_types.Key) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_lang_string_name_type(
        self, that: aas_types.LangStringNameType
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_lang_string_text_type(
        self, that: aas_types.LangStringTextType
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_environment(self, that: aas_types.Environment) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_embedded_data_specification(
        self, that: aas_types.EmbeddedDataSpecification
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_level_type(self, that: aas_types.LevelType) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_value_reference_pair(
        self, that: aas_types.ValueReferencePair
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_value_list(self, that: aas_types.ValueList) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_lang_string_preferred_name_type_iec_61360(
        self, that: aas_types.LangStringPreferredNameTypeIEC61360
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_lang_string_short_name_type_iec_61360(
        self, that: aas_types.LangStringShortNameTypeIEC61360
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...
    # noinspection PyMethodMayBeStatic
    def transform_lang_string_definition_type_iec_61360(
        self, that: aas_types.LangStringDefinitionTypeIEC61360
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

    def transform_data_specification_iec_61360(
        self, that: aas_types.DataSpecificationIEC61360
    ) -> MutableJsonable:
        """Serialize :paramref:`that` to a JSON-able representation."""
        ...

_SERIALIZER = _Serializer()

def to_jsonable(that: aas_types.Class) -> MutableJsonable:
    """
    Convert :paramref:`that` to a JSON-able structure.

    :param that:
        AAS data to be recursively converted to a JSON-able structure
    :return:
        JSON-able structure which can be further encoded with, *e.g.*, :py:mod:`json`
    """
    ...

# endregion

# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.
