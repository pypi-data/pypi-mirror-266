"""De-serialize enumerations from string representations."""

# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.

from typing import (
    Mapping,
    Optional,
)

import aas_core3.types as aas_types

_MODELLING_KIND_FROM_STR: Mapping[str, aas_types.ModellingKind]

def modelling_kind_from_str(text: str) -> Optional[aas_types.ModellingKind]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.ModellingKind`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.ModellingKind`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.ModellingKind`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_QUALIFIER_KIND_FROM_STR: Mapping[str, aas_types.QualifierKind]

def qualifier_kind_from_str(text: str) -> Optional[aas_types.QualifierKind]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.QualifierKind`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.QualifierKind`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.QualifierKind`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_ASSET_KIND_FROM_STR: Mapping[str, aas_types.AssetKind]

def asset_kind_from_str(text: str) -> Optional[aas_types.AssetKind]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.AssetKind`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.AssetKind`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.AssetKind`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_AAS_SUBMODEL_ELEMENTS_FROM_STR: Mapping[str, aas_types.AASSubmodelElements]

def aas_submodel_elements_from_str(
    text: str,
) -> Optional[aas_types.AASSubmodelElements]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.AASSubmodelElements`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.AASSubmodelElements`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.AASSubmodelElements`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_ENTITY_TYPE_FROM_STR: Mapping[str, aas_types.EntityType]

def entity_type_from_str(text: str) -> Optional[aas_types.EntityType]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.EntityType`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.EntityType`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.EntityType`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_DIRECTION_FROM_STR: Mapping[str, aas_types.Direction]

def direction_from_str(text: str) -> Optional[aas_types.Direction]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.Direction`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.Direction`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.Direction`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_STATE_OF_EVENT_FROM_STR: Mapping[str, aas_types.StateOfEvent]

def state_of_event_from_str(text: str) -> Optional[aas_types.StateOfEvent]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.StateOfEvent`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.StateOfEvent`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.StateOfEvent`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_REFERENCE_TYPES_FROM_STR: Mapping[str, aas_types.ReferenceTypes]

def reference_types_from_str(text: str) -> Optional[aas_types.ReferenceTypes]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.ReferenceTypes`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.ReferenceTypes`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.ReferenceTypes`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_KEY_TYPES_FROM_STR: Mapping[str, aas_types.KeyTypes]

def key_types_from_str(text: str) -> Optional[aas_types.KeyTypes]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.KeyTypes`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.KeyTypes`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.KeyTypes`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_DATA_TYPE_DEF_XSD_FROM_STR: Mapping[str, aas_types.DataTypeDefXSD]

def data_type_def_xsd_from_str(text: str) -> Optional[aas_types.DataTypeDefXSD]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.DataTypeDefXSD`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.DataTypeDefXSD`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.DataTypeDefXSD`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

_DATA_TYPE_IEC_61360_FROM_STR: Mapping[str, aas_types.DataTypeIEC61360]

def data_type_iec_61360_from_str(text: str) -> Optional[aas_types.DataTypeIEC61360]:
    """
    Parse :paramref:`text` as string representation
    of :py:class:`aas_core3.DataTypeIEC61360`.

    If :paramref:`text` is not a valid string representation of a literal
    of :py:class:`aas_core3.DataTypeIEC61360`, return ``None``.

    :param text: to be parsed
    :return:
        the corresponding literal of :py:class:`aas_core3.DataTypeIEC61360`
        or ``None``, if :paramref:`text` invalid.
    """
    ...

# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.
