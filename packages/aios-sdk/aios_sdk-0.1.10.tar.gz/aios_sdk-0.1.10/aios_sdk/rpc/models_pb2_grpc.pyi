"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import models_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ModelsServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        models_pb2.ListRequest,
        models_pb2.ListResponse,
    ]

    Info: grpc.UnaryUnaryMultiCallable[
        models_pb2.InfoRequest,
        models_pb2.InfoResponse,
    ]

    Meta: grpc.UnaryUnaryMultiCallable[
        models_pb2.MetaRequest,
        models_pb2.MetaResponse,
    ]

    StartDownload: grpc.UnaryStreamMultiCallable[
        models_pb2.StartDownloadRequest,
        models_pb2.DownloadInfo,
    ]

    Remove: grpc.UnaryUnaryMultiCallable[
        models_pb2.RemoveRequest,
        models_pb2.RemoveResponse,
    ]

class ModelsServiceAsyncStub:
    List: grpc.aio.UnaryUnaryMultiCallable[
        models_pb2.ListRequest,
        models_pb2.ListResponse,
    ]

    Info: grpc.aio.UnaryUnaryMultiCallable[
        models_pb2.InfoRequest,
        models_pb2.InfoResponse,
    ]

    Meta: grpc.aio.UnaryUnaryMultiCallable[
        models_pb2.MetaRequest,
        models_pb2.MetaResponse,
    ]

    StartDownload: grpc.aio.UnaryStreamMultiCallable[
        models_pb2.StartDownloadRequest,
        models_pb2.DownloadInfo,
    ]

    Remove: grpc.aio.UnaryUnaryMultiCallable[
        models_pb2.RemoveRequest,
        models_pb2.RemoveResponse,
    ]

class ModelsServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def List(
        self,
        request: models_pb2.ListRequest,
        context: _ServicerContext,
    ) -> typing.Union[models_pb2.ListResponse, collections.abc.Awaitable[models_pb2.ListResponse]]: ...

    @abc.abstractmethod
    def Info(
        self,
        request: models_pb2.InfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[models_pb2.InfoResponse, collections.abc.Awaitable[models_pb2.InfoResponse]]: ...

    @abc.abstractmethod
    def Meta(
        self,
        request: models_pb2.MetaRequest,
        context: _ServicerContext,
    ) -> typing.Union[models_pb2.MetaResponse, collections.abc.Awaitable[models_pb2.MetaResponse]]: ...

    @abc.abstractmethod
    def StartDownload(
        self,
        request: models_pb2.StartDownloadRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[models_pb2.DownloadInfo], collections.abc.AsyncIterator[models_pb2.DownloadInfo]]: ...

    @abc.abstractmethod
    def Remove(
        self,
        request: models_pb2.RemoveRequest,
        context: _ServicerContext,
    ) -> typing.Union[models_pb2.RemoveResponse, collections.abc.Awaitable[models_pb2.RemoveResponse]]: ...

def add_ModelsServiceServicer_to_server(servicer: ModelsServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
