"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import app_state_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AppStateServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetState: grpc.UnaryUnaryMultiCallable[
        app_state_pb2.GetStateRequest,
        app_state_pb2.GetStateResponse,
    ]

    UpdateState: grpc.UnaryUnaryMultiCallable[
        app_state_pb2.UpdateStateRequest,
        app_state_pb2.UpdateStateResponse,
    ]

    GetAvailableKeys: grpc.UnaryUnaryMultiCallable[
        app_state_pb2.GetAvailableKeysRequest,
        app_state_pb2.GetAvailableKeysResponse,
    ]

class AppStateServiceAsyncStub:
    GetState: grpc.aio.UnaryUnaryMultiCallable[
        app_state_pb2.GetStateRequest,
        app_state_pb2.GetStateResponse,
    ]

    UpdateState: grpc.aio.UnaryUnaryMultiCallable[
        app_state_pb2.UpdateStateRequest,
        app_state_pb2.UpdateStateResponse,
    ]

    GetAvailableKeys: grpc.aio.UnaryUnaryMultiCallable[
        app_state_pb2.GetAvailableKeysRequest,
        app_state_pb2.GetAvailableKeysResponse,
    ]

class AppStateServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetState(
        self,
        request: app_state_pb2.GetStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[app_state_pb2.GetStateResponse, collections.abc.Awaitable[app_state_pb2.GetStateResponse]]: ...

    @abc.abstractmethod
    def UpdateState(
        self,
        request: app_state_pb2.UpdateStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[app_state_pb2.UpdateStateResponse, collections.abc.Awaitable[app_state_pb2.UpdateStateResponse]]: ...

    @abc.abstractmethod
    def GetAvailableKeys(
        self,
        request: app_state_pb2.GetAvailableKeysRequest,
        context: _ServicerContext,
    ) -> typing.Union[app_state_pb2.GetAvailableKeysResponse, collections.abc.Awaitable[app_state_pb2.GetAvailableKeysResponse]]: ...

def add_AppStateServiceServicer_to_server(servicer: AppStateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
