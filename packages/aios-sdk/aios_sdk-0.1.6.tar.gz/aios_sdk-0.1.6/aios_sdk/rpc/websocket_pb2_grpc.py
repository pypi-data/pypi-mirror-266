# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import websocket_pb2 as websocket__pb2


class WSServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WSConnect = channel.unary_unary(
                '/websocket_service.WSService/WSConnect',
                request_serializer=websocket__pb2.ConnectRequest.SerializeToString,
                response_deserializer=websocket__pb2.ConnectResponse.FromString,
                )
        self.WSDisconnect = channel.unary_unary(
                '/websocket_service.WSService/WSDisconnect',
                request_serializer=websocket__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=websocket__pb2.DisconnectResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/websocket_service.WSService/SendMessage',
                request_serializer=websocket__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=websocket__pb2.SendMessageResponse.FromString,
                )


class WSServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def WSConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WSDisconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WSConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.WSConnect,
                    request_deserializer=websocket__pb2.ConnectRequest.FromString,
                    response_serializer=websocket__pb2.ConnectResponse.SerializeToString,
            ),
            'WSDisconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.WSDisconnect,
                    request_deserializer=websocket__pb2.DisconnectRequest.FromString,
                    response_serializer=websocket__pb2.DisconnectResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=websocket__pb2.SendMessageRequest.FromString,
                    response_serializer=websocket__pb2.SendMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'websocket_service.WSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WSService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def WSConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/websocket_service.WSService/WSConnect',
            websocket__pb2.ConnectRequest.SerializeToString,
            websocket__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WSDisconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/websocket_service.WSService/WSDisconnect',
            websocket__pb2.DisconnectRequest.SerializeToString,
            websocket__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/websocket_service.WSService/SendMessage',
            websocket__pb2.SendMessageRequest.SerializeToString,
            websocket__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
