"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import inference_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class InferenceServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Infer: grpc.UnaryStreamMultiCallable[
        inference_pb2.InferRequest,
        inference_pb2.InferResponse,
    ]

    Interrupt: grpc.UnaryUnaryMultiCallable[
        inference_pb2.InterruptRequest,
        inference_pb2.InterruptResponse,
    ]

class InferenceServiceAsyncStub:
    Infer: grpc.aio.UnaryStreamMultiCallable[
        inference_pb2.InferRequest,
        inference_pb2.InferResponse,
    ]

    Interrupt: grpc.aio.UnaryUnaryMultiCallable[
        inference_pb2.InterruptRequest,
        inference_pb2.InterruptResponse,
    ]

class InferenceServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Infer(
        self,
        request: inference_pb2.InferRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[inference_pb2.InferResponse], collections.abc.AsyncIterator[inference_pb2.InferResponse]]: ...

    @abc.abstractmethod
    def Interrupt(
        self,
        request: inference_pb2.InterruptRequest,
        context: _ServicerContext,
    ) -> typing.Union[inference_pb2.InterruptResponse, collections.abc.Awaitable[inference_pb2.InterruptResponse]]: ...

def add_InferenceServiceServicer_to_server(servicer: InferenceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
