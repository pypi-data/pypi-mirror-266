"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import websocket_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class WSServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    WSConnect: grpc.UnaryUnaryMultiCallable[
        websocket_pb2.ConnectRequest,
        websocket_pb2.ConnectResponse,
    ]

    WSDisconnect: grpc.UnaryUnaryMultiCallable[
        websocket_pb2.DisconnectRequest,
        websocket_pb2.DisconnectResponse,
    ]

    SendMessage: grpc.UnaryUnaryMultiCallable[
        websocket_pb2.SendMessageRequest,
        websocket_pb2.SendMessageResponse,
    ]

class WSServiceAsyncStub:
    WSConnect: grpc.aio.UnaryUnaryMultiCallable[
        websocket_pb2.ConnectRequest,
        websocket_pb2.ConnectResponse,
    ]

    WSDisconnect: grpc.aio.UnaryUnaryMultiCallable[
        websocket_pb2.DisconnectRequest,
        websocket_pb2.DisconnectResponse,
    ]

    SendMessage: grpc.aio.UnaryUnaryMultiCallable[
        websocket_pb2.SendMessageRequest,
        websocket_pb2.SendMessageResponse,
    ]

class WSServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def WSConnect(
        self,
        request: websocket_pb2.ConnectRequest,
        context: _ServicerContext,
    ) -> typing.Union[websocket_pb2.ConnectResponse, collections.abc.Awaitable[websocket_pb2.ConnectResponse]]: ...

    @abc.abstractmethod
    def WSDisconnect(
        self,
        request: websocket_pb2.DisconnectRequest,
        context: _ServicerContext,
    ) -> typing.Union[websocket_pb2.DisconnectResponse, collections.abc.Awaitable[websocket_pb2.DisconnectResponse]]: ...

    @abc.abstractmethod
    def SendMessage(
        self,
        request: websocket_pb2.SendMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[websocket_pb2.SendMessageResponse, collections.abc.Awaitable[websocket_pb2.SendMessageResponse]]: ...

def add_WSServiceServicer_to_server(servicer: WSServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
