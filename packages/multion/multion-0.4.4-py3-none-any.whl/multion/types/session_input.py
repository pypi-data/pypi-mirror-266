# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import pydantic_v1
from .session_input_browser_params import SessionInputBrowserParams


class SessionInput(pydantic_v1.BaseModel):
    cmd: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A specific natural language instruction for the next step.
    """

    url: typing.Optional[str] = None
    local: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Boolean flag to indicate if session to be run locally or in the cloud (Default: False)
    """

    stream: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Boolean flag to stream results back to the client (Default: False)
    """

    browser_params: typing.Optional[SessionInputBrowserParams] = pydantic_v1.Field(default=None)
    """
    Object containing height and width for the browser screen size.
    """

    include_screenshot: typing.Optional[bool] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
