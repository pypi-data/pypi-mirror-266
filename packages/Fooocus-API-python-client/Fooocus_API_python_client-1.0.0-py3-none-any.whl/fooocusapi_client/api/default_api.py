# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, List, Optional, Union
from typing_extensions import Annotated
from fooocusapi_client.models.advanced_params import AdvancedParams
from fooocusapi_client.models.all_model_names_response import AllModelNamesResponse
from fooocusapi_client.models.async_job_response import AsyncJobResponse
from fooocusapi_client.models.cn_stop1 import CnStop1
from fooocusapi_client.models.cn_stop2 import CnStop2
from fooocusapi_client.models.cn_stop3 import CnStop3
from fooocusapi_client.models.cn_stop4 import CnStop4
from fooocusapi_client.models.cn_weight1 import CnWeight1
from fooocusapi_client.models.cn_weight2 import CnWeight2
from fooocusapi_client.models.cn_weight3 import CnWeight3
from fooocusapi_client.models.cn_weight4 import CnWeight4
from fooocusapi_client.models.describe_image_response import DescribeImageResponse
from fooocusapi_client.models.img_inpaint_or_outpaint_request_json import ImgInpaintOrOutpaintRequestJson
from fooocusapi_client.models.img_prompt_request_json import ImgPromptRequestJson
from fooocusapi_client.models.img_upscale_or_vary_request_json import ImgUpscaleOrVaryRequestJson
from fooocusapi_client.models.inpaint_additional_prompt import InpaintAdditionalPrompt
from fooocusapi_client.models.job_queue_info import JobQueueInfo
from fooocusapi_client.models.loras import Loras
from fooocusapi_client.models.response_get_history_v1_generation_job_history_get import ResponseGetHistoryV1GenerationJobHistoryGet
from fooocusapi_client.models.response_img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post import ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost
from fooocusapi_client.models.response_img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post import ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost
from fooocusapi_client.models.response_img_prompt_v1_generation_image_prompt_post import ResponseImgPromptV1GenerationImagePromptPost
from fooocusapi_client.models.response_img_prompt_v2_generation_image_prompt_post import ResponseImgPromptV2GenerationImagePromptPost
from fooocusapi_client.models.response_img_upscale_or_vary_v1_generation_image_upscale_vary_post import ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost
from fooocusapi_client.models.response_img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post import ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost
from fooocusapi_client.models.response_text2_img_generation_v1_generation_text_to_image_post import ResponseText2ImgGenerationV1GenerationTextToImagePost
from fooocusapi_client.models.response_text_to_img_with_ip_v2_generation_text_to_image_with_ip_post import ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost
from fooocusapi_client.models.stop_response import StopResponse
from fooocusapi_client.models.text2_img_request import Text2ImgRequest
from fooocusapi_client.models.text2_img_request_with_prompt import Text2ImgRequestWithPrompt
from fooocusapi_client.models.upscale_or_vary_method import UpscaleOrVaryMethod
from fooocusapi_client.models.upscale_value import UpscaleValue

from fooocusapi_client.api_client import ApiClient, RequestSerialized
from fooocusapi_client.api_response import ApiResponse
from fooocusapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def all_models_v1_engines_all_models_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AllModelNamesResponse:
        """All Models

        Get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_models_v1_engines_all_models_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def all_models_v1_engines_all_models_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AllModelNamesResponse]:
        """All Models

        Get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_models_v1_engines_all_models_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def all_models_v1_engines_all_models_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """All Models

        Get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_models_v1_engines_all_models_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _all_models_v1_engines_all_models_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/engines/all-models',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def all_styles_v1_engines_styles_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """All Styles

        Get all legal Fooocus styles

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_styles_v1_engines_styles_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def all_styles_v1_engines_styles_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """All Styles

        Get all legal Fooocus styles

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_styles_v1_engines_styles_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def all_styles_v1_engines_styles_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """All Styles

        Get all legal Fooocus styles

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._all_styles_v1_engines_styles_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _all_styles_v1_engines_styles_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/engines/styles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_image_v1_tools_describe_image_post(
        self,
        image: Union[StrictBytes, StrictStr],
        type: Annotated[Optional[Any], Field(description="Image type, 'Photo' or 'Anime'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeImageResponse:
        """Describe Image


        :param image: (required)
        :type image: bytearray
        :param type: Image type, 'Photo' or 'Anime'
        :type type: DescribeImageType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_image_v1_tools_describe_image_post_serialize(
            image=image,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeImageResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_image_v1_tools_describe_image_post_with_http_info(
        self,
        image: Union[StrictBytes, StrictStr],
        type: Annotated[Optional[Any], Field(description="Image type, 'Photo' or 'Anime'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeImageResponse]:
        """Describe Image


        :param image: (required)
        :type image: bytearray
        :param type: Image type, 'Photo' or 'Anime'
        :type type: DescribeImageType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_image_v1_tools_describe_image_post_serialize(
            image=image,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeImageResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_image_v1_tools_describe_image_post_without_preload_content(
        self,
        image: Union[StrictBytes, StrictStr],
        type: Annotated[Optional[Any], Field(description="Image type, 'Photo' or 'Anime'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Describe Image


        :param image: (required)
        :type image: bytearray
        :param type: Image type, 'Photo' or 'Anime'
        :type type: DescribeImageType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_image_v1_tools_describe_image_post_serialize(
            image=image,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeImageResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_image_v1_tools_describe_image_post_serialize(
        self,
        image,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type.value))
            
        # process the header parameters
        # process the form parameters
        if image is not None:
            _files['image'] = image
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/tools/describe-image',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_history_v1_generation_job_history_get(
        self,
        job_id: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseGetHistoryV1GenerationJobHistoryGet:
        """Get History

        Query historical job data

        :param job_id:
        :type job_id: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_history_v1_generation_job_history_get_serialize(
            job_id=job_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseGetHistoryV1GenerationJobHistoryGet",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_history_v1_generation_job_history_get_with_http_info(
        self,
        job_id: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseGetHistoryV1GenerationJobHistoryGet]:
        """Get History

        Query historical job data

        :param job_id:
        :type job_id: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_history_v1_generation_job_history_get_serialize(
            job_id=job_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseGetHistoryV1GenerationJobHistoryGet",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_history_v1_generation_job_history_get_without_preload_content(
        self,
        job_id: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get History

        Query historical job data

        :param job_id:
        :type job_id: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_history_v1_generation_job_history_get_serialize(
            job_id=job_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseGetHistoryV1GenerationJobHistoryGet",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_history_v1_generation_job_history_get_serialize(
        self,
        job_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if job_id is not None:
            
            _query_params.append(('job_id', job_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/generation/job-history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def home_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Home


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._home_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def home_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Home


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._home_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def home_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Home


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._home_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _home_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for inpaint or outpaint")],
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, -1 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, -1 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, -1 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, -1 for default")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost:
        """Img Inpaint Or Outpaint


        :param input_image: Init image for inpaint or outpaint (required)
        :type input_image: bytearray
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, -1 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, -1 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, -1 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, -1 for default
        :type outpaint_distance_bottom: int
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_serialize(
            input_image=input_image,
            accept=accept,
            accept2=accept2,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_with_http_info(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for inpaint or outpaint")],
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, -1 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, -1 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, -1 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, -1 for default")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost]:
        """Img Inpaint Or Outpaint


        :param input_image: Init image for inpaint or outpaint (required)
        :type input_image: bytearray
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, -1 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, -1 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, -1 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, -1 for default
        :type outpaint_distance_bottom: int
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_serialize(
            input_image=input_image,
            accept=accept,
            accept2=accept2,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_without_preload_content(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for inpaint or outpaint")],
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, -1 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, -1 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, -1 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, -1 for default")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Inpaint Or Outpaint


        :param input_image: Init image for inpaint or outpaint (required)
        :type input_image: bytearray
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, -1 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, -1 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, -1 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, -1 for default
        :type outpaint_distance_bottom: int
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_serialize(
            input_image=input_image,
            accept=accept,
            accept2=accept2,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV1GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_inpaint_or_outpaint_v1_generation_image_inpaint_outpaint_post_serialize(
        self,
        input_image,
        accept,
        accept2,
        input_mask,
        inpaint_additional_prompt,
        outpaint_selections,
        outpaint_distance_left,
        outpaint_distance_right,
        outpaint_distance_top,
        outpaint_distance_bottom,
        prompt,
        negative_prompt,
        style_selections,
        performance_selection,
        aspect_ratios_selection,
        image_number,
        image_seed,
        sharpness,
        guidance_scale,
        base_model_name,
        refiner_model_name,
        refiner_switch,
        loras,
        advanced_params,
        require_base64,
        async_process,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'outpaint_selections': 'csv',
            'style_selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        if input_image is not None:
            _files['input_image'] = input_image
        if input_mask is not None:
            _files['input_mask'] = input_mask
        if inpaint_additional_prompt is not None:
            _form_params.append(('inpaint_additional_prompt', inpaint_additional_prompt))
        if outpaint_selections is not None:
            _form_params.append(('outpaint_selections', outpaint_selections))
        if outpaint_distance_left is not None:
            _form_params.append(('outpaint_distance_left', outpaint_distance_left))
        if outpaint_distance_right is not None:
            _form_params.append(('outpaint_distance_right', outpaint_distance_right))
        if outpaint_distance_top is not None:
            _form_params.append(('outpaint_distance_top', outpaint_distance_top))
        if outpaint_distance_bottom is not None:
            _form_params.append(('outpaint_distance_bottom', outpaint_distance_bottom))
        if prompt is not None:
            _form_params.append(('prompt', prompt))
        if negative_prompt is not None:
            _form_params.append(('negative_prompt', negative_prompt))
        if style_selections is not None:
            _form_params.append(('style_selections', style_selections))
        if performance_selection is not None:
            _form_params.append(('performance_selection', performance_selection))
        if aspect_ratios_selection is not None:
            _form_params.append(('aspect_ratios_selection', aspect_ratios_selection))
        if image_number is not None:
            _form_params.append(('image_number', image_number))
        if image_seed is not None:
            _form_params.append(('image_seed', image_seed))
        if sharpness is not None:
            _form_params.append(('sharpness', sharpness))
        if guidance_scale is not None:
            _form_params.append(('guidance_scale', guidance_scale))
        if base_model_name is not None:
            _form_params.append(('base_model_name', base_model_name))
        if refiner_model_name is not None:
            _form_params.append(('refiner_model_name', refiner_model_name))
        if refiner_switch is not None:
            _form_params.append(('refiner_switch', refiner_switch))
        if loras is not None:
            _form_params.append(('loras', loras))
        if advanced_params is not None:
            _form_params.append(('advanced_params', advanced_params))
        if require_base64 is not None:
            _form_params.append(('require_base64', require_base64))
        if async_process is not None:
            _form_params.append(('async_process', async_process))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/generation/image-inpaint-outpaint',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post(
        self,
        img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost:
        """Img Inpaint Or Outpaint V2


        :param img_inpaint_or_outpaint_request_json: (required)
        :type img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_serialize(
            img_inpaint_or_outpaint_request_json=img_inpaint_or_outpaint_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_with_http_info(
        self,
        img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost]:
        """Img Inpaint Or Outpaint V2


        :param img_inpaint_or_outpaint_request_json: (required)
        :type img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_serialize(
            img_inpaint_or_outpaint_request_json=img_inpaint_or_outpaint_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_without_preload_content(
        self,
        img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Inpaint Or Outpaint V2


        :param img_inpaint_or_outpaint_request_json: (required)
        :type img_inpaint_or_outpaint_request_json: ImgInpaintOrOutpaintRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_serialize(
            img_inpaint_or_outpaint_request_json=img_inpaint_or_outpaint_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgInpaintOrOutpaintV2V2GenerationImageInpaintOutpaintPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_inpaint_or_outpaint_v2_v2_generation_image_inpaint_outpaint_post_serialize(
        self,
        img_inpaint_or_outpaint_request_json,
        accept,
        accept2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        # process the body parameter
        if img_inpaint_or_outpaint_request_json is not None:
            _body_params = img_inpaint_or_outpaint_request_json


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/generation/image-inpaint-outpaint',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_prompt_v1_generation_image_prompt_post(
        self,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        cn_img1: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        input_image: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Init image for inpaint or outpaint")] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, 0 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, 0 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, 0 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, 0 for default")] = None,
        cn_stop1: Optional[CnStop1] = None,
        cn_weight1: Optional[CnWeight1] = None,
        cn_type1: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img2: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop2: Optional[CnStop2] = None,
        cn_weight2: Optional[CnWeight2] = None,
        cn_type2: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img3: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop3: Optional[CnStop3] = None,
        cn_weight3: Optional[CnWeight3] = None,
        cn_type3: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img4: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop4: Optional[CnStop4] = None,
        cn_weight4: Optional[CnWeight4] = None,
        cn_type4: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Optional[Any] = None,
        aspect_ratios_selection: Optional[StrictStr] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgPromptV1GenerationImagePromptPost:
        """Img Prompt


        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param cn_img1: Input image for image prompt
        :type cn_img1: bytearray
        :param input_image: Init image for inpaint or outpaint
        :type input_image: bytearray
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, 0 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, 0 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, 0 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, 0 for default
        :type outpaint_distance_bottom: int
        :param cn_stop1:
        :type cn_stop1: CnStop1
        :param cn_weight1:
        :type cn_weight1: CnWeight1
        :param cn_type1: ControlNet type for image prompt
        :type cn_type1: ControlNetType
        :param cn_img2: Input image for image prompt
        :type cn_img2: bytearray
        :param cn_stop2:
        :type cn_stop2: CnStop2
        :param cn_weight2:
        :type cn_weight2: CnWeight2
        :param cn_type2: ControlNet type for image prompt
        :type cn_type2: ControlNetType
        :param cn_img3: Input image for image prompt
        :type cn_img3: bytearray
        :param cn_stop3:
        :type cn_stop3: CnStop3
        :param cn_weight3:
        :type cn_weight3: CnWeight3
        :param cn_type3: ControlNet type for image prompt
        :type cn_type3: ControlNetType
        :param cn_img4: Input image for image prompt
        :type cn_img4: bytearray
        :param cn_stop4:
        :type cn_stop4: CnStop4
        :param cn_weight4:
        :type cn_weight4: CnWeight4
        :param cn_type4: ControlNet type for image prompt
        :type cn_type4: ControlNetType
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection:
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection:
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v1_generation_image_prompt_post_serialize(
            accept=accept,
            accept2=accept2,
            cn_img1=cn_img1,
            input_image=input_image,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            cn_stop1=cn_stop1,
            cn_weight1=cn_weight1,
            cn_type1=cn_type1,
            cn_img2=cn_img2,
            cn_stop2=cn_stop2,
            cn_weight2=cn_weight2,
            cn_type2=cn_type2,
            cn_img3=cn_img3,
            cn_stop3=cn_stop3,
            cn_weight3=cn_weight3,
            cn_type3=cn_type3,
            cn_img4=cn_img4,
            cn_stop4=cn_stop4,
            cn_weight4=cn_weight4,
            cn_type4=cn_type4,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV1GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_prompt_v1_generation_image_prompt_post_with_http_info(
        self,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        cn_img1: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        input_image: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Init image for inpaint or outpaint")] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, 0 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, 0 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, 0 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, 0 for default")] = None,
        cn_stop1: Optional[CnStop1] = None,
        cn_weight1: Optional[CnWeight1] = None,
        cn_type1: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img2: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop2: Optional[CnStop2] = None,
        cn_weight2: Optional[CnWeight2] = None,
        cn_type2: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img3: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop3: Optional[CnStop3] = None,
        cn_weight3: Optional[CnWeight3] = None,
        cn_type3: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img4: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop4: Optional[CnStop4] = None,
        cn_weight4: Optional[CnWeight4] = None,
        cn_type4: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Optional[Any] = None,
        aspect_ratios_selection: Optional[StrictStr] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgPromptV1GenerationImagePromptPost]:
        """Img Prompt


        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param cn_img1: Input image for image prompt
        :type cn_img1: bytearray
        :param input_image: Init image for inpaint or outpaint
        :type input_image: bytearray
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, 0 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, 0 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, 0 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, 0 for default
        :type outpaint_distance_bottom: int
        :param cn_stop1:
        :type cn_stop1: CnStop1
        :param cn_weight1:
        :type cn_weight1: CnWeight1
        :param cn_type1: ControlNet type for image prompt
        :type cn_type1: ControlNetType
        :param cn_img2: Input image for image prompt
        :type cn_img2: bytearray
        :param cn_stop2:
        :type cn_stop2: CnStop2
        :param cn_weight2:
        :type cn_weight2: CnWeight2
        :param cn_type2: ControlNet type for image prompt
        :type cn_type2: ControlNetType
        :param cn_img3: Input image for image prompt
        :type cn_img3: bytearray
        :param cn_stop3:
        :type cn_stop3: CnStop3
        :param cn_weight3:
        :type cn_weight3: CnWeight3
        :param cn_type3: ControlNet type for image prompt
        :type cn_type3: ControlNetType
        :param cn_img4: Input image for image prompt
        :type cn_img4: bytearray
        :param cn_stop4:
        :type cn_stop4: CnStop4
        :param cn_weight4:
        :type cn_weight4: CnWeight4
        :param cn_type4: ControlNet type for image prompt
        :type cn_type4: ControlNetType
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection:
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection:
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v1_generation_image_prompt_post_serialize(
            accept=accept,
            accept2=accept2,
            cn_img1=cn_img1,
            input_image=input_image,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            cn_stop1=cn_stop1,
            cn_weight1=cn_weight1,
            cn_type1=cn_type1,
            cn_img2=cn_img2,
            cn_stop2=cn_stop2,
            cn_weight2=cn_weight2,
            cn_type2=cn_type2,
            cn_img3=cn_img3,
            cn_stop3=cn_stop3,
            cn_weight3=cn_weight3,
            cn_type3=cn_type3,
            cn_img4=cn_img4,
            cn_stop4=cn_stop4,
            cn_weight4=cn_weight4,
            cn_type4=cn_type4,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV1GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_prompt_v1_generation_image_prompt_post_without_preload_content(
        self,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        cn_img1: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        input_image: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Init image for inpaint or outpaint")] = None,
        input_mask: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Inpaint or outpaint mask")] = None,
        inpaint_additional_prompt: Optional[InpaintAdditionalPrompt] = None,
        outpaint_selections: Annotated[Optional[List[StrictStr]], Field(description="Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma")] = None,
        outpaint_distance_left: Annotated[Optional[StrictInt], Field(description="Set outpaint left distance, 0 for default")] = None,
        outpaint_distance_right: Annotated[Optional[StrictInt], Field(description="Set outpaint right distance, 0 for default")] = None,
        outpaint_distance_top: Annotated[Optional[StrictInt], Field(description="Set outpaint top distance, 0 for default")] = None,
        outpaint_distance_bottom: Annotated[Optional[StrictInt], Field(description="Set outpaint bottom distance, 0 for default")] = None,
        cn_stop1: Optional[CnStop1] = None,
        cn_weight1: Optional[CnWeight1] = None,
        cn_type1: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img2: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop2: Optional[CnStop2] = None,
        cn_weight2: Optional[CnWeight2] = None,
        cn_type2: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img3: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop3: Optional[CnStop3] = None,
        cn_weight3: Optional[CnWeight3] = None,
        cn_type3: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        cn_img4: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Input image for image prompt")] = None,
        cn_stop4: Optional[CnStop4] = None,
        cn_weight4: Optional[CnWeight4] = None,
        cn_type4: Annotated[Optional[Any], Field(description="ControlNet type for image prompt")] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Optional[Any] = None,
        aspect_ratios_selection: Optional[StrictStr] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Optional[StrictStr] = None,
        refiner_model_name: Optional[StrictStr] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Prompt


        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param cn_img1: Input image for image prompt
        :type cn_img1: bytearray
        :param input_image: Init image for inpaint or outpaint
        :type input_image: bytearray
        :param input_mask: Inpaint or outpaint mask
        :type input_mask: bytearray
        :param inpaint_additional_prompt:
        :type inpaint_additional_prompt: InpaintAdditionalPrompt
        :param outpaint_selections: Outpaint expansion selections, literal 'Left', 'Right', 'Top', 'Bottom' seperated by comma
        :type outpaint_selections: List[str]
        :param outpaint_distance_left: Set outpaint left distance, 0 for default
        :type outpaint_distance_left: int
        :param outpaint_distance_right: Set outpaint right distance, 0 for default
        :type outpaint_distance_right: int
        :param outpaint_distance_top: Set outpaint top distance, 0 for default
        :type outpaint_distance_top: int
        :param outpaint_distance_bottom: Set outpaint bottom distance, 0 for default
        :type outpaint_distance_bottom: int
        :param cn_stop1:
        :type cn_stop1: CnStop1
        :param cn_weight1:
        :type cn_weight1: CnWeight1
        :param cn_type1: ControlNet type for image prompt
        :type cn_type1: ControlNetType
        :param cn_img2: Input image for image prompt
        :type cn_img2: bytearray
        :param cn_stop2:
        :type cn_stop2: CnStop2
        :param cn_weight2:
        :type cn_weight2: CnWeight2
        :param cn_type2: ControlNet type for image prompt
        :type cn_type2: ControlNetType
        :param cn_img3: Input image for image prompt
        :type cn_img3: bytearray
        :param cn_stop3:
        :type cn_stop3: CnStop3
        :param cn_weight3:
        :type cn_weight3: CnWeight3
        :param cn_type3: ControlNet type for image prompt
        :type cn_type3: ControlNetType
        :param cn_img4: Input image for image prompt
        :type cn_img4: bytearray
        :param cn_stop4:
        :type cn_stop4: CnStop4
        :param cn_weight4:
        :type cn_weight4: CnWeight4
        :param cn_type4: ControlNet type for image prompt
        :type cn_type4: ControlNetType
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection:
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection:
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name:
        :type base_model_name: str
        :param refiner_model_name:
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v1_generation_image_prompt_post_serialize(
            accept=accept,
            accept2=accept2,
            cn_img1=cn_img1,
            input_image=input_image,
            input_mask=input_mask,
            inpaint_additional_prompt=inpaint_additional_prompt,
            outpaint_selections=outpaint_selections,
            outpaint_distance_left=outpaint_distance_left,
            outpaint_distance_right=outpaint_distance_right,
            outpaint_distance_top=outpaint_distance_top,
            outpaint_distance_bottom=outpaint_distance_bottom,
            cn_stop1=cn_stop1,
            cn_weight1=cn_weight1,
            cn_type1=cn_type1,
            cn_img2=cn_img2,
            cn_stop2=cn_stop2,
            cn_weight2=cn_weight2,
            cn_type2=cn_type2,
            cn_img3=cn_img3,
            cn_stop3=cn_stop3,
            cn_weight3=cn_weight3,
            cn_type3=cn_type3,
            cn_img4=cn_img4,
            cn_stop4=cn_stop4,
            cn_weight4=cn_weight4,
            cn_type4=cn_type4,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV1GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_prompt_v1_generation_image_prompt_post_serialize(
        self,
        accept,
        accept2,
        cn_img1,
        input_image,
        input_mask,
        inpaint_additional_prompt,
        outpaint_selections,
        outpaint_distance_left,
        outpaint_distance_right,
        outpaint_distance_top,
        outpaint_distance_bottom,
        cn_stop1,
        cn_weight1,
        cn_type1,
        cn_img2,
        cn_stop2,
        cn_weight2,
        cn_type2,
        cn_img3,
        cn_stop3,
        cn_weight3,
        cn_type3,
        cn_img4,
        cn_stop4,
        cn_weight4,
        cn_type4,
        prompt,
        negative_prompt,
        style_selections,
        performance_selection,
        aspect_ratios_selection,
        image_number,
        image_seed,
        sharpness,
        guidance_scale,
        base_model_name,
        refiner_model_name,
        refiner_switch,
        loras,
        advanced_params,
        require_base64,
        async_process,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'outpaint_selections': 'csv',
            'style_selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        if cn_img1 is not None:
            _files['cn_img1'] = cn_img1
        if input_image is not None:
            _files['input_image'] = input_image
        if input_mask is not None:
            _files['input_mask'] = input_mask
        if inpaint_additional_prompt is not None:
            _form_params.append(('inpaint_additional_prompt', inpaint_additional_prompt))
        if outpaint_selections is not None:
            _form_params.append(('outpaint_selections', outpaint_selections))
        if outpaint_distance_left is not None:
            _form_params.append(('outpaint_distance_left', outpaint_distance_left))
        if outpaint_distance_right is not None:
            _form_params.append(('outpaint_distance_right', outpaint_distance_right))
        if outpaint_distance_top is not None:
            _form_params.append(('outpaint_distance_top', outpaint_distance_top))
        if outpaint_distance_bottom is not None:
            _form_params.append(('outpaint_distance_bottom', outpaint_distance_bottom))
        if cn_stop1 is not None:
            _form_params.append(('cn_stop1', cn_stop1))
        if cn_weight1 is not None:
            _form_params.append(('cn_weight1', cn_weight1))
        if cn_type1 is not None:
            _form_params.append(('cn_type1', cn_type1))
        if cn_img2 is not None:
            _files['cn_img2'] = cn_img2
        if cn_stop2 is not None:
            _form_params.append(('cn_stop2', cn_stop2))
        if cn_weight2 is not None:
            _form_params.append(('cn_weight2', cn_weight2))
        if cn_type2 is not None:
            _form_params.append(('cn_type2', cn_type2))
        if cn_img3 is not None:
            _files['cn_img3'] = cn_img3
        if cn_stop3 is not None:
            _form_params.append(('cn_stop3', cn_stop3))
        if cn_weight3 is not None:
            _form_params.append(('cn_weight3', cn_weight3))
        if cn_type3 is not None:
            _form_params.append(('cn_type3', cn_type3))
        if cn_img4 is not None:
            _files['cn_img4'] = cn_img4
        if cn_stop4 is not None:
            _form_params.append(('cn_stop4', cn_stop4))
        if cn_weight4 is not None:
            _form_params.append(('cn_weight4', cn_weight4))
        if cn_type4 is not None:
            _form_params.append(('cn_type4', cn_type4))
        if prompt is not None:
            _form_params.append(('prompt', prompt))
        if negative_prompt is not None:
            _form_params.append(('negative_prompt', negative_prompt))
        if style_selections is not None:
            _form_params.append(('style_selections', style_selections))
        if performance_selection is not None:
            _form_params.append(('performance_selection', performance_selection))
        if aspect_ratios_selection is not None:
            _form_params.append(('aspect_ratios_selection', aspect_ratios_selection))
        if image_number is not None:
            _form_params.append(('image_number', image_number))
        if image_seed is not None:
            _form_params.append(('image_seed', image_seed))
        if sharpness is not None:
            _form_params.append(('sharpness', sharpness))
        if guidance_scale is not None:
            _form_params.append(('guidance_scale', guidance_scale))
        if base_model_name is not None:
            _form_params.append(('base_model_name', base_model_name))
        if refiner_model_name is not None:
            _form_params.append(('refiner_model_name', refiner_model_name))
        if refiner_switch is not None:
            _form_params.append(('refiner_switch', refiner_switch))
        if loras is not None:
            _form_params.append(('loras', loras))
        if advanced_params is not None:
            _form_params.append(('advanced_params', advanced_params))
        if require_base64 is not None:
            _form_params.append(('require_base64', require_base64))
        if async_process is not None:
            _form_params.append(('async_process', async_process))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/generation/image-prompt',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_prompt_v2_generation_image_prompt_post(
        self,
        img_prompt_request_json: ImgPromptRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgPromptV2GenerationImagePromptPost:
        """Img Prompt


        :param img_prompt_request_json: (required)
        :type img_prompt_request_json: ImgPromptRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v2_generation_image_prompt_post_serialize(
            img_prompt_request_json=img_prompt_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV2GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_prompt_v2_generation_image_prompt_post_with_http_info(
        self,
        img_prompt_request_json: ImgPromptRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgPromptV2GenerationImagePromptPost]:
        """Img Prompt


        :param img_prompt_request_json: (required)
        :type img_prompt_request_json: ImgPromptRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v2_generation_image_prompt_post_serialize(
            img_prompt_request_json=img_prompt_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV2GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_prompt_v2_generation_image_prompt_post_without_preload_content(
        self,
        img_prompt_request_json: ImgPromptRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Prompt


        :param img_prompt_request_json: (required)
        :type img_prompt_request_json: ImgPromptRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_prompt_v2_generation_image_prompt_post_serialize(
            img_prompt_request_json=img_prompt_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgPromptV2GenerationImagePromptPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_prompt_v2_generation_image_prompt_post_serialize(
        self,
        img_prompt_request_json,
        accept,
        accept2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        # process the body parameter
        if img_prompt_request_json is not None:
            _body_params = img_prompt_request_json


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/generation/image-prompt',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_upscale_or_vary_v1_generation_image_upscale_vary_post(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for upsacale or outpaint")],
        uov_method: UpscaleOrVaryMethod,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        upscale_value: Optional[UpscaleValue] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Annotated[Optional[StrictStr], Field(description="checkpoint file name")] = None,
        refiner_model_name: Annotated[Optional[StrictStr], Field(description="refiner file name")] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost:
        """Img Upscale Or Vary


        :param input_image: Init image for upsacale or outpaint (required)
        :type input_image: bytearray
        :param uov_method: (required)
        :type uov_method: UpscaleOrVaryMethod
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param upscale_value:
        :type upscale_value: UpscaleValue
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name: checkpoint file name
        :type base_model_name: str
        :param refiner_model_name: refiner file name
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v1_generation_image_upscale_vary_post_serialize(
            input_image=input_image,
            uov_method=uov_method,
            accept=accept,
            accept2=accept2,
            upscale_value=upscale_value,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_upscale_or_vary_v1_generation_image_upscale_vary_post_with_http_info(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for upsacale or outpaint")],
        uov_method: UpscaleOrVaryMethod,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        upscale_value: Optional[UpscaleValue] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Annotated[Optional[StrictStr], Field(description="checkpoint file name")] = None,
        refiner_model_name: Annotated[Optional[StrictStr], Field(description="refiner file name")] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost]:
        """Img Upscale Or Vary


        :param input_image: Init image for upsacale or outpaint (required)
        :type input_image: bytearray
        :param uov_method: (required)
        :type uov_method: UpscaleOrVaryMethod
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param upscale_value:
        :type upscale_value: UpscaleValue
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name: checkpoint file name
        :type base_model_name: str
        :param refiner_model_name: refiner file name
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v1_generation_image_upscale_vary_post_serialize(
            input_image=input_image,
            uov_method=uov_method,
            accept=accept,
            accept2=accept2,
            upscale_value=upscale_value,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_upscale_or_vary_v1_generation_image_upscale_vary_post_without_preload_content(
        self,
        input_image: Annotated[Union[StrictBytes, StrictStr], Field(description="Init image for upsacale or outpaint")],
        uov_method: UpscaleOrVaryMethod,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        upscale_value: Optional[UpscaleValue] = None,
        prompt: Optional[StrictStr] = None,
        negative_prompt: Optional[StrictStr] = None,
        style_selections: Annotated[Optional[List[StrictStr]], Field(description="Fooocus style selections, seperated by comma")] = None,
        performance_selection: Annotated[Optional[Any], Field(description="Performance Selection, one of 'Speed','Quality','Extreme Speed'")] = None,
        aspect_ratios_selection: Annotated[Optional[StrictStr], Field(description="Aspect Ratios Selection, default 1152*896")] = None,
        image_number: Annotated[Optional[Annotated[int, Field(le=32, strict=True, ge=1)]], Field(description="Image number")] = None,
        image_seed: Annotated[Optional[StrictInt], Field(description="Seed to generate image, -1 for random")] = None,
        sharpness: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=0.0)], Annotated[int, Field(le=30, strict=True, ge=0)]]] = None,
        guidance_scale: Optional[Union[Annotated[float, Field(le=30.0, strict=True, ge=1.0)], Annotated[int, Field(le=30, strict=True, ge=1)]]] = None,
        base_model_name: Annotated[Optional[StrictStr], Field(description="checkpoint file name")] = None,
        refiner_model_name: Annotated[Optional[StrictStr], Field(description="refiner file name")] = None,
        refiner_switch: Annotated[Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.1)], Annotated[int, Field(le=1, strict=True, ge=1)]]], Field(description="Refiner Switch At")] = None,
        loras: Optional[Loras] = None,
        advanced_params: Optional[AdvancedParams] = None,
        require_base64: Annotated[Optional[StrictBool], Field(description="Return base64 data of generated image")] = None,
        async_process: Annotated[Optional[StrictBool], Field(description="Set to true will run async and return job info for retrieve generataion result later")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Upscale Or Vary


        :param input_image: Init image for upsacale or outpaint (required)
        :type input_image: bytearray
        :param uov_method: (required)
        :type uov_method: UpscaleOrVaryMethod
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param upscale_value:
        :type upscale_value: UpscaleValue
        :param prompt:
        :type prompt: str
        :param negative_prompt:
        :type negative_prompt: str
        :param style_selections: Fooocus style selections, seperated by comma
        :type style_selections: List[str]
        :param performance_selection: Performance Selection, one of 'Speed','Quality','Extreme Speed'
        :type performance_selection: PerfomanceSelection
        :param aspect_ratios_selection: Aspect Ratios Selection, default 1152*896
        :type aspect_ratios_selection: str
        :param image_number: Image number
        :type image_number: int
        :param image_seed: Seed to generate image, -1 for random
        :type image_seed: int
        :param sharpness:
        :type sharpness: float
        :param guidance_scale:
        :type guidance_scale: float
        :param base_model_name: checkpoint file name
        :type base_model_name: str
        :param refiner_model_name: refiner file name
        :type refiner_model_name: str
        :param refiner_switch: Refiner Switch At
        :type refiner_switch: float
        :param loras:
        :type loras: Loras
        :param advanced_params:
        :type advanced_params: AdvancedParams
        :param require_base64: Return base64 data of generated image
        :type require_base64: bool
        :param async_process: Set to true will run async and return job info for retrieve generataion result later
        :type async_process: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v1_generation_image_upscale_vary_post_serialize(
            input_image=input_image,
            uov_method=uov_method,
            accept=accept,
            accept2=accept2,
            upscale_value=upscale_value,
            prompt=prompt,
            negative_prompt=negative_prompt,
            style_selections=style_selections,
            performance_selection=performance_selection,
            aspect_ratios_selection=aspect_ratios_selection,
            image_number=image_number,
            image_seed=image_seed,
            sharpness=sharpness,
            guidance_scale=guidance_scale,
            base_model_name=base_model_name,
            refiner_model_name=refiner_model_name,
            refiner_switch=refiner_switch,
            loras=loras,
            advanced_params=advanced_params,
            require_base64=require_base64,
            async_process=async_process,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV1GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_upscale_or_vary_v1_generation_image_upscale_vary_post_serialize(
        self,
        input_image,
        uov_method,
        accept,
        accept2,
        upscale_value,
        prompt,
        negative_prompt,
        style_selections,
        performance_selection,
        aspect_ratios_selection,
        image_number,
        image_seed,
        sharpness,
        guidance_scale,
        base_model_name,
        refiner_model_name,
        refiner_switch,
        loras,
        advanced_params,
        require_base64,
        async_process,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'style_selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        if input_image is not None:
            _files['input_image'] = input_image
        if uov_method is not None:
            _form_params.append(('uov_method', uov_method))
        if upscale_value is not None:
            _form_params.append(('upscale_value', upscale_value))
        if prompt is not None:
            _form_params.append(('prompt', prompt))
        if negative_prompt is not None:
            _form_params.append(('negative_prompt', negative_prompt))
        if style_selections is not None:
            _form_params.append(('style_selections', style_selections))
        if performance_selection is not None:
            _form_params.append(('performance_selection', performance_selection))
        if aspect_ratios_selection is not None:
            _form_params.append(('aspect_ratios_selection', aspect_ratios_selection))
        if image_number is not None:
            _form_params.append(('image_number', image_number))
        if image_seed is not None:
            _form_params.append(('image_seed', image_seed))
        if sharpness is not None:
            _form_params.append(('sharpness', sharpness))
        if guidance_scale is not None:
            _form_params.append(('guidance_scale', guidance_scale))
        if base_model_name is not None:
            _form_params.append(('base_model_name', base_model_name))
        if refiner_model_name is not None:
            _form_params.append(('refiner_model_name', refiner_model_name))
        if refiner_switch is not None:
            _form_params.append(('refiner_switch', refiner_switch))
        if loras is not None:
            _form_params.append(('loras', loras))
        if advanced_params is not None:
            _form_params.append(('advanced_params', advanced_params))
        if require_base64 is not None:
            _form_params.append(('require_base64', require_base64))
        if async_process is not None:
            _form_params.append(('async_process', async_process))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/generation/image-upscale-vary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post(
        self,
        img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost:
        """Img Upscale Or Vary V2


        :param img_upscale_or_vary_request_json: (required)
        :type img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_serialize(
            img_upscale_or_vary_request_json=img_upscale_or_vary_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_with_http_info(
        self,
        img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost]:
        """Img Upscale Or Vary V2


        :param img_upscale_or_vary_request_json: (required)
        :type img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_serialize(
            img_upscale_or_vary_request_json=img_upscale_or_vary_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_without_preload_content(
        self,
        img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Img Upscale Or Vary V2


        :param img_upscale_or_vary_request_json: (required)
        :type img_upscale_or_vary_request_json: ImgUpscaleOrVaryRequestJson
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_serialize(
            img_upscale_or_vary_request_json=img_upscale_or_vary_request_json,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseImgUpscaleOrVaryV2V2GenerationImageUpscaleVaryPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _img_upscale_or_vary_v2_v2_generation_image_upscale_vary_post_serialize(
        self,
        img_upscale_or_vary_request_json,
        accept,
        accept2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        # process the body parameter
        if img_upscale_or_vary_request_json is not None:
            _body_params = img_upscale_or_vary_request_json


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/generation/image-upscale-vary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_queue_v1_generation_job_queue_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobQueueInfo:
        """Job Queue

        Query job queue info

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_queue_v1_generation_job_queue_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobQueueInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_queue_v1_generation_job_queue_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobQueueInfo]:
        """Job Queue

        Query job queue info

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_queue_v1_generation_job_queue_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobQueueInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_queue_v1_generation_job_queue_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Job Queue

        Query job queue info

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_queue_v1_generation_job_queue_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobQueueInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_queue_v1_generation_job_queue_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/generation/job-queue',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ping_ping_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Ping

        Returns a simple 'pong' response

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ping_ping_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ping_ping_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Ping

        Returns a simple 'pong' response

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ping_ping_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ping_ping_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ping

        Returns a simple 'pong' response

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ping_ping_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ping_ping_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def query_job_v1_generation_query_job_get(
        self,
        job_id: StrictStr,
        require_step_preview: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AsyncJobResponse:
        """Query Job

        Query async generation job

        :param job_id: (required)
        :type job_id: str
        :param require_step_preview:
        :type require_step_preview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_job_v1_generation_query_job_get_serialize(
            job_id=job_id,
            require_step_preview=require_step_preview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AsyncJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def query_job_v1_generation_query_job_get_with_http_info(
        self,
        job_id: StrictStr,
        require_step_preview: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AsyncJobResponse]:
        """Query Job

        Query async generation job

        :param job_id: (required)
        :type job_id: str
        :param require_step_preview:
        :type require_step_preview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_job_v1_generation_query_job_get_serialize(
            job_id=job_id,
            require_step_preview=require_step_preview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AsyncJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def query_job_v1_generation_query_job_get_without_preload_content(
        self,
        job_id: StrictStr,
        require_step_preview: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query Job

        Query async generation job

        :param job_id: (required)
        :type job_id: str
        :param require_step_preview:
        :type require_step_preview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_job_v1_generation_query_job_get_serialize(
            job_id=job_id,
            require_step_preview=require_step_preview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AsyncJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _query_job_v1_generation_query_job_get_serialize(
        self,
        job_id,
        require_step_preview,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if job_id is not None:
            
            _query_params.append(('job_id', job_id))
            
        if require_step_preview is not None:
            
            _query_params.append(('require_step_preview', require_step_preview))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/generation/query-job',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def refresh_models_v1_engines_refresh_models_post(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AllModelNamesResponse:
        """Refresh Models

        Refresh local files and get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._refresh_models_v1_engines_refresh_models_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def refresh_models_v1_engines_refresh_models_post_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AllModelNamesResponse]:
        """Refresh Models

        Refresh local files and get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._refresh_models_v1_engines_refresh_models_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def refresh_models_v1_engines_refresh_models_post_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Refresh Models

        Refresh local files and get all filenames of base model and lora

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._refresh_models_v1_engines_refresh_models_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AllModelNamesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _refresh_models_v1_engines_refresh_models_post_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/engines/refresh-models',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stop_v1_generation_stop_post(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StopResponse:
        """Stop

        Job stoping

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stop_v1_generation_stop_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stop_v1_generation_stop_post_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StopResponse]:
        """Stop

        Job stoping

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stop_v1_generation_stop_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stop_v1_generation_stop_post_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Stop

        Job stoping

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stop_v1_generation_stop_post_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StopResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stop_v1_generation_stop_post_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/generation/stop',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def text2img_generation_v1_generation_text_to_image_post(
        self,
        text2_img_request: Text2ImgRequest,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseText2ImgGenerationV1GenerationTextToImagePost:
        """Text2Img Generation


        :param text2_img_request: (required)
        :type text2_img_request: Text2ImgRequest
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text2img_generation_v1_generation_text_to_image_post_serialize(
            text2_img_request=text2_img_request,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseText2ImgGenerationV1GenerationTextToImagePost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def text2img_generation_v1_generation_text_to_image_post_with_http_info(
        self,
        text2_img_request: Text2ImgRequest,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseText2ImgGenerationV1GenerationTextToImagePost]:
        """Text2Img Generation


        :param text2_img_request: (required)
        :type text2_img_request: Text2ImgRequest
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text2img_generation_v1_generation_text_to_image_post_serialize(
            text2_img_request=text2_img_request,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseText2ImgGenerationV1GenerationTextToImagePost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def text2img_generation_v1_generation_text_to_image_post_without_preload_content(
        self,
        text2_img_request: Text2ImgRequest,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Text2Img Generation


        :param text2_img_request: (required)
        :type text2_img_request: Text2ImgRequest
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text2img_generation_v1_generation_text_to_image_post_serialize(
            text2_img_request=text2_img_request,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseText2ImgGenerationV1GenerationTextToImagePost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _text2img_generation_v1_generation_text_to_image_post_serialize(
        self,
        text2_img_request,
        accept,
        accept2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        # process the body parameter
        if text2_img_request is not None:
            _body_params = text2_img_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/generation/text-to-image',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def text_to_img_with_ip_v2_generation_text_to_image_with_ip_post(
        self,
        text2_img_request_with_prompt: Text2ImgRequestWithPrompt,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost:
        """Text To Img With Ip


        :param text2_img_request_with_prompt: (required)
        :type text2_img_request_with_prompt: Text2ImgRequestWithPrompt
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_serialize(
            text2_img_request_with_prompt=text2_img_request_with_prompt,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_with_http_info(
        self,
        text2_img_request_with_prompt: Text2ImgRequestWithPrompt,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost]:
        """Text To Img With Ip


        :param text2_img_request_with_prompt: (required)
        :type text2_img_request_with_prompt: Text2ImgRequestWithPrompt
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_serialize(
            text2_img_request_with_prompt=text2_img_request_with_prompt,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_without_preload_content(
        self,
        text2_img_request_with_prompt: Text2ImgRequestWithPrompt,
        accept: Annotated[Optional[Any], Field(description="Parameter to overvide 'Accept' header, 'image/png' for output bytes")] = None,
        accept2: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Text To Img With Ip


        :param text2_img_request_with_prompt: (required)
        :type text2_img_request_with_prompt: Text2ImgRequestWithPrompt
        :param accept: Parameter to overvide 'Accept' header, 'image/png' for output bytes
        :type accept: Accept
        :param accept2:
        :type accept2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_serialize(
            text2_img_request_with_prompt=text2_img_request_with_prompt,
            accept=accept,
            accept2=accept2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResponseTextToImgWithIpV2GenerationTextToImageWithIpPost",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _text_to_img_with_ip_v2_generation_text_to_image_with_ip_post_serialize(
        self,
        text2_img_request_with_prompt,
        accept,
        accept2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if accept is not None:
            
            _query_params.append(('accept', accept))
            
        # process the header parameters
        if accept2 is not None:
            _header_params['accept'] = accept2
        # process the form parameters
        # process the body parameter
        if text2_img_request_with_prompt is not None:
            _body_params = text2_img_request_with_prompt


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/json async', 
                'image/png'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/generation/text-to-image-with-ip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


