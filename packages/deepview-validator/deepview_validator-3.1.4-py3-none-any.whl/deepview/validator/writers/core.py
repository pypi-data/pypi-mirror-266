# Copyright 2022 by Au-Zone Technologies.  All Rights Reserved.
#
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential.
#
# This source code is provided solely for runtime interpretation by Python.
# Modifying or copying any source code is explicitly forbidden.

from os import path

class Writer:
    """
    Contains methods that transforms the validation dictionary \
        metrics into a formatted string and provides methods to \
            print information on the console.
    
    Parameters
    ----------
        None

    Raises
    ------
        None
    """
    def __init__(self):
        self._head = None
        self._summary = None
        self._timigns = None
        self.print = True
    

    @staticmethod
    def logger(message, code=''):
        """
        Logs information to the console of either type:: \
            Error, Warning, Info, Success.

        Parameters
        ----------
            message: str
                The message to print to the console.

            code: str
                The type of the message (error, warning, info, success).

        Returns
        -------
            None

        Raises
        ------
            None
        """
        if code.upper() == 'ERROR':
            print(f'\t - [ERROR]: {message}')
            exit(1)
        elif code.upper() == 'WARNING':
            print(f'\t - [WARNING]: {message}')
        elif code.upper() == 'INFO':
            print(f'\t - [INFO]: {message}')
        elif code.upper() == 'SUCCESS':
            print(f'\t - [SUCCESS]: {message}')
        else:
            print(f'\t - {message}')

    def format_detection_summary(self, metrics, parameters):
        """
        Formats the dictionary detection summary into a string table.
        
        Parameters
        ----------
            metrics: dict
                This is the summary metrics generated by validation.
                See README.md (Method Parameters Format) for more information.

            parameters: dict
                This contains information regarding the model and
                validation parameters.
                See README.md (Method Parameters Format) for more information.

        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation showing the metrics.

            timings: str
                The formatted timings of the model.

        Raises
        ------
            None
        """
        header = \
            """            Detection Validation Summary
            """
        try:
            timings = metrics.get('timings')
        except ValueError:
            timings = None

        for key, value in metrics.items():
            try:
                if key not in [
                    'numgt',
                    'Total TP',
                    'Total FN',
                    'Total Class FP',
                        'Total Loc FP']:
                    metrics[key] = str(round(value * 100, 2))
                else:
                    metrics[key] = str(value)
            except TypeError:
                if key in ['mAP', 'mAR', 'mACC', 'LocFPErr', 'ClassFPErr']:
                    for k, v in metrics[key].items():
                        if isinstance(v, str):
                            v = float(v)                            
                        metrics[key][k] = str(round(v * 100, 2))
                else:
                    continue

        summary = \
        f"""            ____________________________________________________
            | Model: {str(metrics.get('model')).ljust(42)}|
            | Dataset: {str(metrics.get('dataset')).ljust(40)}|
            |__________________________________________________|
            | Ground Truths | True Positives | False Negatives |
            |---------------|----------------|-----------------|
            |{metrics.get('numgt').center(15)}|{metrics.get('Total TP').center(16)}|{metrics.get('Total FN').center(17)}|
            |_______________|________________|_________________|
            |    Classification FP    |    Localization FP     |
            |-------------------------|------------------------|
            |{metrics.get('Total Class FP').center(25)}|{metrics.get('Total Loc FP').center(24)}|
            |_________________________|________________________|
            |               | Overall Accuracy  |{metrics.get('OA').center(14)}|
            |               | mACC@0.5          |{metrics.get('mACC').get('0.5').center(14)}|
            | Accuracy (%)  | mACC@0.75         |{metrics.get('mACC').get('0.75').center(14)}|
            |               | mACC@0.5-0.95     |{metrics.get('mACC').get('0.5:0.95').center(14)}|
            |_______________|___________________|______________|
            |               | Overall Precision |{metrics.get('OP').center(14)}|
            |               | mAP@0.5           |{metrics.get('mAP').get('0.5').center(14)}|
            | Precision (%) | mAP@0.75          |{metrics.get('mAP').get('0.75').center(14)}|
            |               | mAP@0.5-0.95      |{metrics.get('mAP').get('0.5:0.95').center(14)}|
            |_______________|___________________|______________|
            |               | Overall Recall    |{metrics.get('OR').center(14)}|
            |               | mAR@0.5           |{metrics.get('mAR').get('0.5').center(14)}|
            | Recall (%)    | mAR@0.75          |{metrics.get('mAR').get('0.75').center(14)}|
            |               | mAR@0.5-0.95      |{metrics.get('mAR').get('0.5:0.95').center(14)}|
            |_______________|___________________|______________|
            |               | 0.5               |{metrics.get('LocFPErr').get('0.5').center(14)}|
            | Localization  | 0.75              |{metrics.get('LocFPErr').get('0.75').center(14)}|
            | FP Error (%)  | 0.5-0.95          |{metrics.get('LocFPErr').get('0.5:0.95').center(14)}|
            |_______________|___________________|______________|
            |               | 0.5               |{metrics.get('ClassFPErr').get('0.5').center(14)}|
            | Classification| 0.75              |{metrics.get('ClassFPErr').get('0.75').center(14)}|
            | FP Error (%)  | 0.5-0.95          |{metrics.get('ClassFPErr').get('0.5:0.95').center(14)}|
            |_______________|___________________|______________|
        """
        if metrics.get('model') != "Training Model":
            summary += self.__format_parameters(parameters)

        if path.splitext(str(metrics.get('model')))[1].lower() != "" or \
            metrics.get('model') == "Training Model":
            timings = self.__format_timings(timings)
        return header, summary, timings

    def format_segmentation_summary(self, metrics):
        """
        Formats the dictionary segmentation summary into a string table.
        
        Parameters
        ----------
            metrics: dict
                This is the summary metrics generated by validation.
                See README.md (Method Parameters Format) for more information.
                
        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation showing the metrics.

            timings: str
                The formatted timings of the model.

        Raises
        ------
            None
        """
        header = \
            """            Segmentation Validation Summary
            """

        try:
            timings = metrics.get('timings')
        except ValueError:
            timings = None

        for key, value in metrics.items():
            try:
                if key not in ['numgt', 'Total TP', 'Total FN', 'Total FP']:
                    metrics[key] = str(round(value * 100, 2))
                else:
                    metrics[key] = str(value)
            except TypeError:
                continue

        summary = \
        f"""            ______________________________________________________
            | Model: {metrics.get('model').ljust(44)}|
            | Engine: {metrics.get('engine').ljust(43)}|
            | Dataset: {metrics.get('dataset').ljust(42)}|
            | Ground Truths: {metrics.get('numgt').ljust(36)}|
            |____________________________________________________|
            | True Positives | False Positives | False Negatives |
            |----------------|-----------------|-----------------|
            |{metrics.get('Total TP').center(16)}|{metrics.get('Total FP').center(17)}|{metrics.get('Total FN').center(17)}|
            |________________|_________________|_________________|
            | Accuracy (%)  | Overall Accuracy  |{metrics.get('OA').center(16)}|
            |               | mACC              |{metrics.get('mACC').center(16)}|
            |_______________|___________________|________________|
            | Precision (%) | Overall Precision |{metrics.get('OP').center(16)}|
            |               | mAP               |{metrics.get('mAP').center(16)}|
            |_______________|___________________|________________|
            | Recall (%)    | Overall Recall    |{metrics.get('OR').center(16)}|
            |               | mAR               |{metrics.get('mAR').center(16)}|
            |_______________|___________________|________________|
        """

        if path.splitext(str(metrics.get('model')))[1].lower() != "" or \
            metrics.get('model') == "Training Model":
            timings = self.__format_timings(timings)
        return header, summary, timings

    def format_pose_summary(self, metrics):
        """
        Formats the dictionary pose summary into a string table.
       
        Parameters
        ----------
            metrics: dict
                This is the summary metrics generated by validation.
                See README.md (Method Parameters Format) for more information.
                
        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation showing the metrics.

            timings: str
                The formatted timings of the model.

        Raises
        ------
            None
        """
        header = \
            """            Pose Validation Summary
            """

        try:
            timings = metrics.get('timings')
        except ValueError:
            timings = None

        for key, value in metrics.items():
            try:
                metrics[key] = str(round(value, 2))
            except TypeError:
                continue

        summary = \
        f"""            ______________________________________________________
            | Model: {metrics.get('model').ljust(44)}|
            | Engine: {metrics.get('engine').ljust(43)}|
            | Dataset: {metrics.get('dataset').ljust(42)}|
            |____________________________________________________|
            |               | Roll  |{metrics.get('roll').center(28)}|
            |     Mean      |_______|____________________________|
            |   Absolute    | Pitch |{metrics.get('pitch').center(28)}|
            |     Error     |_______|____________________________|
            |               | Yaw   |{metrics.get('yaw').center(28)}|
            |_______________|_______|____________________________|
        """

        if path.splitext(str(metrics.get('model')))[1].lower() != "" or \
            metrics.get('model') == "Training Model":
            timings = self.__format_timings(timings)
        return header, summary, timings

    @staticmethod
    def __format_timings(timings):
        """
        Formats the dictionary timings summary into a string table.

        Parameters
        ----------
            timings: dict
                This contains the timing information.
                See README.md (Method Parameters Format) for more information.            

        Returns
        -------
            timings: str
                The formatted timings in a table.

        Raises
        ------
            None
        """
        if timings is not None:
            for key, time in timings.items():
                timings[key] = str(round(float(time), 2))

            timings = \
    f"""        ____________________________________________________________
        | Input Time (ms) | Inference Time (ms) | Decode Time (ms) |
        |-----------------|---------------------|------------------|
        | min: {timings.get('min_input_time').ljust(11)}| min: {timings.get('min_inference_time').ljust(15)}| min: {timings.get('min_decoding_time').ljust(12)}|
        | max: {timings.get('max_input_time').ljust(11)}| max: {timings.get('max_inference_time').ljust(15)}| max: {timings.get('max_decoding_time').ljust(12)}|
        | avg: {timings.get('avg_input').ljust(11)}| avg: {timings.get('avg_inference').ljust(15)}| avg: {timings.get('avg_decoding').ljust(12)}|
        |_________________|_____________________|__________________|
    """

        else:
            timings =\
    """        ____________________________________________________________
        | Input Time (ms) | Inference Time (ms) | Decode Time (ms) |
        |-----------------|---------------------|------------------|
        | min: None       | min: None           | min: None        |
        | max: None       | max: None           | max: None        |
        | avg: None       | avg: None           | avg: None        |
        |_________________|_____________________|__________________|
    """
        return timings

    @staticmethod
    def __format_parameters(parameters):
        """
        Formats the dictionary parameters summary into a string table.
        
        Parameters
        ----------
            parameters: dict
                This contains the parameters that was used
                for running and validating the model.
                See README.md (Method Parameters Format) for more information.

        Returns
        -------
            parameters: str
                The formatted parameters as a string table.

        Raises
        ------
            None
        """
        return \
        f"""    ____________________________________________________
            |     validation iou threshold: {str(parameters.get("validation-iou")).ljust(19)}|
            |     detection iou threshold: {str(parameters.get("detection-iou")).ljust(20)}|
            |     validation score threshold: {str(parameters.get("validation-threshold")).ljust(17)}|
            |     detection score threshold: {str(parameters.get("detection-threshold")).ljust(18)}|
            |     nms: {str(parameters.get("nms")).ljust(40)}|
            |     normalization: {str(parameters.get("normalization")).ljust(30)}|
            |     engine: {str(parameters.get('engine')).ljust(37)}|
            |     maximum detections: {str(parameters.get("maximum_detections")).ljust(25)}|
            |     warmup: {str(parameters.get("warmup")).ljust(37)}|
            |     label offset: {str(parameters.get("label offset")).ljust(31)}|
            |     metric: {str(parameters.get("metric")).ljust(37)}|
            |     box clamp dimensions: {str(parameters.get("clamp boxes")).ljust(23)}|
            |     ignore box dimensions: {str(parameters.get("ignore boxes")).ljust(22)}|
            |__________________________________________________|
        """
