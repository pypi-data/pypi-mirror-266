# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_mock.ipynb.

# %% auto 0
__all__ = ['dropnils', 'charjoin', 'genlabels', 'nproducts', 'mock_adata']

# %% ../nbs/00_mock.ipynb 6
import io, itertools, warnings
from pathlib import Path
from contextlib import redirect_stderr

# %% ../nbs/00_mock.ipynb 8
from typing import Any, NamedTuple, Optional

# %% ../nbs/00_mock.ipynb 11
try: import pandas as pd, numpy as np, scipy
except ImportError: ...

# %% ../nbs/00_mock.ipynb 12
try: from sklearn.datasets import make_blobs
except ImportError: ...

# %% ../nbs/00_mock.ipynb 14
try: import anndata as ad, scanpy as sc, scprep
except ImportError: ...

# %% ../nbs/00_mock.ipynb 15
try: import phate, magic, graphtools as gt
except ImportError: ...

# %% ../nbs/00_mock.ipynb 17
from nlit import (
    X_PCA, X_MAGIC, LEIDEN, GENE_SYMBOL, 
    X_PCA_HVG, X_PHATE, X_PHATE_HVG
)

from quac import notnilstr
from chck import isiprod
from atup import arg1st
from asto import asarr

# %% ../nbs/00_mock.ipynb 19
#| export


# %% ../nbs/00_mock.ipynb 21
def dropnils(*args) -> list:
    return list(filter(notnilstr, args))

def charjoin(sep: str = '', *args) -> str:
    return sep.join(dropnils(*tuple(map(str, args))))

def genlabels(
        n: int, 
        base: str = 'label', 
        prefix: str = '', 
        suffix: str = '', 
        sep = '_', 
        oneidx: bool = False
) -> list[str]:
    label = lambda i: charjoin(sep, prefix, base, suffix, str(i))
    return list(map(label, range(bool(oneidx), n + bool(oneidx))))

def nproducts(*args, retprod: bool = False) -> int | tuple[int, list]:
    prod = list(arg1st(*args, flag=isiprod, uselast=False, default=itertools.product(*args)))
    return len(prod) if not retprod else len(prod), prod

# %% ../nbs/00_mock.ipynb 22
def mock_adata(
    cons: tuple[str, ...] = ('wt', 'ko', ),
    days: tuple[int, ...] = (1, 5, 10, ),
    reps: tuple[int, ...] = (1, 2),    
    
    ncol: int = 10,
    nrow: int = 100,

    path: Path = Path('../data'),
    file: str = 'adata.h5ad',
    save: bool = False,
    seed: int = 3,

    cluster_key: str = LEIDEN,
    resolution: float = 0.5,
    
    hvg: bool = True, 
    pca_kws: dict = dict(), 
    g_kws: dict = dict(), 
    phate_kws: dict = dict(),
    magic_kws: dict = dict(),
    neigh_kws: dict = dict(),
):
    '''
    Mock AnnData object with `scanpy` and `phate` for testing.

    Parameters
    ----------
    cons : tuple, default: ('wt', 'ko', )
        Conditions of this "experiment".

    days : tuple, default: (1, 5, 10, )
        Days of this "experiment".

    reps : tuple, default: (1, 2)
        Replicates for each condition of this "experiment".

    nrow : int, default: 100
        Number of cells per sample.

    ncol : int, default: 10
        Number of features per cell (i.e. genes).

    path : Path, default: '../data'
        Path to save the data.

    file : str, default: 'adata.h5ad'
        The filename to save the data.

    cluster_key : str, default: 'leiden'
        Key for storing clusters.

    resolution : float, default: 0.5
        Resolution for clustering.

    save : bool, default: False
        Whether to save the data.
    
    seed : int, default: 3
        Random seed.

    hvg: bool, default: True
        Whether to use highly variable genes.

    pca_kws : dict, default: dict()
        Keyword arguments for `scprep.reduce.pca`.

    g_kws : dict, default: dict()
        Keyword arguments for `graphtools.Graph`.

    phate_kws : dict, default: dict()
        Keyword arguments for `phate.PHATE`.

    magic_kws : dict, default: dict()
        Keyword arguments for `magic.MAGIC`.

    neigh_kws : dict, default: dict()
        Keyword arguments for `sc.pp.neighbors`.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> adata
    AnnData object with n_obs x n_vars = 1200 x 10
        obs: 'barcodes', 'con', 'day', 'rep', 'cxr', 'cxt', 'sample_idx', 'cluster'
        var: 'gene_symbol'
        uns: 'dendrogram_cxr', 'leiden', 'neighbors', 'n_pcs'
        obsm: 'X_phate'
        obsp: 'connectivities', 'distances'
        layers: 'squared'

    '''
    np.random.seed(seed)
    ncons = nproducts(cons, days)
    nrecs, recs = nproducts(cons, days, reps, retprod=True)
    ncell = nrecs * nrow
    
    genes = genlabels(ncol, 'gene')
    cells = genlabels(nrow, 'cell')
    
    if not (file := Path(file)).is_file():
        resdir = Path(path)
        if save: resdir.mkdir(exist_ok=True, parents=True)
        file = (resdir / file)
    skip = Path(file).exists()
    
    params = dict(
        cons=cons, days=days, reps=reps, nrow=nrow, ncol=ncol,  ncell=nrow, ngene=ncol,
        cells=cells, genes=genes, skip=skip, path=path, file=file, seed=seed,
    )

    if skip: 
        adata = ad.read_h5ad(file)
        return adata, params
    
    X, y = make_blobs(nrow, ncol, centers=np.random.randn(nrecs, ncol), random_state=seed)

    samp_dict = dict(list(enumerate(recs)))
    cons_dict = {k: v[0] for k, v in samp_dict.items()}
    days_dict = {k: v[1] for k, v in samp_dict.items()}
    reps_dict = {k: v[2] for k, v in samp_dict.items()}
    cxrs_dict = {k: ''.join((v[0], str(v[2]))) for k, v in samp_dict.items()}
    cxts_dict = {k: ''.join((v[0], '_d', str(v[1]))) for k, v in samp_dict.items()}
    sample_idx = pd.Series(y, name='sample_idx').astype('category')

    df = pd.DataFrame(X, columns=genes, index=cells).assign(
        barcodes = cells,
        sample_idx = sample_idx.values,
        condition = sample_idx.replace(cons_dict).values,
        timepoint = sample_idx.replace(days_dict).values,
        replicate = sample_idx.replace(reps_dict).values,
        condition_replicate = sample_idx.replace(cxrs_dict).values,
        condition_timepoint = sample_idx.replace(cxts_dict).values,
    ).set_index('barcodes')

    gidx = df.columns.isin(genes)
    adata = ad.AnnData(
        df.loc[:, gidx],
        obs=df.loc[:, ~gidx],
        var=pd.Series(df.columns[gidx], index=genes, name=GENE_SYMBOL).to_frame(),
    )
    adata.var_names_make_unique()

    pca_kws.pop('use_highly_variable', None)
    pca_kws.pop('return_singular_values', None)
    ncomps = pca_kws.pop('n_components', 0)
    if ncomps == 0: ncomps = min(nrow, ncol)
    pca_kws['n_components'] = ncomps
    
    adata.obsm[X_PCA] = (pcs := scprep.reduce.pca(asarr(adata), **pca_kws))
    if hvg: 
        sc.pp.highly_variable_genes(adata)
        # pca_kws['use_highly_variable'] = True
        adata.obsm[X_PCA_HVG] = (pcs := scprep.reduce.pca(asarr(adata), **pca_kws))
        
    with redirect_stderr(io.StringIO()):
        try:
            g = gt.Graph(adata.obsm[X_PCA], **g_kws)
            pop = phate.PHATE(**phate_kws)    
            adata.obsm[X_PHATE] = (pht := pop.fit_transform(g))

            if hvg:
                g = gt.Graph(adata.obsm[X_PCA_HVG], **g_kws)
                pop = phate.PHATE(**phate_kws)
                adata.obsm[X_PHATE_HVG] = (pht := pop.fit_transform(g))
            
            graph = g
        except: ...

    try:
        mop = magic.MAGIC(**magic_kws).fit(adata.to_df(), graph=graph)
        mag = mop.transform(genes='all_genes')
        adata.layers[X_MAGIC] = scipy.sparse.csr_matrix(mag)
    except: ...            

    try:
        sc.pp.neighbors(adata, **neigh_kws)
        rep = X_PHATE_HVG if hvg else X_PHATE
        sc.tl.dendrogram(adata, groupby='condition_replicate', use_rep=rep)
        sc.tl.leiden(adata, key_added=cluster_key, resolution=resolution, random_state=seed)
    except: ...
    
    adata.layers['squared'] = adata.X ** 2
    if save: adata.write(file)
    return adata, params
