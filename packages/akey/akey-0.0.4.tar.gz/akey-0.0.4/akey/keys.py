# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_keys.ipynb.

# %% auto 0
__all__ = ['hasget', 'haskeys', 'getpubattrs', 'safeview', 'isattrkeys', 'isobjattrkeys', 'iskeyed', 'getkeyedattrs',
           'getattrkeys', 'getattrskeys', 'getkey']

# %% ../nbs/01_keys.ipynb 6
import io, warnings, itertools
from contextlib import redirect_stderr

# %% ../nbs/01_keys.ipynb 8
from typing import Callable

# %% ../nbs/01_keys.ipynb 10
try: import numpy as np, pandas as pd
except ImportError: warnings.warn("Some packages are not installed")

# %% ../nbs/01_keys.ipynb 12
from nlit import (KEYS, __GETITEM__, GET, KEYS)
from chck import (isstr, isbool, iscall, isnone, notnone, isinst, isad,  iscallattr, ispublic)

from asto import cast
from sigr import callattr, callwith
from excs import HushedErrors

# %% ../nbs/01_keys.ipynb 13
def hasget(obj) -> bool:
    try: return callable(getattr(obj, GET, None))
    except: False
    
def haskeys(obj) -> bool:
    try: return callable(getattr(obj, KEYS, None))
    except: False

# %% ../nbs/01_keys.ipynb 15
from .mock import mock_adata

# %% ../nbs/01_keys.ipynb 18
def getpubattrs(obj) -> list[str]:
    '''Retrieve the list of public attributes of an object.

    Parameters
    ----------
    obj : Any
        The object whose public attributes are to be retrieved.

    Returns
    -------
    list
        A list containing the names of the public attributes of the object.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> adata
    AnnData object with n_obs x n_vars = 1200 x 10
        obs: 'barcodes', 'con', 'day', 'rep', 'cxr', 'cxt', 'sample_idx', 'cluster'
        var: 'gene_symbol'
        uns: 'dendrogram_cxr', 'leiden', 'neighbors', 'n_pcs'
        obsm: 'X_phate'
        obsp: 'connectivities', 'distances'
        layers: 'squared'

    >>> pattrs = getpubattrs(adata)
    >>> pattrs[:8]
    ['T', 'X', 'chunk_X', 'chunked_X', 'concatenate', 'copy', 'file', 'filename']
    '''
    return list(filter(ispublic, dir(obj)))

# %% ../nbs/01_keys.ipynb 20
def safeview(obj, name: str) -> str:
    '''Adjust the attribute name for special cases, particularly for AnnData objects.

    Parameters
    ----------
    obj : Any
        The object to be checked for special cases.

    name : str
        The original attribute name.

    Returns
    -------
    str
        Adjusted attribute name considering special cases.

    Notes
    -----
    This function is specifically designed to handle a warning issued when accessing
    `isview` on an AnnData object. In such cases, it changes `isview` to `is_view`.
    '''    
    return name if not (isad(obj) and name == 'isview') else 'is_view'

# %% ../nbs/01_keys.ipynb 21
def isattrkeys(obj, attr: str) -> bool:
    '''Check if an attribute of an object has a `keys` method.

    Parameters
    ----------
    obj : Any
        The object to be checked.

    attr : str
        The attribute name to be checked for the `keys` method.

    Returns
    -------
    bool
        True if the attribute has a `keys` method, False otherwise.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> isattrkeys(adata, 'obs')
    True

    >>> class Foo: 
    ...     bar = dict()
    >>> isattrkeys(Foo, 'bar')    
    True
    '''
    attr = safeview(obj, attr)
    return haskeys(getattr(obj, attr, None))

# %% ../nbs/01_keys.ipynb 22
def isobjattrkeys(obj, attr: str) -> bool:
    '''Check if an object has a specific attribute that has a `keys` method.

    Parameters
    ----------
    obj : Any
        The object to be checked.

    attr : str
        The name of the attribute to check for the `keys` method.

    Returns
    -------
    bool
        True if the object has an attribute with a `keys` method, False otherwise.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> isobjattrkeys(adata, 'uns') # AnnData.uns_keys()
    True
    '''
    attr = safeview(obj, attr)
    return iscallattr(obj, f'{attr}_{KEYS}')

# %% ../nbs/01_keys.ipynb 23
def iskeyed(obj, attr: str) -> bool:
    '''Check if an attribute of an object is 'keyed', meaning it either directly has a `keys` 
    method or  the object has a corresponding method in the form of `<attr>_keys` e.g.
    `obj.<name>.keys(...)` or `obj.<name>_keys(...)`.

    Parameters
    ----------
    obj : Any
        The object to be checked.

    attr : str
        The attribute name to check for the 'keyed' property.

    Returns
    -------
    bool
        True if the attribute or the object has a corresponding `keys` method, False otherwise.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> pattrs = getpubattrs(adata)
    >>> pattr = pattrs[0]
    >>> pattr, isattrkeys(adata, 'obs'), isobjattrkeys(adata, pattr), iskeyed(adata, pattr)
    ('T', True, False, False)
    '''
    attr = safeview(obj, attr)
    return isattrkeys(obj, attr) or isobjattrkeys(obj, attr)

# %% ../nbs/01_keys.ipynb 25
def getkeyedattrs(obj) -> list[str]:
    '''Retrieve a list of attributes of an object that have a `keys` method.

    Parameters
    ----------
    obj : Any
        The object whose attributes are to be checked.

    Returns
    -------
    list[str]
        A list of attribute names that have a `keys` method.

    Notes
    -----
    Redirects standard error to suppress unwanted warnings during execution.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> getkeyedattrs(adata)
    ['layers', 'obs', 'obsm', 'obsp', 'uns', 'var', 'varm', 'varp']
    '''
    with redirect_stderr(io.StringIO()): 
        return list((a for a in getpubattrs(obj) if iskeyed(obj, a)))

# %% ../nbs/01_keys.ipynb 27
def getattrkeys(obj, attr: str, zipattr: bool = False) -> list[str] | list[tuple[str, str]]:
    '''Retrieve keys from an attribute of an object, optionally zipping with the attribute name.

    Parameters
    ----------
    obj : Any
        The object whose attribute keys are to be retrieved.

    attr : str
        The name of the attribute.

    zipattr : bool, optional
        If True, the result is zipped with the attribute name, by default False.

    Returns
    -------
    list[str] | list[tuple[str, str]]
        A list of keys from the attribute. If `zipattr` is True, a list of tuples (attr, key).

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> getattrkeys(adata, 'obs')
    ['barcodes', 'con', 'day', 'rep', 'cxr', 'cxt', 'sample_idx', 'cluster']

    >>> getattrkeys(adata, 'obs', zipattr = True)[:3]
    [('obs', 'barcodes'), ('obs', 'con'), ('obs', 'day')]    
    '''
    if isattrkeys(obj, attr): res = callattr(getattr(obj, attr), KEYS)
    elif isobjattrkeys(obj, attr): res = callattr(obj, f'{attr}_{KEYS}')
    else: res = list()
    return list(zip(itertools.repeat(attr), res)) if zipattr else list(res)

# %% ../nbs/01_keys.ipynb 29
def getattrskeys(obj, attrs = None) -> list[tuple[str, str]]:
    '''Retrieve keys from all or specified attributes of an object, combined with attribute names.

    Parameters
    ----------
    obj : Any
        The object whose attribute keys are to be retrieved.
    attrs : list, optional
        A list of attribute names to search for keys. If None, all public attributes are considered.

    Returns
    -------
    list[tuple[str, str]]
        A list of tuples, each containing an attribute name and a key.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> getattrskeys(adata)[:3]
    (('layers', 'squared'), ('obs', 'barcodes'), ('obs', 'con'))
    '''
    with redirect_stderr(io.StringIO()):
        attrs = attrs or getpubattrs(obj)
        return tuple(itertools.chain(*(getattrkeys(obj, a, True) for a in attrs)))


# %% ../nbs/01_keys.ipynb 31
def getkey(
    obj, key: str, locs: list = None, useobj: bool = True, dtype: type = None,
    hush: bool = True, eager: bool = False, default = None, fallback: Callable | bool = True
):
    '''Retrieve the value of a specified key from an object or its attributes.

    Parameters
    ----------
    obj : Any
        The object to search for the key.

    key : str
        The key to search for.

    locs : list, optional
        Specific locations (attributes) within the object to search for the key. 
        If None, searches all public attributes.

    useobj : bool, optional
        If True, also tries to use the object's own `get` method, by default True.

    dtype : type, optional
        The desired data type of the result. If not None, the result is cast to this type.
        
    hush : bool, optional
        If True, suppresses any errors that occur during the search, by default True.

    eager : bool, optional
        If True, raises any errors immediately, by default False.

    default : Any, optional
        A default value to return if the key is not found.

    fallback : Callable | bool, default: True
        A fallback function or a boolean flag to enable fallback to the `default` key. 
        If a callable is provided, it is invoked with the search parameters.

    Returns
    -------
    Any
        The value associated with the key, or the default value if the key is not found.

    Examples
    --------
    >>> adata, params = mock_adata()
    >>> getkey(adata, 'barcodes')                    # adata.obs['barcodes']
    >>> getkey(adata, 'gene_symbol')                 # adata.var['gene_symbol']
    >>> getkey(adata, 'gene_symbol', locs = ['var']) # adata.var['gene_symbol']
    >>> getkey(adata, 'obs')                         # adata.obs
    >>> getkey(adata, 'squared')                     # adata.layers['squared']    
    '''
    # out = lambda res: res if isnone(dtype) or isinst(res, dtype) else dtype(res)    
    out = lambda res: res if isnone(dtype) or isinst(res, dtype) else cast(res, dtype)
    # If specific locations provided, only search those; otherwise, search all public attributes
    attrs, errs = list(), HushedErrors(hush=hush, eager=eager)
    with redirect_stderr(io.StringIO()): attrs.extend(locs or getkeyedattrs(obj))
    if useobj: attrs.append(obj)
    
    # Searching through specified attributes
    for attr in attrs:
        # attr = obj.<attr> / <attr>
        attr = getattr(obj, attr, None) if isstr(attr) else attr

        # (obj.<attr> / <attr>).get(<key>)
        if hasget(attr) and notnone(res := attr.get(key)): return out(res)

        # (obj.<attr> / <attr>)[<key>]
        if hasattr(attr, __GETITEM__):
            try: 
                if notnone(res := attr[key]): return out(res)                
            except KeyError as err: errs.add(err).call()
        # (obj.<attr> / <attr>).<key>
        if notnone(res := getattr(attr, key, None)): return out(res)
    
    if not hush and not eager and errs: errs.force()
    if useobj and notnone(res := getattr(obj, key, None)): return out(res)   
    
    if isbool(fallback) and fallback == True and isstr(default): 
        return getkey(obj, default, locs, useobj, dtype, hush, eager, default=default, fallback = False)
    
    elif iscall(fallback): 
        return callwith(
            fallback, obj=obj, key=key, locs=locs, useobj=useobj, dtype=dtype, hush=hush, 
            eager=eager, default=default, fallback=fallback, __useargs=True,)
    return default
    
