# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_dims.ipynb.

# %% auto 0
__all__ = ['hasshape', 'hascolumns', 'numcols', 'keydims']

# %% ../nbs/02_dims.ipynb 6
import io, warnings, itertools
from contextlib import redirect_stderr

# %% ../nbs/02_dims.ipynb 8
from typing import Callable

# %% ../nbs/02_dims.ipynb 10
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/02_dims.ipynb 12
from nlit import (__GETITEM__, SHAPE, COLUMNS)
from chck import notnone

# %% ../nbs/02_dims.ipynb 13
def hasshape(obj) -> bool:
    try: return notnone(getattr(obj, SHAPE, None))
    except: False
    
def hascolumns(obj) -> bool:
    try: return notnone(getattr(obj, COLUMNS, None))
    except: False

# %% ../nbs/02_dims.ipynb 15
from .mock import mock_adata
from .keys import getkey

# %% ../nbs/02_dims.ipynb 18
def numcols(obj, axis: int = 1) -> int:
    '''
    Calculate the number of columns (or specified axis dimension) of an object.

    Parameters
    ----------
    obj : Any
        The object (e.g., DataFrame, array) whose columns/dimensions are to be counted.
    axis : int, optional
        The axis along which to count the dimensions. Default is 1 (typically columns).

    Returns
    -------
    int
        The number of columns/dimensions along the specified axis.

    Examples
    --------
    >>> numcols(pd.DataFrame({'A': [1, 2], 'B': [3, 4]}))
    2

    >>> numcols(np.array([[1, 2, 3], [4, 5, 6]]))
    3

    >>> numcols([1, 2, 3, 4], axis=0)
    4
    '''
    if hasshape(obj): return obj.shape[axis]
    if hascolumns(obj): return len(obj.columns)
    return len(obj)


# %% ../nbs/02_dims.ipynb 19
def keydims(obj, name: str, axis: int = 1) -> int:
    '''
    Retrieve the number of columns/dimensions for a specified key within an object.

    Parameters
    ----------
    obj : Any
        The object (e.g., AnnData, DataFrame) from which to retrieve the key's value.
    name : str
        The key whose corresponding value's dimensions are to be counted.
    axis : int, optional
        The axis along which to count the dimensions. Default is 1 (typically columns).

    Returns
    -------
    int
        The number of columns/dimensions of the specified key's value along the given axis.

    Examples
    --------
    >>> adata, _ = mock_adata()
    >>> keydims(adata, 'X_phate')
    3  # Assuming 'X_phate' is a key in 'adata.obsm' with 3 columns.    
    ''' 
    return numcols(getkey(obj, name), axis=axis)
