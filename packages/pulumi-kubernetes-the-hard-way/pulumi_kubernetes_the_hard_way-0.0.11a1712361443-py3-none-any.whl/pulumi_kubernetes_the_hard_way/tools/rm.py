# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_command

__all__ = ['RmArgs', 'Rm']

@pulumi.input_type
class RmArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 files: pulumi.Input[Union[Sequence[pulumi.Input[str]], str]],
                 dir: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[bool] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Rm resource.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: Connection details for the remote system.
        :param pulumi.Input[Union[Sequence[pulumi.Input[str]], str]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] dir: Corresponds to the --dir option.
        :param pulumi.Input[bool] force: Corresponds to the --force option.
        :param bool on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the --recursive option.
        :param pulumi.Input[bool] verbose: Corresponds to the --verbose option.
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "files", files)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        Connection details for the remote system.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Union[Sequence[pulumi.Input[str]], str]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Union[Sequence[pulumi.Input[str]], str]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the --dir option.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the --force option.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[bool]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[bool]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the --recursive option.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the --verbose option.
        """
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)


class Rm(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 dir: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Union[Sequence[pulumi.Input[str]], str]]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[bool] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Abstraction over the `rm` utility on a remote system.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: Connection details for the remote system.
        :param pulumi.Input[bool] dir: Corresponds to the --dir option.
        :param pulumi.Input[Union[Sequence[pulumi.Input[str]], str]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] force: Corresponds to the --force option.
        :param bool on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the --recursive option.
        :param pulumi.Input[bool] verbose: Corresponds to the --verbose option.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Abstraction over the `rm` utility on a remote system.

        :param str resource_name: The name of the resource.
        :param RmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 dir: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Union[Sequence[pulumi.Input[str]], str]]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[bool] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RmArgs.__new__(RmArgs)

            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["dir"] = dir
            if files is None and not opts.urn:
                raise TypeError("Missing required property 'files'")
            __props__.__dict__["files"] = files
            __props__.__dict__["force"] = force
            __props__.__dict__["on_delete"] = on_delete
            __props__.__dict__["recursive"] = recursive
            __props__.__dict__["verbose"] = verbose
            __props__.__dict__["command"] = None
        super(Rm, __self__).__init__(
            'kubernetes-the-hard-way:tools:Rm',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output[Optional['pulumi_command.remote.Command']]:
        """
        Represents the command run on the remote system.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def dir(self) -> pulumi.Output[bool]:
        """
        Corresponds to the --dir option.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def files(self) -> pulumi.Output[Sequence[str]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[bool]:
        """
        Corresponds to the --force option.
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> pulumi.Output[bool]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @property
    @pulumi.getter
    def recursive(self) -> pulumi.Output[bool]:
        """
        Corresponds to the --recursive option.
        """
        return pulumi.get(self, "recursive")

    @property
    @pulumi.getter
    def verbose(self) -> pulumi.Output[bool]:
        """
        Corresponds to the --verbose option.
        """
        return pulumi.get(self, "verbose")

