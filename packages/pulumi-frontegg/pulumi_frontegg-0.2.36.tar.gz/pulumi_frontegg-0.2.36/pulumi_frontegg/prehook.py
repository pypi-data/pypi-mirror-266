# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PrehookArgs', 'Prehook']

@pulumi.input_type
class PrehookArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 events: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fail_method: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 url: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Prehook resource.
        :param pulumi.Input[str] description: A human-readable description of the prehook.
        :param pulumi.Input[bool] enabled: Whether the prehook is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The name of the event to subscribe to.
        :param pulumi.Input[str] fail_method: The action to take when the prehook fails.
        :param pulumi.Input[str] secret: A secret to validate the event with.
        :param pulumi.Input[str] url: The URL to send events to.
        :param pulumi.Input[str] name: A human-readable name for the prehook.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "fail_method", fail_method)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "url", url)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        A human-readable description of the prehook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the prehook is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The name of the event to subscribe to.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="failMethod")
    def fail_method(self) -> pulumi.Input[str]:
        """
        The action to take when the prehook fails.
        """
        return pulumi.get(self, "fail_method")

    @fail_method.setter
    def fail_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "fail_method", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        A secret to validate the event with.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to send events to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable name for the prehook.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PrehookState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_method: Optional[pulumi.Input[str]] = None,
                 invocations: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Prehook resources.
        :param pulumi.Input[str] created_at: The date and time the prehook was created.
        :param pulumi.Input[str] description: A human-readable description of the prehook.
        :param pulumi.Input[bool] enabled: Whether the prehook is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The name of the event to subscribe to.
        :param pulumi.Input[str] fail_method: The action to take when the prehook fails.
        :param pulumi.Input[int] invocations: The number of times the prehook has been invoked.
        :param pulumi.Input[str] name: A human-readable name for the prehook.
        :param pulumi.Input[str] secret: A secret to validate the event with.
        :param pulumi.Input[str] updated_at: The timestamp at which the webhook was last updated.
        :param pulumi.Input[str] url: The URL to send events to.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if fail_method is not None:
            pulumi.set(__self__, "fail_method", fail_method)
        if invocations is not None:
            pulumi.set(__self__, "invocations", invocations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the prehook was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the prehook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the prehook is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name of the event to subscribe to.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="failMethod")
    def fail_method(self) -> Optional[pulumi.Input[str]]:
        """
        The action to take when the prehook fails.
        """
        return pulumi.get(self, "fail_method")

    @fail_method.setter
    def fail_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_method", value)

    @property
    @pulumi.getter
    def invocations(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the prehook has been invoked.
        """
        return pulumi.get(self, "invocations")

    @invocations.setter
    def invocations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invocations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable name for the prehook.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        A secret to validate the event with.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp at which the webhook was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to send events to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Prehook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Prehook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-readable description of the prehook.
        :param pulumi.Input[bool] enabled: Whether the prehook is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The name of the event to subscribe to.
        :param pulumi.Input[str] fail_method: The action to take when the prehook fails.
        :param pulumi.Input[str] name: A human-readable name for the prehook.
        :param pulumi.Input[str] secret: A secret to validate the event with.
        :param pulumi.Input[str] url: The URL to send events to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrehookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Prehook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PrehookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrehookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrehookArgs.__new__(PrehookArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if events is None and not opts.urn:
                raise TypeError("Missing required property 'events'")
            __props__.__dict__["events"] = events
            if fail_method is None and not opts.urn:
                raise TypeError("Missing required property 'fail_method'")
            __props__.__dict__["fail_method"] = fail_method
            __props__.__dict__["name"] = name
            if secret is None and not opts.urn:
                raise TypeError("Missing required property 'secret'")
            __props__.__dict__["secret"] = secret
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["created_at"] = None
            __props__.__dict__["invocations"] = None
            __props__.__dict__["updated_at"] = None
        super(Prehook, __self__).__init__(
            'frontegg:index/prehook:Prehook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            fail_method: Optional[pulumi.Input[str]] = None,
            invocations: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Prehook':
        """
        Get an existing Prehook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The date and time the prehook was created.
        :param pulumi.Input[str] description: A human-readable description of the prehook.
        :param pulumi.Input[bool] enabled: Whether the prehook is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The name of the event to subscribe to.
        :param pulumi.Input[str] fail_method: The action to take when the prehook fails.
        :param pulumi.Input[int] invocations: The number of times the prehook has been invoked.
        :param pulumi.Input[str] name: A human-readable name for the prehook.
        :param pulumi.Input[str] secret: A secret to validate the event with.
        :param pulumi.Input[str] updated_at: The timestamp at which the webhook was last updated.
        :param pulumi.Input[str] url: The URL to send events to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrehookState.__new__(_PrehookState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["events"] = events
        __props__.__dict__["fail_method"] = fail_method
        __props__.__dict__["invocations"] = invocations
        __props__.__dict__["name"] = name
        __props__.__dict__["secret"] = secret
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["url"] = url
        return Prehook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The date and time the prehook was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A human-readable description of the prehook.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the prehook is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Sequence[str]]:
        """
        The name of the event to subscribe to.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="failMethod")
    def fail_method(self) -> pulumi.Output[str]:
        """
        The action to take when the prehook fails.
        """
        return pulumi.get(self, "fail_method")

    @property
    @pulumi.getter
    def invocations(self) -> pulumi.Output[int]:
        """
        The number of times the prehook has been invoked.
        """
        return pulumi.get(self, "invocations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-readable name for the prehook.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[str]:
        """
        A secret to validate the event with.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The timestamp at which the webhook was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL to send events to.
        """
        return pulumi.get(self, "url")

