[tool.poetry]
name = "argparse-shell"
version = "0.1.1"
description = "Create interactive shell programs from arbitrary objects using the argparse and cmd modules"
authors = ["Jonas Ehrlich <jonas.ehrlich@umsemi.com>"]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
]

[tool.poetry.dependencies]
python = "^3.10"
docstring-parser = "^0.16"
typing-extensions = { version = "^4.9.0", python = "<3.11" }


[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-subtests = "^0.12.1"
pytest-cov = "^5.0.0"
ruff = "^0.3.5"
isort = "^5.13.2"
black = "^24.3.0"
pytest-sugar = "^1.0.0"
mypy = "^1.9.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120


[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    "^\\s+\\.\\.\\.",
    # Don't complain about type check guarded imports
    "if ((ty)(ping)?.)?TYPE_CHECKING:",
    # Don't complain about typing imports
    "from typing(_extensions)? import .*",
    "import typing(_extensions)?.*",
]
fail_under = 85


[tool.coverage.run]
branch = true
source = ["argparse_shell"]


[tool.coverage.xml]
output = "coverage.xml"


[tool.isort]
profile = "black"
line_length = 120
src_paths = ["argparse_shell", "test"]


[tool.mypy]
packages = "argparse_shell"
plugins = []
strict = true


[tool.ruff]
line-length = 120
src = ["argparse_shell", "test"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle error rules
    "F",   # pycodestyle warning rules
    "B",   # flake8-bugbear rules
    "S",   # flake8-bandit rules
    "PTH", # flake8-use-pathlib
    "PLC", # pylint convention rules
    "PLR", # pylint refactor rules
    "PLE", # pylint error rules
    "PLW", # pylint warning rules
    "C90", # mccabe complexity rules
]

[tool.ruff.lint.per-file-ignores]
# Disable assert and magic-value-comparison rules for tests
"test_*.py" = ["S101", "PLR2004"]
# Disable unused-import rule for __init__.py files
"__init__*.py" = ["F401", "F403"]


[tool.ruff.lint.pylint]
max-args = 8
