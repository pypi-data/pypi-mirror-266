# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetBlockDetailsByBlockHeightRIBSL(BaseModel):
    """
    Litecoin
    """ # noqa: E501
    bits: StrictStr = Field(description="Represents a specific sub-unit of Litecoin. Bits have two-decimal precision.")
    chainwork: StrictStr = Field(description="Represents a hexadecimal number of all the hashes necessary to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.")
    difficulty: Optional[StrictStr] = Field(default=None, description="Numeric representation of the block difficulty")
    merkle_root: StrictStr = Field(description="Defines the single and final (root) node of a Merkle tree. It is the combined hash of all transactions' hashes that are part of a blockchain block.", alias="merkleRoot")
    nonce: StrictStr = Field(description="Represents a random value that can be adjusted to satisfy the Proof of Work.")
    size: StrictInt = Field(description="Represents the total size of the block in Bytes.")
    stripped_size: StrictInt = Field(description="Defines the numeric representation of the block size excluding the witness data.", alias="strippedSize")
    version: StrictInt = Field(description="Represents the version of the specific block on the blockchain.")
    version_hex: StrictStr = Field(description="Is the hexadecimal string representation of the block's version.", alias="versionHex")
    weight: StrictInt = Field(description="Represents a measurement to compare the size of different transactions to each other in proportion to the block size limit.")
    __properties: ClassVar[List[str]] = ["bits", "chainwork", "difficulty", "merkleRoot", "nonce", "size", "strippedSize", "version", "versionHex", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHeightRIBSL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHeightRIBSL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bits": obj.get("bits"),
            "chainwork": obj.get("chainwork"),
            "difficulty": obj.get("difficulty"),
            "merkleRoot": obj.get("merkleRoot"),
            "nonce": obj.get("nonce"),
            "size": obj.get("size"),
            "strippedSize": obj.get("strippedSize"),
            "version": obj.get("version"),
            "versionHex": obj.get("versionHex"),
            "weight": obj.get("weight")
        })
        return _obj


