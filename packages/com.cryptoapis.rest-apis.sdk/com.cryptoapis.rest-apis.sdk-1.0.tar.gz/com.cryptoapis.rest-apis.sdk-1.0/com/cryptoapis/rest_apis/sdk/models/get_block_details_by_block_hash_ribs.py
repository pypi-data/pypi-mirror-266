# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsb import GetBlockDetailsByBlockHashRIBSB
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsbc import GetBlockDetailsByBlockHashRIBSBC
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsbsc import GetBlockDetailsByBlockHashRIBSBSC
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsd import GetBlockDetailsByBlockHashRIBSD
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsd2 import GetBlockDetailsByBlockHashRIBSD2
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribse import GetBlockDetailsByBlockHashRIBSE
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsec import GetBlockDetailsByBlockHashRIBSEC
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsl import GetBlockDetailsByBlockHashRIBSL
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_ribsz import GetBlockDetailsByBlockHashRIBSZ
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

GETBLOCKDETAILSBYBLOCKHASHRIBS_ONE_OF_SCHEMAS = ["GetBlockDetailsByBlockHashRIBSB", "GetBlockDetailsByBlockHashRIBSBC", "GetBlockDetailsByBlockHashRIBSBSC", "GetBlockDetailsByBlockHashRIBSD", "GetBlockDetailsByBlockHashRIBSD2", "GetBlockDetailsByBlockHashRIBSE", "GetBlockDetailsByBlockHashRIBSEC", "GetBlockDetailsByBlockHashRIBSL", "GetBlockDetailsByBlockHashRIBSZ"]

class GetBlockDetailsByBlockHashRIBS(BaseModel):
    """
    GetBlockDetailsByBlockHashRIBS
    """
    # data type: GetBlockDetailsByBlockHashRIBSB
    oneof_schema_1_validator: Optional[GetBlockDetailsByBlockHashRIBSB] = None
    # data type: GetBlockDetailsByBlockHashRIBSE
    oneof_schema_2_validator: Optional[GetBlockDetailsByBlockHashRIBSE] = None
    # data type: GetBlockDetailsByBlockHashRIBSEC
    oneof_schema_3_validator: Optional[GetBlockDetailsByBlockHashRIBSEC] = None
    # data type: GetBlockDetailsByBlockHashRIBSBC
    oneof_schema_4_validator: Optional[GetBlockDetailsByBlockHashRIBSBC] = None
    # data type: GetBlockDetailsByBlockHashRIBSL
    oneof_schema_5_validator: Optional[GetBlockDetailsByBlockHashRIBSL] = None
    # data type: GetBlockDetailsByBlockHashRIBSD
    oneof_schema_6_validator: Optional[GetBlockDetailsByBlockHashRIBSD] = None
    # data type: GetBlockDetailsByBlockHashRIBSD2
    oneof_schema_7_validator: Optional[GetBlockDetailsByBlockHashRIBSD2] = None
    # data type: GetBlockDetailsByBlockHashRIBSBSC
    oneof_schema_8_validator: Optional[GetBlockDetailsByBlockHashRIBSBSC] = None
    # data type: GetBlockDetailsByBlockHashRIBSZ
    oneof_schema_9_validator: Optional[GetBlockDetailsByBlockHashRIBSZ] = None
    actual_instance: Optional[Union[GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ]] = None
    one_of_schemas: List[str] = Field(default=Literal["GetBlockDetailsByBlockHashRIBSB", "GetBlockDetailsByBlockHashRIBSBC", "GetBlockDetailsByBlockHashRIBSBSC", "GetBlockDetailsByBlockHashRIBSD", "GetBlockDetailsByBlockHashRIBSD2", "GetBlockDetailsByBlockHashRIBSE", "GetBlockDetailsByBlockHashRIBSEC", "GetBlockDetailsByBlockHashRIBSL", "GetBlockDetailsByBlockHashRIBSZ"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetBlockDetailsByBlockHashRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetBlockDetailsByBlockHashRIBSB
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSB`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSE
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSE`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSEC
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSEC`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSBC
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSBC`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSL
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSL`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSD
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSD`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSD2
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSD2`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSBSC
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSBSC`")
        else:
            match += 1
        # validate data type: GetBlockDetailsByBlockHashRIBSZ
        if not isinstance(v, GetBlockDetailsByBlockHashRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetBlockDetailsByBlockHashRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetBlockDetailsByBlockHashRIBS with oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetBlockDetailsByBlockHashRIBS with oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetBlockDetailsByBlockHashRIBSB
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSE
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSEC
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSBC
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSL
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSD
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSD2
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSBSC
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetBlockDetailsByBlockHashRIBSZ
        try:
            instance.actual_instance = GetBlockDetailsByBlockHashRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetBlockDetailsByBlockHashRIBS with oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetBlockDetailsByBlockHashRIBS with oneOf schemas: GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetBlockDetailsByBlockHashRIBSB, GetBlockDetailsByBlockHashRIBSBC, GetBlockDetailsByBlockHashRIBSBSC, GetBlockDetailsByBlockHashRIBSD, GetBlockDetailsByBlockHashRIBSD2, GetBlockDetailsByBlockHashRIBSE, GetBlockDetailsByBlockHashRIBSEC, GetBlockDetailsByBlockHashRIBSL, GetBlockDetailsByBlockHashRIBSZ]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


