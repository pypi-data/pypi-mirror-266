# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsb import ListUnconfirmedTransactionsByAddressRIBSB
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsbc import ListUnconfirmedTransactionsByAddressRIBSBC
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsbsc import ListUnconfirmedTransactionsByAddressRIBSBSC
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsd import ListUnconfirmedTransactionsByAddressRIBSD
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsd2 import ListUnconfirmedTransactionsByAddressRIBSD2
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribse import ListUnconfirmedTransactionsByAddressRIBSE
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsec import ListUnconfirmedTransactionsByAddressRIBSEC
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsl import ListUnconfirmedTransactionsByAddressRIBSL
from com.cryptoapis.rest_apis.sdk.models.list_unconfirmed_transactions_by_address_ribsz import ListUnconfirmedTransactionsByAddressRIBSZ
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

LISTUNCONFIRMEDTRANSACTIONSBYADDRESSRIBS_ONE_OF_SCHEMAS = ["ListUnconfirmedTransactionsByAddressRIBSB", "ListUnconfirmedTransactionsByAddressRIBSBC", "ListUnconfirmedTransactionsByAddressRIBSBSC", "ListUnconfirmedTransactionsByAddressRIBSD", "ListUnconfirmedTransactionsByAddressRIBSD2", "ListUnconfirmedTransactionsByAddressRIBSE", "ListUnconfirmedTransactionsByAddressRIBSEC", "ListUnconfirmedTransactionsByAddressRIBSL", "ListUnconfirmedTransactionsByAddressRIBSZ"]

class ListUnconfirmedTransactionsByAddressRIBS(BaseModel):
    """
    ListUnconfirmedTransactionsByAddressRIBS
    """
    # data type: ListUnconfirmedTransactionsByAddressRIBSB
    oneof_schema_1_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSB] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSBC
    oneof_schema_2_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSBC] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSL
    oneof_schema_3_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSL] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSD
    oneof_schema_4_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSD] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSD2
    oneof_schema_5_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSD2] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSE
    oneof_schema_6_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSE] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSEC
    oneof_schema_7_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSEC] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSZ
    oneof_schema_8_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSZ] = None
    # data type: ListUnconfirmedTransactionsByAddressRIBSBSC
    oneof_schema_9_validator: Optional[ListUnconfirmedTransactionsByAddressRIBSBSC] = None
    actual_instance: Optional[Union[ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ]] = None
    one_of_schemas: List[str] = Field(default=Literal["ListUnconfirmedTransactionsByAddressRIBSB", "ListUnconfirmedTransactionsByAddressRIBSBC", "ListUnconfirmedTransactionsByAddressRIBSBSC", "ListUnconfirmedTransactionsByAddressRIBSD", "ListUnconfirmedTransactionsByAddressRIBSD2", "ListUnconfirmedTransactionsByAddressRIBSE", "ListUnconfirmedTransactionsByAddressRIBSEC", "ListUnconfirmedTransactionsByAddressRIBSL", "ListUnconfirmedTransactionsByAddressRIBSZ"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ListUnconfirmedTransactionsByAddressRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSB
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSB`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSBC
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSBC`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSL
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSL`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSD
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSD`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSD2
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSD2`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSE
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSE`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSEC
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSEC`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSZ
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSZ`")
        else:
            match += 1
        # validate data type: ListUnconfirmedTransactionsByAddressRIBSBSC
        if not isinstance(v, ListUnconfirmedTransactionsByAddressRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListUnconfirmedTransactionsByAddressRIBSBSC`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ListUnconfirmedTransactionsByAddressRIBS with oneOf schemas: ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ListUnconfirmedTransactionsByAddressRIBS with oneOf schemas: ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSB
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSBC
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSL
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSD
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSD2
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSE
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSEC
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSZ
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListUnconfirmedTransactionsByAddressRIBSBSC
        try:
            instance.actual_instance = ListUnconfirmedTransactionsByAddressRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ListUnconfirmedTransactionsByAddressRIBS with oneOf schemas: ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListUnconfirmedTransactionsByAddressRIBS with oneOf schemas: ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


