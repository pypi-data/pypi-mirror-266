# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.list_deposit_addresses_ri_confirmed_balance import ListDepositAddressesRIConfirmedBalance
from com.cryptoapis.rest_apis.sdk.models.list_deposit_addresses_ri_fungible_tokens_inner import ListDepositAddressesRIFungibleTokensInner
from com.cryptoapis.rest_apis.sdk.models.list_deposit_addresses_ri_non_fungible_tokens_inner import ListDepositAddressesRINonFungibleTokensInner
from typing import Optional, Set
from typing_extensions import Self

class ListDepositAddressesRI(BaseModel):
    """
    ListDepositAddressesRI
    """ # noqa: E501
    address: StrictStr = Field(description="Specifies the specific address's unique string value.")
    confirmed_balance: ListDepositAddressesRIConfirmedBalance = Field(alias="confirmedBalance")
    created_timestamp: StrictInt = Field(description="Defines the specific UNIX time when the deposit address was created.", alias="createdTimestamp")
    fungible_tokens: List[ListDepositAddressesRIFungibleTokensInner] = Field(description="Represents fungible tokens'es detailed information", alias="fungibleTokens")
    index: StrictStr = Field(description="Represents the index of the address in the wallet.")
    label: StrictStr = Field(description="Represents a custom tag that customers can set up for their Wallets and addresses. E.g. custom label named \"Special addresses\".")
    non_fungible_tokens: List[ListDepositAddressesRINonFungibleTokensInner] = Field(description="Represents non-fungible tokens'es detailed information.", alias="nonFungibleTokens")
    __properties: ClassVar[List[str]] = ["address", "confirmedBalance", "createdTimestamp", "fungibleTokens", "index", "label", "nonFungibleTokens"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListDepositAddressesRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confirmed_balance
        if self.confirmed_balance:
            _dict['confirmedBalance'] = self.confirmed_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fungible_tokens (list)
        _items = []
        if self.fungible_tokens:
            for _item in self.fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fungibleTokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_fungible_tokens (list)
        _items = []
        if self.non_fungible_tokens:
            for _item in self.non_fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nonFungibleTokens'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListDepositAddressesRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "confirmedBalance": ListDepositAddressesRIConfirmedBalance.from_dict(obj["confirmedBalance"]) if obj.get("confirmedBalance") is not None else None,
            "createdTimestamp": obj.get("createdTimestamp"),
            "fungibleTokens": [ListDepositAddressesRIFungibleTokensInner.from_dict(_item) for _item in obj["fungibleTokens"]] if obj.get("fungibleTokens") is not None else None,
            "index": obj.get("index"),
            "label": obj.get("label"),
            "nonFungibleTokens": [ListDepositAddressesRINonFungibleTokensInner.from_dict(_item) for _item in obj["nonFungibleTokens"]] if obj.get("nonFungibleTokens") is not None else None
        })
        return _obj


