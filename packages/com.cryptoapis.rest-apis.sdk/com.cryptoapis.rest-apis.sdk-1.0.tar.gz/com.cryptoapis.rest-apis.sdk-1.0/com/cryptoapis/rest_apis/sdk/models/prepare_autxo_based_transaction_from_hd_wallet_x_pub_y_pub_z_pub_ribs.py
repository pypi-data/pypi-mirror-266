# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsb import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsbc import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsd import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsd2 import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsl import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_ribsz import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

PREPAREAUTXOBASEDTRANSACTIONFROMHDWALLETXPUBYPUBZPUBRIBS_ONE_OF_SCHEMAS = ["PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ"]

class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS(BaseModel):
    """
    PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS
    """
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB
    oneof_schema_1_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB] = None
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC
    oneof_schema_2_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC] = None
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL
    oneof_schema_3_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL] = None
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD
    oneof_schema_4_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD] = None
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2
    oneof_schema_5_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2] = None
    # data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ
    oneof_schema_6_validator: Optional[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ] = None
    actual_instance: Optional[Union[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ]] = None
    one_of_schemas: List[str] = Field(default=Literal["PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL", "PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB`")
        else:
            match += 1
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC`")
        else:
            match += 1
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL`")
        else:
            match += 1
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD`")
        else:
            match += 1
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2`")
        else:
            match += 1
        # validate data type: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ
        if not isinstance(v, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ
        try:
            instance.actual_instance = PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSB, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSBC, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSD2, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSL, PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRIBSZ]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


