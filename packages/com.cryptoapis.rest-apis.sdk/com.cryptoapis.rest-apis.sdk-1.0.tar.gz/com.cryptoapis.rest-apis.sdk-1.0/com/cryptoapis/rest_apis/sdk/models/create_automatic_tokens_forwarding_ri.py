# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.create_automatic_tokens_forwarding_rits import CreateAutomaticTokensForwardingRITS
from typing import Optional, Set
from typing_extensions import Self

class CreateAutomaticTokensForwardingRI(BaseModel):
    """
    CreateAutomaticTokensForwardingRI
    """ # noqa: E501
    callback_url: StrictStr = Field(description="Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.", alias="callbackUrl")
    confirmations_count: StrictInt = Field(description="Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.", alias="confirmationsCount")
    created_timestamp: StrictInt = Field(description="Defines the specific time/date when the automatic forwarding was created in Unix Timestamp.", alias="createdTimestamp")
    fee_address: StrictStr = Field(description="Represents the specific fee address, which is always automatically generated. Users must fund it.", alias="feeAddress")
    fee_priority: StrictStr = Field(description="Represents the fee priority of the automation, whether it is \"SLOW\", \"STANDARD\" or \"FAST\".", alias="feePriority")
    from_address: StrictStr = Field(description="Represents the hash of the address that forwards the tokens.", alias="fromAddress")
    minimum_transfer_amount: StrictStr = Field(description="Represents the minimum transfer amount of the tokens in the `fromAddress` that can be allowed for an automatic forwarding.", alias="minimumTransferAmount")
    reference_id: StrictStr = Field(description="Represents a unique ID used to reference the specific callback subscription.", alias="referenceId")
    to_address: StrictStr = Field(description="Represents the hash of the address the tokens are forwarded to.", alias="toAddress")
    token_data: CreateAutomaticTokensForwardingRITS = Field(alias="tokenData")
    __properties: ClassVar[List[str]] = ["callbackUrl", "confirmationsCount", "createdTimestamp", "feeAddress", "feePriority", "fromAddress", "minimumTransferAmount", "referenceId", "toAddress", "tokenData"]

    @field_validator('fee_priority')
    def fee_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['slow', 'standard', 'fast']):
            raise ValueError("must be one of enum values ('slow', 'standard', 'fast')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAutomaticTokensForwardingRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of token_data
        if self.token_data:
            _dict['tokenData'] = self.token_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAutomaticTokensForwardingRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackUrl": obj.get("callbackUrl"),
            "confirmationsCount": obj.get("confirmationsCount"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "feeAddress": obj.get("feeAddress"),
            "feePriority": obj.get("feePriority"),
            "fromAddress": obj.get("fromAddress"),
            "minimumTransferAmount": obj.get("minimumTransferAmount"),
            "referenceId": obj.get("referenceId"),
            "toAddress": obj.get("toAddress"),
            "tokenData": CreateAutomaticTokensForwardingRITS.from_dict(obj["tokenData"]) if obj.get("tokenData") is not None else None
        })
        return _obj


