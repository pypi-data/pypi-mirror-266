# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_data_item_mined_in_block import AddressTokensTransactionConfirmedDataItemMinedInBlock
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_token import AddressTokensTransactionConfirmedEachConfirmationToken
from typing import Optional, Set
from typing_extensions import Self

class AddressTokensTransactionConfirmedEachConfirmationDataItem(BaseModel):
    """
    Defines an `item` as one result.
    """ # noqa: E501
    blockchain: StrictStr = Field(description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")
    network: StrictStr = Field(description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\",  are test networks.")
    address: StrictStr = Field(description="Defines the specific address to which the transaction has been sent.")
    mined_in_block: AddressTokensTransactionConfirmedDataItemMinedInBlock = Field(alias="minedInBlock")
    transaction_id: StrictStr = Field(description="Defines the unique ID of the specific transaction, i.e. its identification number.", alias="transactionId")
    current_confirmations: StrictInt = Field(description="Defines the number of currently received confirmations for the transaction.", alias="currentConfirmations")
    target_confirmations: StrictInt = Field(description="Defines the number of confirmation transactions requested as callbacks, i.e. the system can notify till the n-th confirmation.", alias="targetConfirmations")
    token_type: StrictStr = Field(description="Defines the type of token sent with the transaction, e.g. ERC 20.", alias="tokenType")
    token: AddressTokensTransactionConfirmedEachConfirmationToken
    direction: StrictStr = Field(description="Defines whether the transaction is \"incoming\" or \"outgoing\".")
    __properties: ClassVar[List[str]] = ["blockchain", "network", "address", "minedInBlock", "transactionId", "currentConfirmations", "targetConfirmations", "tokenType", "token", "direction"]

    @field_validator('token_type')
    def token_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ERC-20', 'ERC-721', 'OMNI', 'BEP-20', 'TRC-20', 'TRC-721']):
            raise ValueError("must be one of enum values ('ERC-20', 'ERC-721', 'OMNI', 'BEP-20', 'TRC-20', 'TRC-721')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['incoming', 'outgoing']):
            raise ValueError("must be one of enum values ('incoming', 'outgoing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressTokensTransactionConfirmedEachConfirmationDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mined_in_block
        if self.mined_in_block:
            _dict['minedInBlock'] = self.mined_in_block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressTokensTransactionConfirmedEachConfirmationDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockchain": obj.get("blockchain"),
            "network": obj.get("network"),
            "address": obj.get("address"),
            "minedInBlock": AddressTokensTransactionConfirmedDataItemMinedInBlock.from_dict(obj["minedInBlock"]) if obj.get("minedInBlock") is not None else None,
            "transactionId": obj.get("transactionId"),
            "currentConfirmations": obj.get("currentConfirmations"),
            "targetConfirmations": obj.get("targetConfirmations"),
            "tokenType": obj.get("tokenType"),
            "token": AddressTokensTransactionConfirmedEachConfirmationToken.from_dict(obj["token"]) if obj.get("token") is not None else None,
            "direction": obj.get("direction")
        })
        return _obj


