# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_fee import ListWalletTransactionsRIFee
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_fungible_tokens_inner import ListWalletTransactionsRIFungibleTokensInner
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_internal_transactions_inner import ListWalletTransactionsRIInternalTransactionsInner
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_non_fungible_tokens_inner import ListWalletTransactionsRINonFungibleTokensInner
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_recipients_inner import ListWalletTransactionsRIRecipientsInner
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_senders_inner import ListWalletTransactionsRISendersInner
from com.cryptoapis.rest_apis.sdk.models.list_wallet_transactions_ri_value import ListWalletTransactionsRIValue
from typing import Optional, Set
from typing_extensions import Self

class ListWalletTransactionsRI(BaseModel):
    """
    ListWalletTransactionsRI
    """ # noqa: E501
    direction: StrictStr = Field(description="Defines the direction of the transaction, e.g. incoming.")
    fee: ListWalletTransactionsRIFee
    fungible_tokens: Optional[List[ListWalletTransactionsRIFungibleTokensInner]] = Field(default=None, description="Represents fungible tokens'es detailed information", alias="fungibleTokens")
    internal_transactions: Optional[List[ListWalletTransactionsRIInternalTransactionsInner]] = Field(default=None, alias="internalTransactions")
    non_fungible_tokens: Optional[List[ListWalletTransactionsRINonFungibleTokensInner]] = Field(default=None, description="Represents non-fungible tokens'es detailed information.", alias="nonFungibleTokens")
    recipients: List[ListWalletTransactionsRIRecipientsInner] = Field(description="Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")
    senders: List[ListWalletTransactionsRISendersInner] = Field(description="Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")
    status: StrictStr = Field(description="Defines the status of the transaction, if it is confirmed or unconfirmed.")
    timestamp: StrictInt = Field(description="Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")
    transaction_id: StrictStr = Field(description="Represents the unique TD of the transaction.", alias="transactionId")
    value: ListWalletTransactionsRIValue
    __properties: ClassVar[List[str]] = ["direction", "fee", "fungibleTokens", "internalTransactions", "nonFungibleTokens", "recipients", "senders", "status", "timestamp", "transactionId", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListWalletTransactionsRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fungible_tokens (list)
        _items = []
        if self.fungible_tokens:
            for _item in self.fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fungibleTokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in internal_transactions (list)
        _items = []
        if self.internal_transactions:
            for _item in self.internal_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['internalTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_fungible_tokens (list)
        _items = []
        if self.non_fungible_tokens:
            for _item in self.non_fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nonFungibleTokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in senders (list)
        _items = []
        if self.senders:
            for _item in self.senders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['senders'] = _items
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListWalletTransactionsRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "direction": obj.get("direction"),
            "fee": ListWalletTransactionsRIFee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "fungibleTokens": [ListWalletTransactionsRIFungibleTokensInner.from_dict(_item) for _item in obj["fungibleTokens"]] if obj.get("fungibleTokens") is not None else None,
            "internalTransactions": [ListWalletTransactionsRIInternalTransactionsInner.from_dict(_item) for _item in obj["internalTransactions"]] if obj.get("internalTransactions") is not None else None,
            "nonFungibleTokens": [ListWalletTransactionsRINonFungibleTokensInner.from_dict(_item) for _item in obj["nonFungibleTokens"]] if obj.get("nonFungibleTokens") is not None else None,
            "recipients": [ListWalletTransactionsRIRecipientsInner.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "senders": [ListWalletTransactionsRISendersInner.from_dict(_item) for _item in obj["senders"]] if obj.get("senders") is not None else None,
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "transactionId": obj.get("transactionId"),
            "value": ListWalletTransactionsRIValue.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj


