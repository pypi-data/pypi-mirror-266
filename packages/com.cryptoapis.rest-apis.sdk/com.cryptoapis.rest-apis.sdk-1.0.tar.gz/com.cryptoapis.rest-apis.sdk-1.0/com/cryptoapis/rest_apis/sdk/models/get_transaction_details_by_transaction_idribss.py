# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.get_transaction_details_by_transaction_idribss_operations_inner import GetTransactionDetailsByTransactionIDRIBSSOperationsInner
from typing import Optional, Set
from typing_extensions import Self

class GetTransactionDetailsByTransactionIDRIBSS(BaseModel):
    """
    Stellar
    """ # noqa: E501
    addresses: List[StrictStr]
    memo: Optional[StrictStr] = Field(default=None, description="Represents an additional information that can be attached to a payment transaction. It is an optional field that can be used to provide a message or a reference number along with the payment.")
    memo_type: StrictStr = Field(description="Represents a field that defines the format of the memo data. It specifies whether the memo field contains plaintext or encoded data, and how the data should be interpreted.", alias="memoType")
    operations: List[GetTransactionDetailsByTransactionIDRIBSSOperationsInner] = Field(description="Object Array representation of transaction operations")
    paging_token: StrictStr = Field(description="Represents the paging token used to retrieve data from the Stellar network in manageable chunks, rather than in a single large response.", alias="pagingToken")
    transaction_status: StrictBool = Field(description="Represents the status of this transaction.", alias="transactionStatus")
    __properties: ClassVar[List[str]] = ["addresses", "memo", "memoType", "operations", "pagingToken", "transactionStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDRIBSS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item in self.operations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['operations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDRIBSS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": obj.get("addresses"),
            "memo": obj.get("memo"),
            "memoType": obj.get("memoType"),
            "operations": [GetTransactionDetailsByTransactionIDRIBSSOperationsInner.from_dict(_item) for _item in obj["operations"]] if obj.get("operations") is not None else None,
            "pagingToken": obj.get("pagingToken"),
            "transactionStatus": obj.get("transactionStatus")
        })
        return _obj


