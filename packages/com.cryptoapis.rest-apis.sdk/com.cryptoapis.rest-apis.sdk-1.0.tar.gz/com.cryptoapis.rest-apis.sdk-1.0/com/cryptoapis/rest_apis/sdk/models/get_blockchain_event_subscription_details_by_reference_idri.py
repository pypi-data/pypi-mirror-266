# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_blockchain_events_subscriptions_ri_deactivation_reasons_inner import ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner
from typing import Optional, Set
from typing_extensions import Self

class GetBlockchainEventSubscriptionDetailsByReferenceIDRI(BaseModel):
    """
    GetBlockchainEventSubscriptionDetailsByReferenceIDRI
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Represents the address of the transaction.")
    blockchain: StrictStr = Field(description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")
    callback_secret_key: Optional[StrictStr] = Field(default=None, description="Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).", alias="callbackSecretKey")
    callback_url: StrictStr = Field(description="Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs.", alias="callbackUrl")
    confirmations_count: Optional[StrictInt] = Field(default=None, description="Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.", alias="confirmationsCount")
    created_timestamp: StrictInt = Field(description="Defines the specific time/date when the subscription was created in Unix Timestamp.", alias="createdTimestamp")
    deactivation_reasons: Optional[List[ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner]] = Field(default=None, description="Represents the deactivation reason details, available when a blockchain event subscription has status isActive - false.", alias="deactivationReasons")
    event_type: StrictStr = Field(description="Defines the type of the specific event available for the customer to subscribe to for callback notification.", alias="eventType")
    is_active: StrictBool = Field(description="Defines whether the subscription is active or not. Set as boolean.", alias="isActive")
    network: StrictStr = Field(description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")
    reference_id: StrictStr = Field(description="Represents a unique ID used to reference the specific callback subscription.", alias="referenceId")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Represents the unique identification string that defines the transaction.", alias="transactionId")
    __properties: ClassVar[List[str]] = ["address", "blockchain", "callbackSecretKey", "callbackUrl", "confirmationsCount", "createdTimestamp", "deactivationReasons", "eventType", "isActive", "network", "referenceId", "transactionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockchainEventSubscriptionDetailsByReferenceIDRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deactivation_reasons (list)
        _items = []
        if self.deactivation_reasons:
            for _item in self.deactivation_reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deactivationReasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockchainEventSubscriptionDetailsByReferenceIDRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "blockchain": obj.get("blockchain"),
            "callbackSecretKey": obj.get("callbackSecretKey"),
            "callbackUrl": obj.get("callbackUrl"),
            "confirmationsCount": obj.get("confirmationsCount"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "deactivationReasons": [ListBlockchainEventsSubscriptionsRIDeactivationReasonsInner.from_dict(_item) for _item in obj["deactivationReasons"]] if obj.get("deactivationReasons") is not None else None,
            "eventType": obj.get("eventType"),
            "isActive": obj.get("isActive"),
            "network": obj.get("network"),
            "referenceId": obj.get("referenceId"),
            "transactionId": obj.get("transactionId")
        })
        return _obj


