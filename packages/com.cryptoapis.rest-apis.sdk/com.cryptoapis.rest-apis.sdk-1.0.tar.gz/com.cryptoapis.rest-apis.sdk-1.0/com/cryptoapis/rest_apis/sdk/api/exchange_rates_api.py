# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from com.cryptoapis.rest_apis.sdk.models.get_exchange_rate_by_asset_symbols_r import GetExchangeRateByAssetSymbolsR
from com.cryptoapis.rest_apis.sdk.models.get_exchange_rate_by_assets_ids_r import GetExchangeRateByAssetsIDsR

from com.cryptoapis.rest_apis.sdk.api_client import ApiClient, RequestSerialized
from com.cryptoapis.rest_apis.sdk.api_response import ApiResponse
from com.cryptoapis.rest_apis.sdk.rest import RESTResponseType


class ExchangeRatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_exchange_rate_by_asset_symbols(
        self,
        from_asset_symbol: Annotated[StrictStr, Field(description="Defines the base asset symbol to get a rate for.")],
        to_asset_symbol: Annotated[StrictStr, Field(description="Defines the relation asset symbol in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetExchangeRateByAssetSymbolsR:
        """Get Exchange Rate By Asset Symbols

        Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.

        :param from_asset_symbol: Defines the base asset symbol to get a rate for. (required)
        :type from_asset_symbol: str
        :param to_asset_symbol: Defines the relation asset symbol in which the base asset rate will be displayed. (required)
        :type to_asset_symbol: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_asset_symbols_serialize(
            from_asset_symbol=from_asset_symbol,
            to_asset_symbol=to_asset_symbol,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetSymbolsR",
            '400': "GetExchangeRateByAssetSymbols400Response",
            '401': "GetExchangeRateByAssetSymbols401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetSymbols403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetSymbols422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_exchange_rate_by_asset_symbols_with_http_info(
        self,
        from_asset_symbol: Annotated[StrictStr, Field(description="Defines the base asset symbol to get a rate for.")],
        to_asset_symbol: Annotated[StrictStr, Field(description="Defines the relation asset symbol in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetExchangeRateByAssetSymbolsR]:
        """Get Exchange Rate By Asset Symbols

        Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.

        :param from_asset_symbol: Defines the base asset symbol to get a rate for. (required)
        :type from_asset_symbol: str
        :param to_asset_symbol: Defines the relation asset symbol in which the base asset rate will be displayed. (required)
        :type to_asset_symbol: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_asset_symbols_serialize(
            from_asset_symbol=from_asset_symbol,
            to_asset_symbol=to_asset_symbol,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetSymbolsR",
            '400': "GetExchangeRateByAssetSymbols400Response",
            '401': "GetExchangeRateByAssetSymbols401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetSymbols403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetSymbols422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_exchange_rate_by_asset_symbols_without_preload_content(
        self,
        from_asset_symbol: Annotated[StrictStr, Field(description="Defines the base asset symbol to get a rate for.")],
        to_asset_symbol: Annotated[StrictStr, Field(description="Defines the relation asset symbol in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Exchange Rate By Asset Symbols

        Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.

        :param from_asset_symbol: Defines the base asset symbol to get a rate for. (required)
        :type from_asset_symbol: str
        :param to_asset_symbol: Defines the relation asset symbol in which the base asset rate will be displayed. (required)
        :type to_asset_symbol: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_asset_symbols_serialize(
            from_asset_symbol=from_asset_symbol,
            to_asset_symbol=to_asset_symbol,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetSymbolsR",
            '400': "GetExchangeRateByAssetSymbols400Response",
            '401': "GetExchangeRateByAssetSymbols401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetSymbols403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetSymbols422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_exchange_rate_by_asset_symbols_serialize(
        self,
        from_asset_symbol,
        to_asset_symbol,
        context,
        calculation_timestamp,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if from_asset_symbol is not None:
            _path_params['fromAssetSymbol'] = from_asset_symbol
        if to_asset_symbol is not None:
            _path_params['toAssetSymbol'] = to_asset_symbol
        # process the query parameters
        if context is not None:
            
            _query_params.append(('context', context))
            
        if calculation_timestamp is not None:
            
            _query_params.append(('calculationTimestamp', calculation_timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/market-data/exchange-rates/by-symbols/{fromAssetSymbol}/{toAssetSymbol}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_exchange_rate_by_assets_ids(
        self,
        from_asset_id: Annotated[StrictStr, Field(description="Defines the base asset Reference ID to get a rate for.")],
        to_asset_id: Annotated[StrictStr, Field(description="Defines the relation asset Reference ID in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetExchangeRateByAssetsIDsR:
        """Get Exchange Rate By Assets IDs

        Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.

        :param from_asset_id: Defines the base asset Reference ID to get a rate for. (required)
        :type from_asset_id: str
        :param to_asset_id: Defines the relation asset Reference ID in which the base asset rate will be displayed. (required)
        :type to_asset_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_assets_ids_serialize(
            from_asset_id=from_asset_id,
            to_asset_id=to_asset_id,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetsIDsR",
            '400': "GetExchangeRateByAssetsIDs400Response",
            '401': "GetExchangeRateByAssetsIDs401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetsIDs403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetsIDs422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_exchange_rate_by_assets_ids_with_http_info(
        self,
        from_asset_id: Annotated[StrictStr, Field(description="Defines the base asset Reference ID to get a rate for.")],
        to_asset_id: Annotated[StrictStr, Field(description="Defines the relation asset Reference ID in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetExchangeRateByAssetsIDsR]:
        """Get Exchange Rate By Assets IDs

        Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.

        :param from_asset_id: Defines the base asset Reference ID to get a rate for. (required)
        :type from_asset_id: str
        :param to_asset_id: Defines the relation asset Reference ID in which the base asset rate will be displayed. (required)
        :type to_asset_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_assets_ids_serialize(
            from_asset_id=from_asset_id,
            to_asset_id=to_asset_id,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetsIDsR",
            '400': "GetExchangeRateByAssetsIDs400Response",
            '401': "GetExchangeRateByAssetsIDs401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetsIDs403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetsIDs422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_exchange_rate_by_assets_ids_without_preload_content(
        self,
        from_asset_id: Annotated[StrictStr, Field(description="Defines the base asset Reference ID to get a rate for.")],
        to_asset_id: Annotated[StrictStr, Field(description="Defines the relation asset Reference ID in which the base asset rate will be displayed.")],
        context: Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None,
        calculation_timestamp: Annotated[Optional[StrictInt], Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Exchange Rate By Assets IDs

        Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.

        :param from_asset_id: Defines the base asset Reference ID to get a rate for. (required)
        :type from_asset_id: str
        :param to_asset_id: Defines the relation asset Reference ID in which the base asset rate will be displayed. (required)
        :type to_asset_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param calculation_timestamp: Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.
        :type calculation_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exchange_rate_by_assets_ids_serialize(
            from_asset_id=from_asset_id,
            to_asset_id=to_asset_id,
            context=context,
            calculation_timestamp=calculation_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExchangeRateByAssetsIDsR",
            '400': "GetExchangeRateByAssetsIDs400Response",
            '401': "GetExchangeRateByAssetsIDs401Response",
            '402': "ConvertBitcoinCashAddress402Response",
            '403': "GetExchangeRateByAssetsIDs403Response",
            '409': "ConvertBitcoinCashAddress409Response",
            '415': "ConvertBitcoinCashAddress415Response",
            '422': "GetExchangeRateByAssetsIDs422Response",
            '429': "ConvertBitcoinCashAddress429Response",
            '500': "ConvertBitcoinCashAddress500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_exchange_rate_by_assets_ids_serialize(
        self,
        from_asset_id,
        to_asset_id,
        context,
        calculation_timestamp,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if from_asset_id is not None:
            _path_params['fromAssetId'] = from_asset_id
        if to_asset_id is not None:
            _path_params['toAssetId'] = to_asset_id
        # process the query parameters
        if context is not None:
            
            _query_params.append(('context', context))
            
        if calculation_timestamp is not None:
            
            _query_params.append(('calculationTimestamp', calculation_timestamp))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/market-data/exchange-rates/by-asset-ids/{fromAssetId}/{toAssetId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


