# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.address_internal_transaction_confirmed_data_item_mined_in_block import AddressInternalTransactionConfirmedDataItemMinedInBlock
from typing import Optional, Set
from typing_extensions import Self

class AddressInternalTransactionConfirmedDataItem(BaseModel):
    """
    Defines an `item` as one result.
    """ # noqa: E501
    blockchain: StrictStr = Field(description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")
    network: StrictStr = Field(description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.")
    address: StrictStr = Field(description="Defines the specific address of the internal transaction.")
    mined_in_block: AddressInternalTransactionConfirmedDataItemMinedInBlock = Field(alias="minedInBlock")
    parent_transaction_id: StrictStr = Field(description="Defines the Parent Transaction's unique ID.", alias="parentTransactionId")
    operation_id: StrictStr = Field(description="Defines the specific operation's unique ID.", alias="operationId")
    amount: StrictStr = Field(description="Defines the amount of coins sent with the confirmed transaction.")
    unit: StrictStr = Field(description="Defines the unit of the transaction, e.g. Gwei.")
    direction: StrictStr = Field(description="Defines whether the transaction is \"incoming\" or \"outgoing\".")
    __properties: ClassVar[List[str]] = ["blockchain", "network", "address", "minedInBlock", "parentTransactionId", "operationId", "amount", "unit", "direction"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['incoming', 'outgoing']):
            raise ValueError("must be one of enum values ('incoming', 'outgoing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressInternalTransactionConfirmedDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mined_in_block
        if self.mined_in_block:
            _dict['minedInBlock'] = self.mined_in_block.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressInternalTransactionConfirmedDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockchain": obj.get("blockchain"),
            "network": obj.get("network"),
            "address": obj.get("address"),
            "minedInBlock": AddressInternalTransactionConfirmedDataItemMinedInBlock.from_dict(obj["minedInBlock"]) if obj.get("minedInBlock") is not None else None,
            "parentTransactionId": obj.get("parentTransactionId"),
            "operationId": obj.get("operationId"),
            "amount": obj.get("amount"),
            "unit": obj.get("unit"),
            "direction": obj.get("direction")
        })
        return _obj


