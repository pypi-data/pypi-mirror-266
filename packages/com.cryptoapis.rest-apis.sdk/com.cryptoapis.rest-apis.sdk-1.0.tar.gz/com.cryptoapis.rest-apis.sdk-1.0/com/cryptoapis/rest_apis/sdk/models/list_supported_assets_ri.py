# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ListSupportedAssetsRI(BaseModel):
    """
    ListSupportedAssetsRI
    """ # noqa: E501
    asset_id: StrictStr = Field(description="Defines the unique ID of the specific asset.", alias="assetId")
    asset_name: StrictStr = Field(description="Specifies the name of the asset in question.", alias="assetName")
    asset_symbol: StrictStr = Field(description="Specifies the asset's unique symbol in the Crypto APIs listings.", alias="assetSymbol")
    asset_type: StrictStr = Field(description="Defines the type of the supported asset. This could be either \"crypto\" or \"fiat\".", alias="assetType")
    original_symbol: StrictStr = Field(description="Specifies the asset's original symbol as introduced by its founders.", alias="originalSymbol")
    __properties: ClassVar[List[str]] = ["assetId", "assetName", "assetSymbol", "assetType", "originalSymbol"]

    @field_validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['fiat', 'crypto']):
            raise ValueError("must be one of enum values ('fiat', 'crypto')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListSupportedAssetsRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListSupportedAssetsRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetId": obj.get("assetId"),
            "assetName": obj.get("assetName"),
            "assetSymbol": obj.get("assetSymbol"),
            "assetType": obj.get("assetType"),
            "originalSymbol": obj.get("originalSymbol")
        })
        return _obj


