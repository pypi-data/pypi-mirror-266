# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GetBlockDetailsByBlockHeightFromCallbackRIBSS(BaseModel):
    """
    Stellar
    """ # noqa: E501
    base_fee: StrictStr = Field(description="Representation of the base fee", alias="baseFee")
    base_reserve: StrictStr = Field(description="Representation of the base reserve that refers to the minimum amount of XLM (the native cryptocurrency of the Stellar network) that an account must hold as a reserve as minimum balance.", alias="baseReserve")
    failed_transactions: StrictInt = Field(description="Representation of the blocks' failed transactions count", alias="failedTransactions")
    protocol_version: StrictStr = Field(description="Representation of protocol version which refers to the specific set of rules and standards that govern the behavior of the network's nodes and participants.", alias="protocolVersion")
    total_coins: StrictStr = Field(description="Representation of the total coins", alias="totalCoins")
    __properties: ClassVar[List[str]] = ["baseFee", "baseReserve", "failedTransactions", "protocolVersion", "totalCoins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHeightFromCallbackRIBSS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHeightFromCallbackRIBSS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseFee": obj.get("baseFee"),
            "baseReserve": obj.get("baseReserve"),
            "failedTransactions": obj.get("failedTransactions"),
            "protocolVersion": obj.get("protocolVersion"),
            "totalCoins": obj.get("totalCoins")
        })
        return _obj


