# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_fee import ListXRPRippleTransactionsByBlockHeightRIFee
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_offer import ListXRPRippleTransactionsByBlockHeightRIOffer
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_receive import ListXRPRippleTransactionsByBlockHeightRIReceive
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_recipients_inner import ListXRPRippleTransactionsByBlockHeightRIRecipientsInner
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_senders_inner import ListXRPRippleTransactionsByBlockHeightRISendersInner
from com.cryptoapis.rest_apis.sdk.models.list_xrp_ripple_transactions_by_block_height_ri_value import ListXRPRippleTransactionsByBlockHeightRIValue
from typing import Optional, Set
from typing_extensions import Self

class ListXRPRippleTransactionsByBlockHeightRI(BaseModel):
    """
    ListXRPRippleTransactionsByBlockHeightRI
    """ # noqa: E501
    additional_data: Optional[StrictStr] = Field(default=None, alias="additionalData")
    destination_tag: Optional[StrictInt] = Field(default=None, alias="destinationTag")
    index: StrictInt
    mined_in_block_hash: StrictStr = Field(alias="minedInBlockHash")
    recipients: List[ListXRPRippleTransactionsByBlockHeightRIRecipientsInner] = Field(description="Object Array representation of transaction receivers")
    senders: List[ListXRPRippleTransactionsByBlockHeightRISendersInner] = Field(description="Object Array representation of transaction senders")
    sequence: StrictInt
    status: StrictStr
    timestamp: StrictInt = Field(description="Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")
    transaction_hash: StrictStr = Field(alias="transactionHash")
    type: StrictStr
    fee: ListXRPRippleTransactionsByBlockHeightRIFee
    offer: ListXRPRippleTransactionsByBlockHeightRIOffer
    receive: ListXRPRippleTransactionsByBlockHeightRIReceive
    value: ListXRPRippleTransactionsByBlockHeightRIValue
    __properties: ClassVar[List[str]] = ["additionalData", "destinationTag", "index", "minedInBlockHash", "recipients", "senders", "sequence", "status", "timestamp", "transactionHash", "type", "fee", "offer", "receive", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListXRPRippleTransactionsByBlockHeightRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in senders (list)
        _items = []
        if self.senders:
            for _item in self.senders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['senders'] = _items
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receive
        if self.receive:
            _dict['receive'] = self.receive.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListXRPRippleTransactionsByBlockHeightRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "destinationTag": obj.get("destinationTag"),
            "index": obj.get("index"),
            "minedInBlockHash": obj.get("minedInBlockHash"),
            "recipients": [ListXRPRippleTransactionsByBlockHeightRIRecipientsInner.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "senders": [ListXRPRippleTransactionsByBlockHeightRISendersInner.from_dict(_item) for _item in obj["senders"]] if obj.get("senders") is not None else None,
            "sequence": obj.get("sequence"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "transactionHash": obj.get("transactionHash"),
            "type": obj.get("type"),
            "fee": ListXRPRippleTransactionsByBlockHeightRIFee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "offer": ListXRPRippleTransactionsByBlockHeightRIOffer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "receive": ListXRPRippleTransactionsByBlockHeightRIReceive.from_dict(obj["receive"]) if obj.get("receive") is not None else None,
            "value": ListXRPRippleTransactionsByBlockHeightRIValue.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj


