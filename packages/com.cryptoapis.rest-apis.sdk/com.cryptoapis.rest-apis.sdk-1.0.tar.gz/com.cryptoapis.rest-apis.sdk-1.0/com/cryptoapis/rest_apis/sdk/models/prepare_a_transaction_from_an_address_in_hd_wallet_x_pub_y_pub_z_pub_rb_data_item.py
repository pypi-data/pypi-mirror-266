# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_rb_data_item_fee import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItemFee
from typing import Optional, Set
from typing_extensions import Self

class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItem(BaseModel):
    """
    PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItem
    """ # noqa: E501
    additional_data: Optional[StrictStr] = Field(default=None, description="Representation of the additional data.", alias="additionalData")
    amount: StrictStr = Field(description="Representation of the amount of the transaction")
    recipient: StrictStr = Field(description="Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")
    sender: StrictStr = Field(description="Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.")
    xpub: StrictStr = Field(description="Defines the account extended publicly known key which is used to derive all child public keys.")
    fee: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItemFee
    nonce: Optional[StrictStr] = Field(default=None, description="Representation of the nonce value")
    transaction_type: Optional[StrictStr] = Field(default='gas-fee-market-transaction', description="Representation of the transaction type. For Ethereum-Classic and Binance Smart Chain there is no need to provide \"transactionType\" in the request.", alias="transactionType")
    sequence: StrictStr = Field(description="String representation of the sequence")
    __properties: ClassVar[List[str]] = ["additionalData", "amount", "recipient", "sender", "xpub", "fee", "nonce", "transactionType", "sequence"]

    @field_validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['legacy-transaction', 'access-list-transaction', 'gas-fee-market-transaction']):
            raise ValueError("must be one of enum values ('legacy-transaction', 'access-list-transaction', 'gas-fee-market-transaction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "amount": obj.get("amount"),
            "recipient": obj.get("recipient"),
            "sender": obj.get("sender"),
            "xpub": obj.get("xpub"),
            "fee": PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRBDataItemFee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "nonce": obj.get("nonce"),
            "transactionType": obj.get("transactionType") if obj.get("transactionType") is not None else 'gas-fee-market-transaction',
            "sequence": obj.get("sequence")
        })
        return _obj


