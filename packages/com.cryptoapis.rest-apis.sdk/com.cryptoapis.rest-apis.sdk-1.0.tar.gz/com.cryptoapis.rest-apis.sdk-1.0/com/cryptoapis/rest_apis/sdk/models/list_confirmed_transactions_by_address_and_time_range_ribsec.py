# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.list_confirmed_transactions_by_address_ribsec_gas_price import ListConfirmedTransactionsByAddressRIBSECGasPrice
from typing import Optional, Set
from typing_extensions import Self

class ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC(BaseModel):
    """
    Ethereum Classic
    """ # noqa: E501
    contract: StrictStr = Field(description="Represents the specific transaction contract.")
    gas_limit: StrictStr = Field(description="Represents the amount of gas used by this specific transaction alone.", alias="gasLimit")
    gas_price: ListConfirmedTransactionsByAddressRIBSECGasPrice = Field(alias="gasPrice")
    gas_used: StrictStr = Field(description="Represents the exact unit of gas that was used for the transaction.", alias="gasUsed")
    input_data: StrictStr = Field(description="Represents additional information that is required for the transaction.", alias="inputData")
    nonce: StrictInt = Field(description="Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")
    transaction_status: StrictStr = Field(description="String representation of the transaction status", alias="transactionStatus")
    __properties: ClassVar[List[str]] = ["contract", "gasLimit", "gasPrice", "gasUsed", "inputData", "nonce", "transactionStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gas_price
        if self.gas_price:
            _dict['gasPrice'] = self.gas_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract": obj.get("contract"),
            "gasLimit": obj.get("gasLimit"),
            "gasPrice": ListConfirmedTransactionsByAddressRIBSECGasPrice.from_dict(obj["gasPrice"]) if obj.get("gasPrice") is not None else None,
            "gasUsed": obj.get("gasUsed"),
            "inputData": obj.get("inputData"),
            "nonce": obj.get("nonce"),
            "transactionStatus": obj.get("transactionStatus")
        })
        return _obj


