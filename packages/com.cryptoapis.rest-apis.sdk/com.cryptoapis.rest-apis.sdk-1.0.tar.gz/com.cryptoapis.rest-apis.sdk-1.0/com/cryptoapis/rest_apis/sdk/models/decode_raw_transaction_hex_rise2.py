# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DecodeRawTransactionHexRISE2(BaseModel):
    """
    Ethereum Classic
    """ # noqa: E501
    approximate_fee: Optional[StrictStr] = Field(default=None, description="Defines the approximate fee value. When isConfirmed is True - Defines the amount of the transaction fee When isConfirmed is False - For ETH-based blockchains this attribute represents the max fee value.", alias="approximateFee")
    approximate_minimum_required_fee: Optional[StrictStr] = Field(default=None, description="Defines the approximate minimum fee that is required for the transaction.", alias="approximateMinimumRequiredFee")
    gas_limit: StrictStr = Field(description="Represents the amount of gas used by this specific transaction alone.", alias="gasLimit")
    gas_paid_for_data: Optional[StrictStr] = Field(default=None, description="Represents the amount of gas paid for the data in the transaction.", alias="gasPaidForData")
    gas_price: Optional[StrictStr] = Field(default=None, description="Represents the price offered to the miner to purchase this amount of gas.", alias="gasPrice")
    input_data: Optional[StrictStr] = Field(default=None, description="Represents additional information that is required for the transaction.", alias="inputData")
    nonce: StrictInt = Field(description="Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")
    r: Optional[StrictStr] = Field(default=None, description="Represents output of an ECDSA signature.")
    recipient: StrictStr = Field(description="The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one recipient.")
    s: Optional[StrictStr] = Field(default=None, description="Represents output of an ECDSA signature.")
    sender: StrictStr = Field(description="Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.")
    type: StrictInt = Field(description="Specifies the transaction type as one from three options: if response returns a `\"0\"` it means the raw transaction includes legacy transaction data, if it is `\"1\"` - includes access lists for EIP2930, and if it is `\"2\"` - EIP1559 data.")
    v: Optional[StrictStr] = Field(default=None, description="Defines the the recovery id.")
    value: Optional[StrictStr] = Field(default=None, description="Represents the sent/received amount.")
    __properties: ClassVar[List[str]] = ["approximateFee", "approximateMinimumRequiredFee", "gasLimit", "gasPaidForData", "gasPrice", "inputData", "nonce", "r", "recipient", "s", "sender", "type", "v", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DecodeRawTransactionHexRISE2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DecodeRawTransactionHexRISE2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approximateFee": obj.get("approximateFee"),
            "approximateMinimumRequiredFee": obj.get("approximateMinimumRequiredFee"),
            "gasLimit": obj.get("gasLimit"),
            "gasPaidForData": obj.get("gasPaidForData"),
            "gasPrice": obj.get("gasPrice"),
            "inputData": obj.get("inputData"),
            "nonce": obj.get("nonce"),
            "r": obj.get("r"),
            "recipient": obj.get("recipient"),
            "s": obj.get("s"),
            "sender": obj.get("sender"),
            "type": obj.get("type"),
            "v": obj.get("v"),
            "value": obj.get("value")
        })
        return _obj


