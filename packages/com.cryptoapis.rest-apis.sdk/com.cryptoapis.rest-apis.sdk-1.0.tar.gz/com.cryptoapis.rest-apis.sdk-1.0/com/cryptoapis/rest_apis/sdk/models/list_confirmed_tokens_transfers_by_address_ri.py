# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_confirmed_tokens_transfers_by_address_ri_transaction_fee import ListConfirmedTokensTransfersByAddressRITransactionFee
from com.cryptoapis.rest_apis.sdk.models.list_confirmed_tokens_transfers_by_address_ribs import ListConfirmedTokensTransfersByAddressRIBS
from typing import Optional, Set
from typing_extensions import Self

class ListConfirmedTokensTransfersByAddressRI(BaseModel):
    """
    ListConfirmedTokensTransfersByAddressRI
    """ # noqa: E501
    contract_address: StrictStr = Field(description="Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.", alias="contractAddress")
    mined_in_block_height: StrictInt = Field(description="Defines the block height in which this transaction was confirmed/mined.", alias="minedInBlockHeight")
    recipient_address: StrictStr = Field(description="Defines the address to which the recipient receives the transferred tokens.", alias="recipientAddress")
    sender_address: StrictStr = Field(description="Defines the address from which the sender transfers tokens.", alias="senderAddress")
    token_type: StrictStr = Field(description="Defines the specific token type.", alias="tokenType")
    tokens_amount: Optional[StrictStr] = Field(default=None, description="Defines the token amount of the transfer.", alias="tokensAmount")
    transaction_hash: StrictStr = Field(description="Represents the hash of the transaction, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.", alias="transactionHash")
    transaction_timestamp: StrictInt = Field(description="Defines the specific time/date when the transaction was created in Unix Timestamp.", alias="transactionTimestamp")
    transaction_fee: ListConfirmedTokensTransfersByAddressRITransactionFee = Field(alias="transactionFee")
    token_decimals: Optional[StrictInt] = Field(default=None, description="Representation of the decimals of the token", alias="tokenDecimals")
    token_id: Optional[StrictStr] = Field(default=None, description="Representation of the tokens' identifier", alias="tokenId")
    token_name: Optional[StrictStr] = Field(default=None, description="Representation of the name of the token", alias="tokenName")
    token_symbol: Optional[StrictStr] = Field(default=None, description="Representation of the tokens' symbol", alias="tokenSymbol")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Representation of the transactionId in which the token transfer appears", alias="transactionId")
    blockchain_specific: ListConfirmedTokensTransfersByAddressRIBS = Field(alias="blockchainSpecific")
    __properties: ClassVar[List[str]] = ["contractAddress", "minedInBlockHeight", "recipientAddress", "senderAddress", "tokenType", "tokensAmount", "transactionHash", "transactionTimestamp", "transactionFee", "tokenDecimals", "tokenId", "tokenName", "tokenSymbol", "transactionId", "blockchainSpecific"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListConfirmedTokensTransfersByAddressRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_fee
        if self.transaction_fee:
            _dict['transactionFee'] = self.transaction_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blockchain_specific
        if self.blockchain_specific:
            _dict['blockchainSpecific'] = self.blockchain_specific.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListConfirmedTokensTransfersByAddressRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractAddress": obj.get("contractAddress"),
            "minedInBlockHeight": obj.get("minedInBlockHeight"),
            "recipientAddress": obj.get("recipientAddress"),
            "senderAddress": obj.get("senderAddress"),
            "tokenType": obj.get("tokenType"),
            "tokensAmount": obj.get("tokensAmount"),
            "transactionHash": obj.get("transactionHash"),
            "transactionTimestamp": obj.get("transactionTimestamp"),
            "transactionFee": ListConfirmedTokensTransfersByAddressRITransactionFee.from_dict(obj["transactionFee"]) if obj.get("transactionFee") is not None else None,
            "tokenDecimals": obj.get("tokenDecimals"),
            "tokenId": obj.get("tokenId"),
            "tokenName": obj.get("tokenName"),
            "tokenSymbol": obj.get("tokenSymbol"),
            "transactionId": obj.get("transactionId"),
            "blockchainSpecific": ListConfirmedTokensTransfersByAddressRIBS.from_dict(obj["blockchainSpecific"]) if obj.get("blockchainSpecific") is not None else None
        })
        return _obj


