# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_rb_data_item_fee import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee
from com.cryptoapis.rest_apis.sdk.models.prepare_autxo_based_transaction_from_hd_wallet_x_pub_y_pub_z_pub_rb_data_item_recipients_inner import PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner
from typing import Optional, Set
from typing_extensions import Self

class PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem(BaseModel):
    """
    PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem
    """ # noqa: E501
    additional_data: Optional[StrictStr] = Field(default=None, description="Representation of the additional data.", alias="additionalData")
    locktime: Optional[StrictInt] = Field(default=None, description="Represents the time at which a particular transaction can be added to the blockchain.")
    xpub: StrictStr = Field(description="Defines the account extended publicly known key which is used to derive all child public keys.")
    fee: PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee
    prepare_strategy: Optional[StrictStr] = Field(default=None, description="Representation of the transaction's strategy type", alias="prepareStrategy")
    recipients: List[PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner] = Field(description="Object Array representation of transaction receivers")
    replaceable: Optional[StrictBool] = Field(default=None, description="Representation of whether the transaction is replaceable. This is an Optional attribute that is not supported for Dogecoin, Dash and Bitcoin-Cash.")
    __properties: ClassVar[List[str]] = ["additionalData", "locktime", "xpub", "fee", "prepareStrategy", "recipients", "replaceable"]

    @field_validator('prepare_strategy')
    def prepare_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'minimize-dust', 'optimize-size']):
            raise ValueError("must be one of enum values ('none', 'minimize-dust', 'optimize-size')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "locktime": obj.get("locktime"),
            "xpub": obj.get("xpub"),
            "fee": PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemFee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "prepareStrategy": obj.get("prepareStrategy"),
            "recipients": [PrepareAUTXOBasedTransactionFromHDWalletXPubYPubZPubRBDataItemRecipientsInner.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "replaceable": obj.get("replaceable")
        })
        return _obj


