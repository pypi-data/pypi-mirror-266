# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.get_address_details_from_callback_ri_confirmed_balance import GetAddressDetailsFromCallbackRIConfirmedBalance
from com.cryptoapis.rest_apis.sdk.models.get_address_details_from_callback_ri_total_received import GetAddressDetailsFromCallbackRITotalReceived
from com.cryptoapis.rest_apis.sdk.models.get_address_details_from_callback_ri_total_spent import GetAddressDetailsFromCallbackRITotalSpent
from typing import Optional, Set
from typing_extensions import Self

class GetAddressDetailsFromCallbackRI(BaseModel):
    """
    GetAddressDetailsFromCallbackRI
    """ # noqa: E501
    incoming_transactions_count: StrictInt = Field(description="Representation of the received transaction count of the address", alias="incomingTransactionsCount")
    outgoing_transactions_count: StrictInt = Field(description="Representation of the sent transaction count of the address", alias="outgoingTransactionsCount")
    transactions_count: StrictInt = Field(description="Defines the transactions count of the address", alias="transactionsCount")
    confirmed_balance: GetAddressDetailsFromCallbackRIConfirmedBalance = Field(alias="confirmedBalance")
    total_received: GetAddressDetailsFromCallbackRITotalReceived = Field(alias="totalReceived")
    total_spent: GetAddressDetailsFromCallbackRITotalSpent = Field(alias="totalSpent")
    sequence: Optional[StrictInt] = Field(default=None, description="Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")
    __properties: ClassVar[List[str]] = ["incomingTransactionsCount", "outgoingTransactionsCount", "transactionsCount", "confirmedBalance", "totalReceived", "totalSpent", "sequence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAddressDetailsFromCallbackRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confirmed_balance
        if self.confirmed_balance:
            _dict['confirmedBalance'] = self.confirmed_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_received
        if self.total_received:
            _dict['totalReceived'] = self.total_received.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_spent
        if self.total_spent:
            _dict['totalSpent'] = self.total_spent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAddressDetailsFromCallbackRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "incomingTransactionsCount": obj.get("incomingTransactionsCount"),
            "outgoingTransactionsCount": obj.get("outgoingTransactionsCount"),
            "transactionsCount": obj.get("transactionsCount"),
            "confirmedBalance": GetAddressDetailsFromCallbackRIConfirmedBalance.from_dict(obj["confirmedBalance"]) if obj.get("confirmedBalance") is not None else None,
            "totalReceived": GetAddressDetailsFromCallbackRITotalReceived.from_dict(obj["totalReceived"]) if obj.get("totalReceived") is not None else None,
            "totalSpent": GetAddressDetailsFromCallbackRITotalSpent.from_dict(obj["totalSpent"]) if obj.get("totalSpent") is not None else None,
            "sequence": obj.get("sequence")
        })
        return _obj


