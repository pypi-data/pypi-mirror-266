# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.get_block_details_by_block_hash_from_callback_ribs import GetBlockDetailsByBlockHashFromCallbackRIBS
from typing import Optional, Set
from typing_extensions import Self

class GetBlockDetailsByBlockHashFromCallbackRI(BaseModel):
    """
    GetBlockDetailsByBlockHashFromCallbackRI
    """ # noqa: E501
    hash: StrictStr = Field(description="Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.")
    height: StrictInt = Field(description="Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \"Genesis block\".")
    previous_block_hash: StrictStr = Field(description="Represents the hash of the previous block, also known as the parent block.", alias="previousBlockHash")
    timestamp: StrictInt = Field(description="Defines the exact date/time when this block was mined in Unix Timestamp.")
    transactions_count: StrictInt = Field(description="Represents the total number of all transactions as part of this block.", alias="transactionsCount")
    difficulty: StrictStr = Field(description="Represents a mathematical value of how hard it is to find a valid hash for this block.")
    extra_data: StrictStr = Field(description="Represents any data that can be included by the miner in the block.", alias="extraData")
    gas_limit: StrictStr = Field(description="Represents the amount of gas used by this specific transaction alone.", alias="gasLimit")
    gas_used: StrictStr = Field(description="Represents the exact unit of gas that was used for the transaction.", alias="gasUsed")
    mined_in_seconds: StrictInt = Field(description="Specifies the amount of time required for the block to be mined in seconds.", alias="minedInSeconds")
    nonce: StrictStr = Field(description="Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")
    sha3_uncles: StrictStr = Field(description="Defines the combined hash of all uncles for a given parent.", alias="sha3Uncles")
    size: StrictInt = Field(description="Represents the total size of the block in Bytes.")
    total_difficulty: StrictStr = Field(description="Defines the total difficulty of the chain until this block, i.e. how difficult it is for a specific miner to mine a new block.", alias="totalDifficulty")
    uncles: List[StrictStr]
    blockchain_specific: GetBlockDetailsByBlockHashFromCallbackRIBS = Field(alias="blockchainSpecific")
    __properties: ClassVar[List[str]] = ["hash", "height", "previousBlockHash", "timestamp", "transactionsCount", "difficulty", "extraData", "gasLimit", "gasUsed", "minedInSeconds", "nonce", "sha3Uncles", "size", "totalDifficulty", "uncles", "blockchainSpecific"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHashFromCallbackRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blockchain_specific
        if self.blockchain_specific:
            _dict['blockchainSpecific'] = self.blockchain_specific.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockDetailsByBlockHashFromCallbackRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hash": obj.get("hash"),
            "height": obj.get("height"),
            "previousBlockHash": obj.get("previousBlockHash"),
            "timestamp": obj.get("timestamp"),
            "transactionsCount": obj.get("transactionsCount"),
            "difficulty": obj.get("difficulty"),
            "extraData": obj.get("extraData"),
            "gasLimit": obj.get("gasLimit"),
            "gasUsed": obj.get("gasUsed"),
            "minedInSeconds": obj.get("minedInSeconds"),
            "nonce": obj.get("nonce"),
            "sha3Uncles": obj.get("sha3Uncles"),
            "size": obj.get("size"),
            "totalDifficulty": obj.get("totalDifficulty"),
            "uncles": obj.get("uncles"),
            "blockchainSpecific": GetBlockDetailsByBlockHashFromCallbackRIBS.from_dict(obj["blockchainSpecific"]) if obj.get("blockchainSpecific") is not None else None
        })
        return _obj


