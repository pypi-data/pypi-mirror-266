# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.get_transaction_details_by_transaction_id_from_callback_ribsl_vout_inner import GetTransactionDetailsByTransactionIDFromCallbackRIBSLVoutInner
from com.cryptoapis.rest_apis.sdk.models.get_transaction_details_by_transaction_idribsl_vin_inner import GetTransactionDetailsByTransactionIDRIBSLVinInner
from typing import Optional, Set
from typing_extensions import Self

class GetTransactionDetailsByTransactionIDFromCallbackRIBSL(BaseModel):
    """
    Litecoin
    """ # noqa: E501
    locktime: StrictInt = Field(description="Represents the time at which a particular transaction can be added to the blockchain.")
    size: StrictInt = Field(description="Represents the total size of this transaction.")
    v_size: StrictInt = Field(description="Represents the virtual size of this transaction.", alias="vSize")
    version: StrictInt = Field(description="Represents transaction version number.")
    vin: List[GetTransactionDetailsByTransactionIDRIBSLVinInner] = Field(description="Represents the transaction inputs.")
    vout: List[GetTransactionDetailsByTransactionIDFromCallbackRIBSLVoutInner] = Field(description="Represents the transaction outputs.")
    __properties: ClassVar[List[str]] = ["locktime", "size", "vSize", "version", "vin", "vout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vin (list)
        _items = []
        if self.vin:
            for _item in self.vin:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vin'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vout (list)
        _items = []
        if self.vout:
            for _item in self.vout:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vout'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locktime": obj.get("locktime"),
            "size": obj.get("size"),
            "vSize": obj.get("vSize"),
            "version": obj.get("version"),
            "vin": [GetTransactionDetailsByTransactionIDRIBSLVinInner.from_dict(_item) for _item in obj["vin"]] if obj.get("vin") is not None else None,
            "vout": [GetTransactionDetailsByTransactionIDFromCallbackRIBSLVoutInner.from_dict(_item) for _item in obj["vout"]] if obj.get("vout") is not None else None
        })
        return _obj


