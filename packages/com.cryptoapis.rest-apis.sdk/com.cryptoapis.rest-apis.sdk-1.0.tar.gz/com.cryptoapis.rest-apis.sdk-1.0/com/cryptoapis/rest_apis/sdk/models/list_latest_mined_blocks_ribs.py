# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsb import ListLatestMinedBlocksRIBSB
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsbc import ListLatestMinedBlocksRIBSBC
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsbsc import ListLatestMinedBlocksRIBSBSC
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsd import ListLatestMinedBlocksRIBSD
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsd2 import ListLatestMinedBlocksRIBSD2
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribse import ListLatestMinedBlocksRIBSE
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsec import ListLatestMinedBlocksRIBSEC
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsl import ListLatestMinedBlocksRIBSL
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribss import ListLatestMinedBlocksRIBSS
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribst import ListLatestMinedBlocksRIBST
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsx import ListLatestMinedBlocksRIBSX
from com.cryptoapis.rest_apis.sdk.models.list_latest_mined_blocks_ribsz import ListLatestMinedBlocksRIBSZ
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

LISTLATESTMINEDBLOCKSRIBS_ONE_OF_SCHEMAS = ["ListLatestMinedBlocksRIBSB", "ListLatestMinedBlocksRIBSBC", "ListLatestMinedBlocksRIBSBSC", "ListLatestMinedBlocksRIBSD", "ListLatestMinedBlocksRIBSD2", "ListLatestMinedBlocksRIBSE", "ListLatestMinedBlocksRIBSEC", "ListLatestMinedBlocksRIBSL", "ListLatestMinedBlocksRIBSS", "ListLatestMinedBlocksRIBST", "ListLatestMinedBlocksRIBSX", "ListLatestMinedBlocksRIBSZ"]

class ListLatestMinedBlocksRIBS(BaseModel):
    """
    ListLatestMinedBlocksRIBS
    """
    # data type: ListLatestMinedBlocksRIBSB
    oneof_schema_1_validator: Optional[ListLatestMinedBlocksRIBSB] = None
    # data type: ListLatestMinedBlocksRIBSBC
    oneof_schema_2_validator: Optional[ListLatestMinedBlocksRIBSBC] = None
    # data type: ListLatestMinedBlocksRIBSEC
    oneof_schema_3_validator: Optional[ListLatestMinedBlocksRIBSEC] = None
    # data type: ListLatestMinedBlocksRIBSE
    oneof_schema_4_validator: Optional[ListLatestMinedBlocksRIBSE] = None
    # data type: ListLatestMinedBlocksRIBSL
    oneof_schema_5_validator: Optional[ListLatestMinedBlocksRIBSL] = None
    # data type: ListLatestMinedBlocksRIBSD
    oneof_schema_6_validator: Optional[ListLatestMinedBlocksRIBSD] = None
    # data type: ListLatestMinedBlocksRIBSD2
    oneof_schema_7_validator: Optional[ListLatestMinedBlocksRIBSD2] = None
    # data type: ListLatestMinedBlocksRIBSBSC
    oneof_schema_8_validator: Optional[ListLatestMinedBlocksRIBSBSC] = None
    # data type: ListLatestMinedBlocksRIBSZ
    oneof_schema_9_validator: Optional[ListLatestMinedBlocksRIBSZ] = None
    # data type: ListLatestMinedBlocksRIBSX
    oneof_schema_10_validator: Optional[ListLatestMinedBlocksRIBSX] = None
    # data type: ListLatestMinedBlocksRIBST
    oneof_schema_11_validator: Optional[ListLatestMinedBlocksRIBST] = None
    # data type: ListLatestMinedBlocksRIBSS
    oneof_schema_12_validator: Optional[ListLatestMinedBlocksRIBSS] = None
    actual_instance: Optional[Union[ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ]] = None
    one_of_schemas: List[str] = Field(default=Literal["ListLatestMinedBlocksRIBSB", "ListLatestMinedBlocksRIBSBC", "ListLatestMinedBlocksRIBSBSC", "ListLatestMinedBlocksRIBSD", "ListLatestMinedBlocksRIBSD2", "ListLatestMinedBlocksRIBSE", "ListLatestMinedBlocksRIBSEC", "ListLatestMinedBlocksRIBSL", "ListLatestMinedBlocksRIBSS", "ListLatestMinedBlocksRIBST", "ListLatestMinedBlocksRIBSX", "ListLatestMinedBlocksRIBSZ"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ListLatestMinedBlocksRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: ListLatestMinedBlocksRIBSB
        if not isinstance(v, ListLatestMinedBlocksRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSB`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSBC
        if not isinstance(v, ListLatestMinedBlocksRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSBC`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSEC
        if not isinstance(v, ListLatestMinedBlocksRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSEC`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSE
        if not isinstance(v, ListLatestMinedBlocksRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSE`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSL
        if not isinstance(v, ListLatestMinedBlocksRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSL`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSD
        if not isinstance(v, ListLatestMinedBlocksRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSD`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSD2
        if not isinstance(v, ListLatestMinedBlocksRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSD2`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSBSC
        if not isinstance(v, ListLatestMinedBlocksRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSBSC`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSZ
        if not isinstance(v, ListLatestMinedBlocksRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSZ`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSX
        if not isinstance(v, ListLatestMinedBlocksRIBSX):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSX`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBST
        if not isinstance(v, ListLatestMinedBlocksRIBST):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBST`")
        else:
            match += 1
        # validate data type: ListLatestMinedBlocksRIBSS
        if not isinstance(v, ListLatestMinedBlocksRIBSS):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListLatestMinedBlocksRIBSS`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ListLatestMinedBlocksRIBS with oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ListLatestMinedBlocksRIBS with oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ListLatestMinedBlocksRIBSB
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSBC
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSEC
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSE
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSL
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSD
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSD2
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSBSC
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSZ
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSX
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSX.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBST
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBST.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListLatestMinedBlocksRIBSS
        try:
            instance.actual_instance = ListLatestMinedBlocksRIBSS.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ListLatestMinedBlocksRIBS with oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListLatestMinedBlocksRIBS with oneOf schemas: ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListLatestMinedBlocksRIBSB, ListLatestMinedBlocksRIBSBC, ListLatestMinedBlocksRIBSBSC, ListLatestMinedBlocksRIBSD, ListLatestMinedBlocksRIBSD2, ListLatestMinedBlocksRIBSE, ListLatestMinedBlocksRIBSEC, ListLatestMinedBlocksRIBSL, ListLatestMinedBlocksRIBSS, ListLatestMinedBlocksRIBST, ListLatestMinedBlocksRIBSX, ListLatestMinedBlocksRIBSZ]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


