# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.get_transaction_details_by_transaction_id_from_callback_ribsx_value import GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue
from com.cryptoapis.rest_apis.sdk.models.get_xrp_ripple_transaction_details_by_transaction_idri_offer import GetXRPRippleTransactionDetailsByTransactionIDRIOffer
from com.cryptoapis.rest_apis.sdk.models.get_xrp_ripple_transaction_details_by_transaction_idri_receive import GetXRPRippleTransactionDetailsByTransactionIDRIReceive
from typing import Optional, Set
from typing_extensions import Self

class GetTransactionDetailsByTransactionIDFromCallbackRIBSX(BaseModel):
    """
    XRP
    """ # noqa: E501
    additional_data: StrictStr = Field(description="Represents additional data that may be needed.", alias="additionalData")
    destination_tag: Optional[StrictInt] = Field(default=None, description="Defines the destination tag value.", alias="destinationTag")
    offer: GetXRPRippleTransactionDetailsByTransactionIDRIOffer
    receive: GetXRPRippleTransactionDetailsByTransactionIDRIReceive
    sequence: StrictInt = Field(description="Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")
    status: StrictStr = Field(description="Defines the status of the transaction.")
    type: StrictStr = Field(description="Defines the type of the transaction.")
    value: GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue
    __properties: ClassVar[List[str]] = ["additionalData", "destinationTag", "offer", "receive", "sequence", "status", "type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receive
        if self.receive:
            _dict['receive'] = self.receive.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "destinationTag": obj.get("destinationTag"),
            "offer": GetXRPRippleTransactionDetailsByTransactionIDRIOffer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "receive": GetXRPRippleTransactionDetailsByTransactionIDRIReceive.from_dict(obj["receive"]) if obj.get("receive") is not None else None,
            "sequence": obj.get("sequence"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "value": GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj


