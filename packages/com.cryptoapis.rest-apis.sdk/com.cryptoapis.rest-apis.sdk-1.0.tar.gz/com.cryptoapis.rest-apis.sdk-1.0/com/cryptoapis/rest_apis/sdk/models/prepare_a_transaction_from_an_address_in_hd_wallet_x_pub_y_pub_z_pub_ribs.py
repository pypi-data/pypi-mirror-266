# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribsbsc import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribse import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribsec import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribst import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
from com.cryptoapis.rest_apis.sdk.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribsx import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

PREPAREATRANSACTIONFROMANADDRESSINHDWALLETXPUBYPUBZPUBRIBS_ONE_OF_SCHEMAS = ["PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX"]

class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS(BaseModel):
    """
    PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS
    """
    # data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE
    oneof_schema_1_validator: Optional[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE] = None
    # data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC
    oneof_schema_2_validator: Optional[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC] = None
    # data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC
    oneof_schema_3_validator: Optional[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC] = None
    # data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
    oneof_schema_4_validator: Optional[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST] = None
    # data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX
    oneof_schema_5_validator: Optional[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX] = None
    actual_instance: Optional[Union[PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX]] = None
    one_of_schemas: List[str] = Field(default=Literal["PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE
        if not isinstance(v, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE`")
        else:
            match += 1
        # validate data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC
        if not isinstance(v, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC`")
        else:
            match += 1
        # validate data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC
        if not isinstance(v, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC`")
        else:
            match += 1
        # validate data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
        if not isinstance(v, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST`")
        else:
            match += 1
        # validate data type: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX
        if not isinstance(v, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE
        try:
            instance.actual_instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC
        try:
            instance.actual_instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC
        try:
            instance.actual_instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
        try:
            instance.actual_instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX
        try:
            instance.actual_instance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS with oneOf schemas: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


