# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from com.cryptoapis.rest_apis.sdk.models.get_xrp_ripple_block_details_by_block_hash_ri_total_coins import GetXRPRippleBlockDetailsByBlockHashRITotalCoins
from com.cryptoapis.rest_apis.sdk.models.get_xrp_ripple_block_details_by_block_height_ri_total_fees import GetXRPRippleBlockDetailsByBlockHeightRITotalFees
from typing import Optional, Set
from typing_extensions import Self

class GetXRPRippleBlockDetailsByBlockHashRI(BaseModel):
    """
    GetXRPRippleBlockDetailsByBlockHashRI
    """ # noqa: E501
    block_hash: StrictStr = Field(description="Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.", alias="blockHash")
    block_height: StrictInt = Field(description="Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \"Genesis block\".", alias="blockHeight")
    next_block_hash: StrictStr = Field(description="Represents the hash of the next block. When this is the last block of the blockchain this value will be an empty string.", alias="nextBlockHash")
    previous_block_hash: StrictStr = Field(description="Represents the hash of the previous block, also known as the parent block.", alias="previousBlockHash")
    timestamp: StrictInt = Field(description="Defines the exact date/time when this block was mined in Unix Timestamp.")
    total_coins: GetXRPRippleBlockDetailsByBlockHashRITotalCoins = Field(alias="totalCoins")
    total_fees: GetXRPRippleBlockDetailsByBlockHeightRITotalFees = Field(alias="totalFees")
    transactions_count: StrictInt = Field(description="Represents the total number of all transactions as part of this block.", alias="transactionsCount")
    __properties: ClassVar[List[str]] = ["blockHash", "blockHeight", "nextBlockHash", "previousBlockHash", "timestamp", "totalCoins", "totalFees", "transactionsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetXRPRippleBlockDetailsByBlockHashRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_coins
        if self.total_coins:
            _dict['totalCoins'] = self.total_coins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fees
        if self.total_fees:
            _dict['totalFees'] = self.total_fees.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetXRPRippleBlockDetailsByBlockHashRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockHash": obj.get("blockHash"),
            "blockHeight": obj.get("blockHeight"),
            "nextBlockHash": obj.get("nextBlockHash"),
            "previousBlockHash": obj.get("previousBlockHash"),
            "timestamp": obj.get("timestamp"),
            "totalCoins": GetXRPRippleBlockDetailsByBlockHashRITotalCoins.from_dict(obj["totalCoins"]) if obj.get("totalCoins") is not None else None,
            "totalFees": GetXRPRippleBlockDetailsByBlockHeightRITotalFees.from_dict(obj["totalFees"]) if obj.get("totalFees") is not None else None,
            "transactionsCount": obj.get("transactionsCount")
        })
        return _obj


