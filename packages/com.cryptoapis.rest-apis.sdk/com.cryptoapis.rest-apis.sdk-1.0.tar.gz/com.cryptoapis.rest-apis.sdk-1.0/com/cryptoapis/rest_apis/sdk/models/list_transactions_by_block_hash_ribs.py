# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsb import ListTransactionsByBlockHashRIBSB
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsbc import ListTransactionsByBlockHashRIBSBC
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsbsc import ListTransactionsByBlockHashRIBSBSC
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsd import ListTransactionsByBlockHashRIBSD
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsd2 import ListTransactionsByBlockHashRIBSD2
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribse import ListTransactionsByBlockHashRIBSE
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsec import ListTransactionsByBlockHashRIBSEC
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsl import ListTransactionsByBlockHashRIBSL
from com.cryptoapis.rest_apis.sdk.models.list_transactions_by_block_hash_ribsz import ListTransactionsByBlockHashRIBSZ
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

LISTTRANSACTIONSBYBLOCKHASHRIBS_ONE_OF_SCHEMAS = ["ListTransactionsByBlockHashRIBSB", "ListTransactionsByBlockHashRIBSBC", "ListTransactionsByBlockHashRIBSBSC", "ListTransactionsByBlockHashRIBSD", "ListTransactionsByBlockHashRIBSD2", "ListTransactionsByBlockHashRIBSE", "ListTransactionsByBlockHashRIBSEC", "ListTransactionsByBlockHashRIBSL", "ListTransactionsByBlockHashRIBSZ"]

class ListTransactionsByBlockHashRIBS(BaseModel):
    """
    ListTransactionsByBlockHashRIBS
    """
    # data type: ListTransactionsByBlockHashRIBSB
    oneof_schema_1_validator: Optional[ListTransactionsByBlockHashRIBSB] = None
    # data type: ListTransactionsByBlockHashRIBSBC
    oneof_schema_2_validator: Optional[ListTransactionsByBlockHashRIBSBC] = None
    # data type: ListTransactionsByBlockHashRIBSL
    oneof_schema_3_validator: Optional[ListTransactionsByBlockHashRIBSL] = None
    # data type: ListTransactionsByBlockHashRIBSD
    oneof_schema_4_validator: Optional[ListTransactionsByBlockHashRIBSD] = None
    # data type: ListTransactionsByBlockHashRIBSD2
    oneof_schema_5_validator: Optional[ListTransactionsByBlockHashRIBSD2] = None
    # data type: ListTransactionsByBlockHashRIBSE
    oneof_schema_6_validator: Optional[ListTransactionsByBlockHashRIBSE] = None
    # data type: ListTransactionsByBlockHashRIBSEC
    oneof_schema_7_validator: Optional[ListTransactionsByBlockHashRIBSEC] = None
    # data type: ListTransactionsByBlockHashRIBSBSC
    oneof_schema_8_validator: Optional[ListTransactionsByBlockHashRIBSBSC] = None
    # data type: ListTransactionsByBlockHashRIBSZ
    oneof_schema_9_validator: Optional[ListTransactionsByBlockHashRIBSZ] = None
    actual_instance: Optional[Union[ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ]] = None
    one_of_schemas: List[str] = Field(default=Literal["ListTransactionsByBlockHashRIBSB", "ListTransactionsByBlockHashRIBSBC", "ListTransactionsByBlockHashRIBSBSC", "ListTransactionsByBlockHashRIBSD", "ListTransactionsByBlockHashRIBSD2", "ListTransactionsByBlockHashRIBSE", "ListTransactionsByBlockHashRIBSEC", "ListTransactionsByBlockHashRIBSL", "ListTransactionsByBlockHashRIBSZ"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ListTransactionsByBlockHashRIBS.model_construct()
        error_messages = []
        match = 0
        # validate data type: ListTransactionsByBlockHashRIBSB
        if not isinstance(v, ListTransactionsByBlockHashRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSB`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSBC
        if not isinstance(v, ListTransactionsByBlockHashRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSBC`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSL
        if not isinstance(v, ListTransactionsByBlockHashRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSL`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSD
        if not isinstance(v, ListTransactionsByBlockHashRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSD`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSD2
        if not isinstance(v, ListTransactionsByBlockHashRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSD2`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSE
        if not isinstance(v, ListTransactionsByBlockHashRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSE`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSEC
        if not isinstance(v, ListTransactionsByBlockHashRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSEC`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSBSC
        if not isinstance(v, ListTransactionsByBlockHashRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSBSC`")
        else:
            match += 1
        # validate data type: ListTransactionsByBlockHashRIBSZ
        if not isinstance(v, ListTransactionsByBlockHashRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTransactionsByBlockHashRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ListTransactionsByBlockHashRIBS with oneOf schemas: ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ListTransactionsByBlockHashRIBS with oneOf schemas: ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ListTransactionsByBlockHashRIBSB
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSBC
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSL
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSD
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSD2
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSE
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSEC
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSBSC
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTransactionsByBlockHashRIBSZ
        try:
            instance.actual_instance = ListTransactionsByBlockHashRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ListTransactionsByBlockHashRIBS with oneOf schemas: ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListTransactionsByBlockHashRIBS with oneOf schemas: ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


