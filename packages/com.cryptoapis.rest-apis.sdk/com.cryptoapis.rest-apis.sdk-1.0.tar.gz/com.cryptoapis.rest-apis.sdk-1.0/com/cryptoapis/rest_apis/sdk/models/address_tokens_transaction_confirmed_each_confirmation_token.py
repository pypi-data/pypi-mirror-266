# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_bep20 import AddressTokensTransactionConfirmedEachConfirmationBep20
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_erc20 import AddressTokensTransactionConfirmedEachConfirmationErc20
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_erc721 import AddressTokensTransactionConfirmedEachConfirmationErc721
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_omni import AddressTokensTransactionConfirmedEachConfirmationOmni
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_trc20 import AddressTokensTransactionConfirmedEachConfirmationTrc20
from com.cryptoapis.rest_apis.sdk.models.address_tokens_transaction_confirmed_each_confirmation_trc721 import AddressTokensTransactionConfirmedEachConfirmationTrc721
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

ADDRESSTOKENSTRANSACTIONCONFIRMEDEACHCONFIRMATIONTOKEN_ONE_OF_SCHEMAS = ["AddressTokensTransactionConfirmedEachConfirmationBep20", "AddressTokensTransactionConfirmedEachConfirmationErc20", "AddressTokensTransactionConfirmedEachConfirmationErc721", "AddressTokensTransactionConfirmedEachConfirmationOmni", "AddressTokensTransactionConfirmedEachConfirmationTrc20", "AddressTokensTransactionConfirmedEachConfirmationTrc721"]

class AddressTokensTransactionConfirmedEachConfirmationToken(BaseModel):
    """
    AddressTokensTransactionConfirmedEachConfirmationToken
    """
    # data type: AddressTokensTransactionConfirmedEachConfirmationErc20
    oneof_schema_1_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationErc20] = None
    # data type: AddressTokensTransactionConfirmedEachConfirmationErc721
    oneof_schema_2_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationErc721] = None
    # data type: AddressTokensTransactionConfirmedEachConfirmationOmni
    oneof_schema_3_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationOmni] = None
    # data type: AddressTokensTransactionConfirmedEachConfirmationBep20
    oneof_schema_4_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationBep20] = None
    # data type: AddressTokensTransactionConfirmedEachConfirmationTrc20
    oneof_schema_5_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationTrc20] = None
    # data type: AddressTokensTransactionConfirmedEachConfirmationTrc721
    oneof_schema_6_validator: Optional[AddressTokensTransactionConfirmedEachConfirmationTrc721] = None
    actual_instance: Optional[Union[AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721]] = None
    one_of_schemas: List[str] = Field(default=Literal["AddressTokensTransactionConfirmedEachConfirmationBep20", "AddressTokensTransactionConfirmedEachConfirmationErc20", "AddressTokensTransactionConfirmedEachConfirmationErc721", "AddressTokensTransactionConfirmedEachConfirmationOmni", "AddressTokensTransactionConfirmedEachConfirmationTrc20", "AddressTokensTransactionConfirmedEachConfirmationTrc721"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddressTokensTransactionConfirmedEachConfirmationToken.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationErc20
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationErc20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationErc20`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationErc721
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationErc721):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationErc721`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationOmni
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationOmni):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationOmni`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationBep20
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationBep20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationBep20`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationTrc20
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationTrc20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationTrc20`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionConfirmedEachConfirmationTrc721
        if not isinstance(v, AddressTokensTransactionConfirmedEachConfirmationTrc721):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionConfirmedEachConfirmationTrc721`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddressTokensTransactionConfirmedEachConfirmationToken with oneOf schemas: AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddressTokensTransactionConfirmedEachConfirmationToken with oneOf schemas: AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationErc20
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationErc20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationErc721
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationErc721.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationOmni
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationOmni.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationBep20
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationBep20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationTrc20
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationTrc20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionConfirmedEachConfirmationTrc721
        try:
            instance.actual_instance = AddressTokensTransactionConfirmedEachConfirmationTrc721.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddressTokensTransactionConfirmedEachConfirmationToken with oneOf schemas: AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddressTokensTransactionConfirmedEachConfirmationToken with oneOf schemas: AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni, AddressTokensTransactionConfirmedEachConfirmationTrc20, AddressTokensTransactionConfirmedEachConfirmationTrc721]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


