# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GetExchangeRateByAssetsIDsRI(BaseModel):
    """
    GetExchangeRateByAssetsIDsRI
    """ # noqa: E501
    calculation_timestamp: StrictInt = Field(description="Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp. Oldest possible timestamp is 30 days.", alias="calculationTimestamp")
    from_asset_id: StrictStr = Field(description="Defines the base asset Reference ID to get a rate for.", alias="fromAssetId")
    from_asset_symbol: StrictStr = Field(description="Defines the base asset symbol to get a rate for.", alias="fromAssetSymbol")
    rate: StrictStr = Field(description="Defines the exchange rate between assets calculated by weighted average of the last trades in every exchange for the last 24 hours by giving more weight to exchanges with higher volume.")
    to_asset_id: StrictStr = Field(description="Defines the relation asset Reference ID in which the base asset rate will be displayed.", alias="toAssetId")
    to_asset_symbol: StrictStr = Field(description="Defines the relation asset symbol in which the base asset rate will be displayed.", alias="toAssetSymbol")
    __properties: ClassVar[List[str]] = ["calculationTimestamp", "fromAssetId", "fromAssetSymbol", "rate", "toAssetId", "toAssetSymbol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetExchangeRateByAssetsIDsRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetExchangeRateByAssetsIDsRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculationTimestamp": obj.get("calculationTimestamp"),
            "fromAssetId": obj.get("fromAssetId"),
            "fromAssetSymbol": obj.get("fromAssetSymbol"),
            "rate": obj.get("rate"),
            "toAssetId": obj.get("toAssetId"),
            "toAssetSymbol": obj.get("toAssetSymbol")
        })
        return _obj


