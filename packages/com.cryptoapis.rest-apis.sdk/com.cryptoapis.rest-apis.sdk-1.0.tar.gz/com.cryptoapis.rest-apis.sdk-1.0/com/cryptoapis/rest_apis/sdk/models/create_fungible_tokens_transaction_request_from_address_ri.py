# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from com.cryptoapis.rest_apis.sdk.models.create_coins_transaction_request_from_address_ri_senders import CreateCoinsTransactionRequestFromAddressRISenders
from com.cryptoapis.rest_apis.sdk.models.create_fungible_tokens_transaction_request_from_address_ri_recipients_inner import CreateFungibleTokensTransactionRequestFromAddressRIRecipientsInner
from com.cryptoapis.rest_apis.sdk.models.create_fungible_tokens_transaction_request_from_address_ris import CreateFungibleTokensTransactionRequestFromAddressRIS
from typing import Optional, Set
from typing_extensions import Self

class CreateFungibleTokensTransactionRequestFromAddressRI(BaseModel):
    """
    CreateFungibleTokensTransactionRequestFromAddressRI
    """ # noqa: E501
    callback_secret_key: StrictStr = Field(description="Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).", alias="callbackSecretKey")
    callback_url: StrictStr = Field(description="Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.", alias="callbackUrl")
    fee_priority: StrictStr = Field(description="Represents the fee priority of the automation, whether it is \"slow\", \"standard\" or \"fast\".", alias="feePriority")
    note: Optional[StrictStr] = Field(default=None, description="Represents an optional note to add a free text in, explaining or providing additional detail on the transaction request.")
    recipients: List[CreateFungibleTokensTransactionRequestFromAddressRIRecipientsInner] = Field(description="Defines the destination for the transaction, i.e. the recipient(s).")
    senders: CreateCoinsTransactionRequestFromAddressRISenders
    token_type_specific_data: CreateFungibleTokensTransactionRequestFromAddressRIS = Field(alias="tokenTypeSpecificData")
    transaction_request_id: StrictStr = Field(description="Represents a unique identifier of the transaction request (the request sent to make a transaction), which helps in identifying which callback and which `referenceId` concern that specific transaction request.", alias="transactionRequestId")
    __properties: ClassVar[List[str]] = ["callbackSecretKey", "callbackUrl", "feePriority", "note", "recipients", "senders", "tokenTypeSpecificData", "transactionRequestId"]

    @field_validator('fee_priority')
    def fee_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['slow', 'standard', 'fast']):
            raise ValueError("must be one of enum values ('slow', 'standard', 'fast')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFungibleTokensTransactionRequestFromAddressRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of senders
        if self.senders:
            _dict['senders'] = self.senders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_type_specific_data
        if self.token_type_specific_data:
            _dict['tokenTypeSpecificData'] = self.token_type_specific_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFungibleTokensTransactionRequestFromAddressRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackSecretKey": obj.get("callbackSecretKey"),
            "callbackUrl": obj.get("callbackUrl"),
            "feePriority": obj.get("feePriority"),
            "note": obj.get("note"),
            "recipients": [CreateFungibleTokensTransactionRequestFromAddressRIRecipientsInner.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "senders": CreateCoinsTransactionRequestFromAddressRISenders.from_dict(obj["senders"]) if obj.get("senders") is not None else None,
            "tokenTypeSpecificData": CreateFungibleTokensTransactionRequestFromAddressRIS.from_dict(obj["tokenTypeSpecificData"]) if obj.get("tokenTypeSpecificData") is not None else None,
            "transactionRequestId": obj.get("transactionRequestId")
        })
        return _obj


