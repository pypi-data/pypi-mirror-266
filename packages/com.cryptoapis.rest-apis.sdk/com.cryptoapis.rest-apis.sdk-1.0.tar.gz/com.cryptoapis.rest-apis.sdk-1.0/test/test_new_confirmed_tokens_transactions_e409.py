# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

    The version of the OpenAPI document: 2023-04-25
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from com.cryptoapis.rest_apis.sdk.models.new_confirmed_tokens_transactions_e409 import NewConfirmedTokensTransactionsE409

class TestNewConfirmedTokensTransactionsE409(unittest.TestCase):
    """NewConfirmedTokensTransactionsE409 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NewConfirmedTokensTransactionsE409:
        """Test NewConfirmedTokensTransactionsE409
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NewConfirmedTokensTransactionsE409`
        """
        model = NewConfirmedTokensTransactionsE409()
        if include_optional:
            return NewConfirmedTokensTransactionsE409(
                code = 'already_exists',
                message = 'The specified resource already exists.',
                details = [
                    com.cryptoapis.rest_apis.sdk.models.banned_ip_address_details_inner.BannedIpAddress_details_inner(
                        attribute = 'attribute which content caused the error', 
                        message = 'message describing the error', )
                    ]
            )
        else:
            return NewConfirmedTokensTransactionsE409(
                code = 'already_exists',
                message = 'The specified resource already exists.',
        )
        """

    def testNewConfirmedTokensTransactionsE409(self):
        """Test NewConfirmedTokensTransactionsE409"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
