# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_idxs.ipynb.

# %% auto 0
__all__ = ['getcidx', 'getaidx', 'getiloc', 'getloc', 'getcats', 'getbiloc', 'wherecat', 'cateqidx', 'wherecats', 'catseqidx',
           'getciloc', 'geticat', 'idxiloc', 'lociloc', 'getsub']

# %% ../nbs/20_idxs.ipynb 6
#| export


# %% ../nbs/20_idxs.ipynb 8
from typing import TypeGuard, Optional

# %% ../nbs/20_idxs.ipynb 11
#| export

# %% ../nbs/20_idxs.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/20_idxs.ipynb 15
#| export


# %% ../nbs/20_idxs.ipynb 17
#| export


# %% ../nbs/20_idxs.ipynb 19
from nlit import CATEGORY, CATEGORIES

from quac import (
    dataframe as DataFrame, ptdataset as Dataset, indexlike as IndexLike, bools as IterBool, nparray as NPArray,
    boolindex as BoolIndex, numstr as NumStr, boolq as BoolQ, catindexq as CatIndexQ, boolindexq as BoolIndexQ
)
from chck import (
    isdf, isseries, iscatidx, isboolidx, isidxlike, 
    isint, isiter, isints, isslc, isnone, isidx,
)
from atup import vargs
from asto import asarng, slice2list
from excs import HushedErrors

# %% ../nbs/20_idxs.ipynb 21
from .mock import dummydf
from .atyp import DataFrameLike
from .attr import hascat, getindex, getcategories, hasindex, hasastype, hascategories
from .util import getdfidx, wrapidx, idxisin, mergebools, safeloc, safeiloc, ascat, ascidx

# %% ../nbs/20_idxs.ipynb 27
def getcidx(dl: DataFrameLike = None, cidx: CatIndexQ = None, *args: DataFrameLike) -> CatIndexQ:
    '''
    Retrieve the categorical index from the specified index, DataFrame, or DataSet.

    Parameters
    ----------
    df : DataFrameLike, optional
        The DataFrame whose index is to be retrieved and checked.

    cidx : CatIndexQ, optional
        The integer locations to select rows from the DataFrame.
    
    Examples
    --------
    >>> df = dummydf()
    >>> getcidx(df)
    CategoricalIndex(
        ['b', 'a', 'c', 'b', 'a', 'a', 'b', 'a', 'b', 'b'], 
        categories=['a', 'b', 'c'], ordered=False, dtype='category')


    Returns
    -------
    IndexLike | None
        The categorical index, if available, from the given sources.

    Notes
    -----
    - The function first checks if `cidx` is a categorical index.
    - If not, it retrieves the index from the DataFrame or DataSet and converts it to a categorical index.
    '''
    flag = iscatidx(cidx) or (isseries(cidx) and hascat(cidx))
    return ascidx(cidx if flag else getdfidx(dl, *args))

# %% ../nbs/20_idxs.ipynb 29
def getaidx(dl: DataFrameLike = None, idx: IndexLike | None = None, *args: DataFrameLike) -> IndexLike | None:
    '''Retrieve the DataFrame's index by integer location.

    Parameters
    ----------
    df : DataFrame
        The DataFrame whose index is to be accessed.
    
    idx : IndexLike
        The integer locations to select index values from the DataFrame.
        
    Returns
    -------
    IndexLike | None
        The index values at the specified integer locations.

    Examples
    --------
    >>> df = dummydf()
    >>> getaidx(df, 1), getaidx(df, 2), getaidx(df, [1]), getaidx(df, [7, 4])
    (1, 2, array([1]), array([7, 4]))

    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['x', 'y', 'z'])
    >>> getaidx(df, [0, 2])
    Index(['x', 'z'], dtype='object')
    
    Notes
    -----
    - This function is for when you're interested in the index values at certain positions, not the DataFrame rows.
    '''
    return asarng(getdfidx(dl, *args))[idx]

# %% ../nbs/20_idxs.ipynb 31
def getiloc(dl: DataFrameLike, idx: IndexLike = None, *args: DataFrameLike) -> list:
    '''
    Retrieve rows from a DataFrame or DataSet based on index locations.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose corresponding DataFrame rows are to be retrieved.

    ds : DatasetQ, optional
        DataSet to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    list
        A list containing the DataFrame rows corresponding to the given index locations.

    Examples
    --------
    >>> df = dummydf()
    >>> getiloc(df, [1, 2, 3])
        x	y	z
    b	0	0	2
    a	2	0	2
    c	2	2	0
    

    Notes
    -----
    - Utilizes `getaidx` to retrieve the index values at specified locations and then `dfdsiloc` to get the rows.
    '''      
    return safeiloc(getaidx(dl, wrapidx(idx), *args), dl, *args)

# %% ../nbs/20_idxs.ipynb 35
def getloc(
    dl: DataFrameLike = None,
    idx: IndexLike | None = None,
    *args: DataFrameLike,
    valid: IndexLike | None = None
) -> DataFrame:    
    '''
    Get rows of a DataFrame by location based on the provided index, DataFrame, or Dataset.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.

    didx : IndexLike
        Reference index or a list of indices whose integer locations to be checked again for filtering.

    ds: DatasetQ, optional
        Dataset whose DataFrame is to be used.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> getloc(df, 'c')    
        x	y	z
    c	0	1	2    
    
    >>> getloc(df, ['a'])    
        x	y	z
    a	2	0	2
    a	2	0	2
    a	1	0	0

    >>> getloc(df, ['z'])
        x	y	z

    Notes
    -----
    - The function filters out indices not present in the DataFrame's index.
    - It returns the integer locations of the filtered indices within the DataFrame.
    '''
    if isnone(valid): valid = getdfidx(dl, *args)
    idx = idxisin(wrapidx(idx), dl, *args, vals=valid)
    return safeloc(idx, dl, *args)

# %% ../nbs/20_idxs.ipynb 39
def getcats(dl: DataFrameLike = None, cidx: CatIndexQ = None, *args: DataFrameLike) -> IndexLike | None:
    '''
    Retrieve the categories of a categorical index from the specified index, DataFrame, or DataSet.

    Parameters
    ----------
    df : DataFrameQ, optional
        The DataFrame whose index's categories are to be retrieved.

    cidx : CatIndexQ, optional
        The index to retrieve categories from if it's a categorical index.
            
    Returns
    -------
    IndexLike | None
        The categories of the categorical index, if available.

    Examples
    --------
    >>> df = dummydf()
    >>> getcats(df), getcats(df, None), getcats(df, [1])
    (Index(['a', 'b', 'c'], dtype='object'),
     Index(['a', 'b', 'c'], dtype='object'),
     Index(['a', 'b', 'c'], dtype='object'))

    Notes
    -----
    - This function utilizes `getcidx` to first ensure the index is categorical.
    '''
    cidx = getcidx(dl, cidx, *args)
    cats = getattr(cidx, CATEGORIES, None)
    if cats is None: cats = getcategories(cidx)
    if isidx(cats): return cats
    return pd.Index([])


# %% ../nbs/20_idxs.ipynb 41
def getbiloc(bidx: BoolIndexQ, other: IndexLike | None = None) -> BoolIndex:
    '''
    Get integer locations for a boolean index.

    Parameters
    ----------
    bidx : BoolIndex
        The boolean index to find integer locations for.
        
    other : IndexLike | None, optional
        Another index to validate the length of the boolean index against.

    Returns
    -------
    BoolIndex
        An array of integer locations where the boolean index is True.

    Examples
    --------
    >>> getbiloc([True, False, True]), getbiloc([True, False, True], [1, 2, 3]), getbiloc([True, False, True], [1, 2, 3, 4])
    (array([0, 2]), array([0, 2]), array([], dtype=float64))

    Notes
    -----
    - This function checks if the provided `bidx` is a valid boolean index and optionally compares its length against another index.
    '''
    return np.where(bidx)[0] if isboolidx(bidx, other) else np.empty(0, dtype=bool)


# %% ../nbs/20_idxs.ipynb 45
def wherecat(
    dl: DataFrameLike, cat: NumStr, cidx: CatIndexQ = None, *args: DataFrameLike
    # df: DataFrame, cat: NumStr, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None
) -> BoolIndex:
    '''
    Convert a categorical index value to a boolean index in a DataFrame.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cat : NumStr
        The category to convert to a boolean index.

    cidx : CatIndexQ, optional
        The categorical index to be converted.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index where True indicates the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> wherecat(df, 'a'), wherecat(df, 'b'), wherecat(df, 'f'), wherecat(df, 100), 
    (array([False, False,  True, False,  True, False, False, False,  True,
        False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - The function uses `getcidx` to retrieve the categorical index and then identifies the locations of the specified category.
    '''
    try: return getcidx(dl, cidx, *args).get_loc(cat)
    except KeyError: return np.zeros_like(getdfidx(dl, *args), dtype=bool)


# %% ../nbs/20_idxs.ipynb 47
def cateqidx(
    dl: DataFrameLike, cat: NumStr, cidx: CatIndexQ = None, *args: DataFrameLike
) -> BoolIndex:
    '''
    Check where a categorical index has a specified category.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cat : NumStr
        The category to check for in the categorical index.

    cidx : IndexLike | None, optional
        The categorical index to be checked.

    Returns
    -------
    BoolIndex
        A boolean index indicating the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> cateqidx(df, 'a'), cateqidx(df, 'b'), cateqidx(df, 'f'), cateqidx(df, 100), 
    (array([False, False,  True, False,  True, False, False, False,  True,
        False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function returns a boolean index for a single category, indicating where it is present in the categorical index.
    '''
    return getcidx(dl, cidx, *args) == cat

# %% ../nbs/20_idxs.ipynb 50
def wherecats(
    dl: DataFrameLike, cats: NumStr | IndexLike, cidx: CatIndexQ = None, *args: DataFrameLike
):
    '''
    Get a boolean index representing the presence of specified categories in a categorical index.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cats : NumStr | IndexLike
        The categories to be converted to a boolean index.

    cidx : CatIndexQ, optional
        The categorical index to be checked.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index where True indicates the presence of the specified categories.

    Examples
    --------
    >>> df = dummydf()    
    >>> wherecats(df, 'a'), wherecats(df, 'b'), wherecats(df, 'f'), wherecats(df, 100)
    >>> wherecats(df, ['a', 'b']), wherecats(df, ['b', 'a']), wherecats(df, ['a', 'f']), wherecats(df, ['b', 100]), wherecats(df, ['z', 100])
    (array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function handles multiple categories and merges their boolean indexes into one.
    - Useful for filtering data based on multiple category values.
    '''    
    bidxs = [cateqidx(dl, cat, cidx, *args) for cat in wrapidx(cats)]
    return mergebools(bidxs, dl, *args)

# %% ../nbs/20_idxs.ipynb 51
def catseqidx(
    dl: DataFrameLike, cats: NumStr | IndexLike, cidx: CatIndexQ = None, *args: DataFrameLike
) -> BoolIndex:
    '''
    Check where a categorical index has a specified category.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cats : NumStr | IndexLike
        The categories to check for in the categorical index.
        
    cidx : IndexLike | None, optional
        The categorical index to be checked.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index indicating the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> catseqidx(df, 'a'), catseqidx(df, ['a']), catseqidx(df, ['a', 'b']), catseqidx(df, ['f'])
    (array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function returns a boolean index for a single category, indicating where it is present in the categorical index.
    '''
    return getcidx(dl, cidx, *args).isin(wrapidx(cats))

# %% ../nbs/20_idxs.ipynb 57
def getciloc(
    dl: DataFrameLike, cats: NumStr | IndexLike, cidx: CatIndexQ = None, *args: DataFrameLike
) -> IndexLike:
    '''
    Retrieve integer locations of specific categories in a DataFrame's index.

    Parameters
    ----------
    df : DataFrame
        The DataFrame to operate on.
        
    cats : NumStr | IndexLike
        The categories whose index locations are to be found.

    cidx : CatIndexQ, optional
        The categorical index to be searched.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    IndexLike
        An array of integer locations corresponding to the specified categories.

    Examples
    --------
    >>> df = dummydf()
    >>> getciloc(df, ['a', 'f']), getciloc(df, ['a', 'b']), getciloc(df, ['f', 100])
    (array([2, 4, 8]), array([1, 2, 4, 5, 8, 9]), array([], dtype=int64))
    
    Notes
    -----
    - This function is an extension of `getciloc`, capable of handling multiple categories.
    - It is useful for obtaining the positions of rows that belong to multiple categories.
    '''
    bidx = wherecats(dl, cats, cidx, *args)
    iloc = getbiloc(bidx, getdfidx(dl, *args))    
    return iloc

# %% ../nbs/20_idxs.ipynb 62
def geticat(
    dl: DataFrameLike, idx: IndexLike | None = None, *args: DataFrameLike, unique: BoolQ = True, cats: CatIndexQ = None
    # df: DataFrameQ = None, idx: IndexLike | None = None, ds: DatasetQ = None, logger: LoggerQ = None,
    # unique: BoolQ = True, categories: CatIndexQ = None
) -> IndexLike:
    '''
    Retrieve unique row indices corresponding to a category or a set of categories.

    Parameters
    ----------    
    dl : DataFrameQ, optional
        DataFrame to operate on.

    idx : IndexLike
        A category index, a list of category indices, or a slice object representing category indices.

    unique : BoolQ, optional
        If True, returns unique indices. Default is True.
        
    categories : optional
        Predefined categories to use. If None, categories are extracted from the DataFrame or DataSet.

    Returns
    -------
    IndexLike
        An array or list of indices corresponding to the specified categories.

    Examples
    --------
    >>> df = dummydf()
    >>> geticat(df, 1), geticat(df, [1, 2])
    (['b'], ['b', 'c'])
    >>> geticat(df, 'a'), geticat(df, ['a'])
    (['a'], ['a'])


    Notes
    -----
    - The function first converts `idx` to a list of indices if it is a slice.
    - It then checks if these indices are within the range of available categories and retrieves them accordingly.
    - If `unique` is True, it returns a sorted list of unique categories.
    '''

    # recall that slice(0, 3, 1) --> [0, 1, 2] so indexing will be the same
    if isslc(idx): idx = slice2list(idx)
    
    cidx = getcidx(dl, None, *args) # the categorical index of the df
    cats = np.array(getcats(dl, cats or cidx, *args))
    ncats = len(cats) # the categories of the df

    # get the n-th category or # get the catgories at iloc idx
    if (isint(idx) or isints(idx)):
        idx = list(filter(lambda x: x < ncats, wrapidx(idx)))
        cats = cats[idx]
    
    # non-integer(s) index
    else:
        bidx = wherecats(dl, idx, cidx, *args)
        cats = cidx[bidx]

    if unique and isiter(cats): 
        cats = sorted(np.unique(cats))
    return cats

# %% ../nbs/20_idxs.ipynb 65
def idxiloc(
    dl: DataFrameLike, idx: IndexLike, *args: DataFrameLike,
    # df: DataFrame, idx: IndexLike, ds: DatasetQ = None,  logger: LoggerQ = None,
) -> NPArray:
    '''
    Convert an index to its integer locations within a DataFrame.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.

    ds : DatasetQ, optional
        Dataset to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> idxiloc(df, 0), idxiloc(df, 1), idxiloc(df, [1])
    (array([], dtype=int64), array([], dtype=int64), array([], dtype=int64))
    >>> idxiloc(df, 'a'), idxiloc(df, ['a']), idxiloc(df, ['a', 'z']), idxiloc(df, [100, 'z'])
    (array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]), array([], dtype=int64))



    Notes
    -----
    - The function filters out indices not present in the DataFrame's index.
    - It returns the integer locations of the filtered indices within the DataFrame.
    '''
    dfidx = getdfidx(dl, *args)    
    dfsub = getloc(dl, idx, *args, valid=dfidx)
    idx = dfidx.isin(dfsub.index)
    return asarng(dl)[idx]

# %% ../nbs/20_idxs.ipynb 68
def lociloc(
    dl: DataFrameLike, idx: IndexLike, *args: DataFrameLike,
    # df: DataFrame, idx: IndexLike,  ds: DatasetQ = None, logger: LoggerQ = None,
) -> NPArray:
    '''
    Retrieve integer locations for given index values within a DataFrame.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.
    
    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.
    
    ds : DatasetQ, optional
        Dataset to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> idxiloc(df, 'a'), idxiloc(df, ['a', ]), lociloc(df, 'a'), lociloc(df, ['a', ])
    (array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]))

    Notes
    -----
    - Handles both single and multiple index values.
    - It uses different strategies for single values and list of indices to find their integer locations.
    '''
    
    idxlen = len(vargs(idx))
    if idxlen == 1 and not isidxlike(idx):        
        bidx = getbiloc(wherecat(dl, idx, *args))
        iloc = asarng(dl)[bidx]
    else:
        dfidx = getdfidx(dl, *args)
        iloc = dfidx.get_indexer_non_unique(idx)[0]
        iloc = np.array([n for n in iloc if n != -1])
        if len(iloc) == 0: iloc = np.empty(0)
    return iloc

# %% ../nbs/20_idxs.ipynb 73
def getsub(
    dl: DataFrameLike, idx: IndexLike, *args: DataFrameLike,
    # df: DataFrame, idx: IndexLike, ds: DatasetQ = None, logger: LoggerQ = None
) -> list:
    '''
    Retrieve rows from a DataFrame or DataSet based on a given index or a set of indices.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.
    idx : IndexLike
        Index or a list of indices whose corresponding DataFrame rows are to be retrieved.
    ds : DatasetQ, optional
        DataSet to operate on.
    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    list
        A list containing the DataFrame rows corresponding to the given indices.

    Examples
    --------
    >>> df = dummydf()
    >>> getlocsub(df, ['a'])
        x	y	z
    a	2	0	2
    a	2	0	2
    a	1	0	0

    Notes
    -----
    - Attempts to retrieve rows using `idxiloc` and `lociloc`.
    - If indices are not found, raises an error through `HushedErrors`.
    '''
    errs = HushedErrors()
    dres = pd.DataFrame()

    ifns = (idxiloc, getiloc), (lociloc, getiloc), (geticat, getloc)
    for indexer, extractor in ifns:
        try:
            iloc = indexer(dl, idx, *args)
            dres = iloc if isdf(iloc) else extractor(dl, iloc, *args)
            if not dres.empty: return dres
        except (IndexError, KeyError) as err: errs.add(err)

    errs.call()
    return dres

# %% ../nbs/20_idxs.ipynb 77
#| export
