# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_enum.ipynb.

# %% auto 0
__all__ = ['DataFormat', 'SampleOutput', 'LocReturn', 'SampleCategoriesMethod']

# %% ../nbs/02_enum.ipynb 6
from enum import IntEnum, StrEnum, auto

# %% ../nbs/02_enum.ipynb 8
from typing import TypeVar, TypeGuard
from typing import overload

# %% ../nbs/02_enum.ipynb 11
#| export

# %% ../nbs/02_enum.ipynb 13
try: import numpy as np
except: ...
try: import pandas as pd
except: ...
try: import torch
except: ...

# %% ../nbs/02_enum.ipynb 15
#| export


# %% ../nbs/02_enum.ipynb 17
#| export


# %% ../nbs/02_enum.ipynb 19
from nlit import DF, DS, DX, LOC, NAME, ILOC, ICAT, INDEX, CATEGORY, ASTYPE, CAT, CATEGORIES, CODES, SHAPE
from chck import (
    isdf, isds, iscall, isseries, iscatidx,  isindexlike, iscataccessor, iscatacclike, guard_any
)
from quac import dataframe, ptdataset
from astr import astr, ReturnOption

# %% ../nbs/02_enum.ipynb 21
from .mock import dummydf

# %% ../nbs/02_enum.ipynb 23
class DataFormat(StrEnum):
    '''Format of data to return.'''
    np = auto()
    pt = auto()
    pd = auto()
    numpy = np
    torch = pt
    pandas = pd
    pytorch = pt

# %% ../nbs/02_enum.ipynb 24
class SampleOutput(StrEnum):
    '''What parts of the sample to return.'''
    x = auto()
    y = auto()
    xy = auto()
    samples = x
    targets = y
    inputs = x
    labels = y
    paired = xy
    labeled = xy

# %% ../nbs/02_enum.ipynb 25
class LocReturn(StrEnum):
    '''What kind of location to return after an operation.
    
    Attributes
    ----------
    loc : 'loc'
        The default index returned following an operation.
        
    bloc : 'bloc'
        A boolean index with the same number of rows as the calling object e.g.
        `pd.Series([True, True, False, ..., False, True])`
    
    iloc : 'iloc'
        An index of just the integer indexes for the rows of the calling object.
    
    bools : 'bloc'
        An alias for `bloc`.
    
    index : 'iloc'
        An alias for `iloc`.
    '''
    loc = auto()
    bloc = auto()
    iloc = auto()
    bools = bloc
    index = iloc

# %% ../nbs/02_enum.ipynb 26
class SampleCategoriesMethod(IntEnum):
    '''The order of operations for how to sample categorical data from a pandas DataFrame.
    
    Attributes
    ----------
    sample_split_stack : 1
        Groupby categories, then sample, split into the number of categories, then stack.
        This method is straightforward and effective for balanced data sets but may introduce overhead 
        for very large DataFrames due to the splitting and stacking operations.
    index_sample_stack : 2
        Get each category's indexes, subset, then sample, and finally stack.
        This method can be more efficient for large DataFrames with a significant number of categories, 
        as it operates directly on indexes and avoids the potential overhead of splitting and stacking.
    sample_group_stack : 3
        Groupby categories, then sample, get each group, then stack.
        This method is efficient for DataFrames where direct access to groups is faster and can be more memory efficient
        than the split and stack approach, especially for unevenly distributed categories.
    '''
    sample_split_stack = auto() # 1
    index_sample_stack = auto() # 2
    sample_group_stack = auto() # 3
    permute_indexes = auto() # 4

# %% ../nbs/02_enum.ipynb 28
#| export
