# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_attr.ipynb.

# %% auto 0
__all__ = ['isdx', 'getshape', 'getname', 'hasdf', 'getdf', 'getds', 'hasds', 'getdx', 'hasdx', 'getloc', 'hasloc', 'getiloc',
           'hasiloc', 'getcat', 'hascat', 'geticat', 'hasicat', 'getindex', 'hasindex', 'getastype', 'hasastype',
           'hascodes', 'getcodes', 'hascategories', 'getcategories']

# %% ../nbs/02_attr.ipynb 6
#| export


# %% ../nbs/02_attr.ipynb 8
from typing import TypeGuard

# %% ../nbs/02_attr.ipynb 11
#| export

# %% ../nbs/02_attr.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/02_attr.ipynb 15
#| export


# %% ../nbs/02_attr.ipynb 17
#| export


# %% ../nbs/02_attr.ipynb 19
from nlit import DF, DS, DX, LOC, NAME, ILOC, ICAT, INDEX, CATEGORY, ASTYPE, CAT, CATEGORIES, CODES, SHAPE
from chck import (
    isdf, isds, iscall, isseries, iscatidx,  isindexlike, iscataccessor, iscatacclike, guard_any
)
from quac import dataframe, ptdataset
from astr import astr, ReturnOption

# %% ../nbs/02_attr.ipynb 21
from .mock import dummydf

# %% ../nbs/02_attr.ipynb 24
@guard_any(isdf, isds)
def isdx(x) -> TypeGuard[dataframe | ptdataset]:
    ...

# %% ../nbs/02_attr.ipynb 25
class getshape(astr, attr=SHAPE, ret_option=()):
    '''Attribute string for `.shape`'''

class getname(astr, attr=NAME, ret_option=ReturnOption.self):
    '''Attribute string for `.name`'''

class hasdf(astr, attr = DF, attr_guard = isdf, ret_option = ReturnOption.has):
    '''Check for `.df`'''
    
class getdf(astr, attr = DF, attr_guard = isdf, ret_option = ReturnOption.self):
    '''Retrieve attribute `.df`'''

class getds(astr, attr = DS, attr_guard = isds, ret_option = ReturnOption.self):
    '''Retrieve attribute `.ds`'''
    
class hasds(astr, attr = DS, attr_guard = isds, ret_option = ReturnOption.has):
    '''Check for `.ds`'''

class getdx(astr, attr = DX, attr_guard = isdx, ret_option = ReturnOption.self):
    '''Retrieve attribute `.dx`'''

class hasdx(astr, attr = DX, attr_guard = isdx, ret_option = ReturnOption.has):
    '''Check for `.dx`'''
    
class getloc(astr, attr = LOC, item_guard = isdf):
    '''Retrieve attribute `.loc`'''
    
class hasloc(astr, attr = LOC, item_guard = isdf, ret_option = ReturnOption.has):
    '''Check for `.loc`'''

class getiloc(astr, attr = ILOC, item_guard = isdf):
    '''Retrieve attribute `.iloc`'''
    
class hasiloc(astr, attr = ILOC, item_guard = isdf, ret_option = ReturnOption.has):
    '''Check for `.icat`'''

class getcat(astr, attr = CAT, attr_guard = iscatacclike, item_guard = isdf, ret_option = ReturnOption.self):
    '''Retrieve attribute `.cat`'''

class hascat(astr, attr = CAT, ret_option = ReturnOption.has):
    '''Check for `.cat`'''

class geticat(astr, attr = ILOC, item_guard = isdf):
    '''Retrieve attribute `.icat`'''
    
class hasicat(astr, attr = ICAT, item_guard = isdf, ret_option = ReturnOption.has):
    '''Check for `.icat`'''

class getindex(astr, attr = INDEX):
    '''Retrieve attribute `.index`'''

class hasindex(astr, attr = INDEX, ret_option = ReturnOption.has):
    '''Check for `.index`'''
    
class getastype(astr, attr = ASTYPE, attr_guard = iscall, ret_option = ReturnOption.call):
    '''Retrieve attribute `.astype(...)`'''

class hasastype(astr, attr = ASTYPE, attr_guard = iscall, ret_option = ReturnOption.has):
    '''Check for attribute `.astype(...)`'''
    
class hascodes(astr, attr = CODES, ret_option = ReturnOption.has):
    '''Check for `.codes`'''

class getcodes(astr, attr = CODES, attr_guard = isindexlike, ret_option = ReturnOption.call, default = 0):
    '''Retrieve attribute `.codes`'''
    @classmethod
    def get(cls: tuple, item: object | pd.Series | pd.Index) -> tuple | None:
        if isseries(item) and hasastype(item): 
            item = item.astype(CATEGORY)
        if hascat(item) and hascodes(item.cat): 
            return item.cat.codes
        if (iscatidx(item) or iscataccessor(item)) and hascodes(item): 
            return item.codes
        return cls.default
    
class hascategories(astr, attr = CATEGORIES, ret_option = ReturnOption.has):
    '''Check for `.categories`'''

class getcategories(astr, attr = CATEGORIES, attr_guard = isindexlike, ret_option = ReturnOption.call, default = 0):
    '''Retrieve attribute `.categories`'''
    @classmethod
    def get(cls: tuple, item: object | pd.Series | pd.Index) -> tuple | None:
        if isseries(item) and hasastype(item): 
            item = item.astype(CATEGORY)
        if hascat(item) and hascategories(item.cat): 
            return item.cat.categories
        if (iscatidx(item) or iscataccessor(item)) and hascategories(item): 
            return item.categories
        return cls.default
    

# %% ../nbs/02_attr.ipynb 28
#| export
