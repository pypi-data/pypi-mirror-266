# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_safe.ipynb.

# %% auto 0
__all__ = ['safeidx', 'safeloc', 'safeiloc']

# %% ../nbs/04_safe.ipynb 6
#| export


# %% ../nbs/04_safe.ipynb 8
#| export


# %% ../nbs/04_safe.ipynb 11
#| export

# %% ../nbs/04_safe.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/04_safe.ipynb 15
#| export


# %% ../nbs/04_safe.ipynb 17
#| export


# %% ../nbs/04_safe.ipynb 19
from atyp import (DataFrameQ, DatasetQ, IndexQ, IndexLikeQ, )
from chck import isnone, isidxlike

# %% ../nbs/04_safe.ipynb 21
from .mock import dummydf
from .util import dfdsidx, getdfdsloc, getdfdsiloc

# %% ../nbs/04_safe.ipynb 25
def safeidx(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists or get the df's index from either `df` or `ds.df`'''
    if isnone(idx) or not isidxlike(idx): return dfdsidx(df, ds)
    return idx

def safeloc(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists then apply it to the `LocIndexer` from either `df` or `ds.df`'''
    idx = safeidx(idx, df, ds) if isnone(idx) else idx
    return getdfdsloc(df, ds)[idx]

def safeiloc(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists then apply it to the `iLocIndexer` from either `df` or `ds.df`'''
    idx = safeidx(idx, df, ds) if isnone(idx) else idx
    return getdfdsiloc(df, ds)[idx]

# %% ../nbs/04_safe.ipynb 27
#| export
