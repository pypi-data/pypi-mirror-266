from typing import Generic, TypeVar

from .abc.ordinal import Cardinal

__all__ = ['Interval']

T = TypeVar('T', bound=Cardinal)


class Interval(Generic[T]):
    def __init__(self, lo: T, hi: T, /) -> None: ...
    @classmethod
    def neighborhood(cls, center: T, radius: T) -> Interval[T]: ...
    @property
    def lo(self) -> T: ...
    @property
    def hi(self) -> T: ...
    @property
    def mid(self) -> T: ...
    @property
    def length(self) -> T: ...
    def cover(self, other: Interval) -> bool: ...
    def disjoint(self, other: Interval) -> bool: ...
    def intersect(self, other: Interval) -> bool: ...
    def __contains__(self, number: T) -> bool: ...
    def lohalf(self) -> Interval[T]: ...
    def hihalf(self) -> Interval[T]: ...
    def __eq__(self, other: Interval) -> bool: ...
    def __hash__(self) -> int: ...


