# yapf: disable
# isort: skip_file
# ruff: noqa

# Standard imports.
from __future__ import annotations

import asyncio
import google.protobuf.descriptor
import google.protobuf.json_format
import google.protobuf.message
import grpc
import json
import logging
import sys
import traceback
import uuid
import resemble
import respect.logging  # type: ignore[import]
import typing
from abc import abstractmethod
from backoff import Backoff
from datetime import datetime, timedelta
from google.protobuf import empty_pb2
from google.rpc import status_pb2
from grpc_status import rpc_status
from resemble.aio.call import InvalidActorIdError
from resemble.aio.contexts import (
    Context,
    EffectValidationRetry,
    ReaderContext,
    TransactionContext,
    WorkflowContext,
    WriterContext,
    EffectValidation,
)
from resemble.aio.headers import Headers
from resemble.aio.idempotency import IdempotencyManager, Idempotency
from resemble.aio.internals.channel_manager import _ChannelManager
from resemble.aio.internals.middleware import (
    maybe_run_function_twice_to_validate_effects,
    maybe_run_method_twice_to_validate_effects,
    Middleware,
)
from resemble.aio.internals.tasks_cache import TasksCache
from resemble.aio.internals.tasks_dispatcher import TasksDispatcher
from resemble.aio.headers import Headers
from resemble.aio.servicers import Servicer, Serviceable
from resemble.aio.state_managers import Effects, StateManager
from resemble.aio.stubs import Stub
from resemble.aio.tasks import TaskEffect
from resemble.aio.types import (
    ActorId,
    ApplicationId,
    GrpcMetadata,
    ServiceName,
    assert_type,
)
from resemble.aio.workflows import Workflow
from resemble.settings import MAX_ACTOR_ID_LENGTH
from resemble.v1alpha1 import tasks_pb2, tasks_pb2_grpc
from typing import (
    cast,
    AsyncIterable,
    AsyncIterator,
    Awaitable,
    Callable,
    NoReturn,
    Optional,
    TypeAlias,
    Union,
)

# User defined or referenced imports.
{% for module in imports | sort %}
import {{ module }}
{% endfor %}
# Additionally re-export all messages from the pb2 module.
{% if pb2_messages | length > 0 %}
from {{ pb2_name }} import (
{% for message in pb2_messages | sort %}
    {{ message }},
{% endfor %}
)
{% endif %}

logger = respect.logging.get_logger(__name__)


def MakeLegacyGrpcServiceable(
    # A legacy gRPC servicer type can't be more specific than `type`,
    # because legacy gRPC servicers (as generated by the gRPC `protoc`
    # plugin) do not share any common base class other than `object`.
    servicer_type: type
) -> Serviceable:
    {% for legacy_grpc_service in legacy_grpc_services %}
    if issubclass(servicer_type, {{ pb2_grpc_name }}.{{legacy_grpc_service.name}}Servicer):
        return {{ legacy_grpc_service.name }}Serviceable(servicer_type)
    {% endfor %}
    raise ValueError(f"Unknown legacy gRPC servicer type '{servicer_type}'")

{% for legacy_grpc_service in legacy_grpc_services %}
class {{ legacy_grpc_service.name }}Serviceable(Serviceable):
    """ A Servicable that makes it possible to host a legacy gRPC
    `{{ legacy_grpc_service.name }}Servicer` on Resemble."""

    def __init__(self, legacy_grpc_servicer_type: type[{{ pb2_grpc_name }}.{{legacy_grpc_service.name}}Servicer]):
        self._legacy_grpc_servicer_type = legacy_grpc_servicer_type

    def service_name(self) -> ServiceName:
        return '{{ package_name }}.{{ legacy_grpc_service.name }}'

    def file_descriptor(self) -> google.protobuf.descriptor.FileDescriptor:
        return {{ pb2_name }}.DESCRIPTOR

    def instantiate(self) -> tuple[
        {{pb2_grpc_name}}.{{legacy_grpc_service.name}}Servicer,
        Optional[Callable[
            [object, grpc.aio.Server],
            None
        ]]
    ]:
        servicer = self._legacy_grpc_servicer_type()
        add_to_server_method = {{pb2_grpc_name}}.add_{{legacy_grpc_service.name}}Servicer_to_server
        return servicer, add_to_server_method

{% endfor %}

{% for service in services %}
class {{ service.name }}ServicerMiddleware(Middleware):

    def __init__(
        self,
        *,
        servicer: {{ service.name }}Servicer,
        application_id: ApplicationId,
        state_manager: StateManager,
        channel_manager: _ChannelManager,
        tasks_cache: TasksCache,
        token_verifier: Optional[resemble.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: EffectValidation,
    ):
        super().__init__(
            application_id=application_id,
            service_name='{{ package_name }}.{{ service.name }}',
            channel_manager=channel_manager,
            effect_validation=effect_validation,
        )

        self._servicer = servicer
        self._state_manager = state_manager
        self.tasks_dispatcher = TasksDispatcher(
            application_id=application_id,
            dispatch=self.dispatch,
            tasks_cache=tasks_cache,
        )

        # Store the type of each method's request so that stored requests can be
        # deserialized into the correct type.
        self.request_type_by_method_name: dict[str, type[google.protobuf.message.Message]] = {
            {% for method in service.methods %}
            '{{ method.name }}': {{ method.input_type }},
            {% endfor %}
        }

        # Create authorizer.
        self._authorizer: Optional[resemble.aio.auth.authorizers.Authorizer] = servicer.authorizer()

        # Create token verifier.
        self._token_verifier: Optional[resemble.aio.auth.token_verifiers.TokenVerifier] = (
            servicer.token_verifier() or token_verifier
        )

        if self._token_verifier is not None and self._authorizer is None:
            raise RuntimeError(
                f"'TokenVerifier' provided but no 'Authorizer' returned for "
                f"'{{ package_name }}.{{ service.name }}'"
            )

    def add_to_server(self, server: grpc.aio.Server) -> None:
        {{ pb2_grpc_name }}.add_{{ service.name }}Servicer_to_server(
            self, server
        )

    async def inspect(self, actor_id: ActorId) -> AsyncIterator[google.protobuf.message.Message]:
        """Implementation of `Middleware.inspect()`."""
        context = self.create_context(
            headers=Headers(
                application_id=self.application_id,
                service_name=self.service_name,
                actor_id=actor_id,
            ),
            context_type=ReaderContext,
        )

        async with self._state_manager.streaming_reader_idempotency_key(
            context, self._servicer.__state_type__
        ) as states:
            async for (state, idempotency_key) in states:
                yield state

    async def react_query(
        self,
        grpc_context: grpc.aio.ServicerContext,
        headers: Headers,
        method: str,
        request_bytes: bytes,
    ) -> AsyncIterator[tuple[Optional[google.protobuf.message.Message], list[uuid.UUID]]]:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes' for each state
        update that creates a different response.

        NOTE: only unary reader methods are supported."""
        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- set ns = namespace(first_method=True) -%}
        {%- for method in service.methods -%}
        {%- if ns.first_method -%}
        {% set ns.first_method = False %}
        # Need to define these up here since we can only do that once.
        last_response: Optional[google.protobuf.message.Message] = None
        aggregated_idempotency_keys: list[uuid.UUID] = []
        if method == '{{ method.name }}':
        {% else %}
        elif method == '{{ method.name }}':
        {% endif %}
            {% if (method.options.kind == 'reader' and
                   not method.server_streaming and
                   not method.client_streaming and
                   not method.options.state_streaming) %}

            try:
                context = self.create_context(
                    headers=headers,
                    context_type=ReaderContext,
                )

                context.auth = await self._maybe_verify_token(headers)

                request = {{ method.input_type }}()
                request.ParseFromString(request_bytes)

                async with self._state_manager.reactively(
                    context, self._servicer.__state_type__
                ) as states:
                    async for (state, idempotency_keys) in states:
                        # We currently authorize for each new `state`
                        # as a change in the state might now raise a
                        # `PermissionDenied`.
                        await self._maybe_authorize(
                            method_name=
                            '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                            headers=headers,
                            auth=context.auth,
                            state=state,
                            request=request,
                        )

                        aggregated_idempotency_keys.extend(idempotency_keys)

                        # Note: This does not do any defensive copying currently:
                        # see https://github.com/reboot-dev/respect/issues/2636.
                        @maybe_run_function_twice_to_validate_effects
                        async def run__{{ method.name }}(validating_effects: bool) -> google.protobuf.message.Message:
                            return await self.__{{ method.name }}(
                                context,
                                state,
                                request,
                                validating_effects=validating_effects,
                            )

                        response = await run__{{ method.name }}()

                        if last_response != response:
                            yield (response, aggregated_idempotency_keys)
                            last_response = response
                        else:
                            yield (None, aggregated_idempotency_keys)

                        aggregated_idempotency_keys.clear()
            except resemble.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    rpc_status.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            {% else %}
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                "Method '{method}' is invalid for servicer {{ service.name }}."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
            {% endif %}
        {% endfor %}
        {% if not ns.first_method %}
        else:
            logger.warning(
                "Got a React query request with an invalid method name: "
                "Method '{method}' is invalid for servicer {{ service.name }}."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
            yield  # Unreachable but necessary for mypy.
        {% else  %}
        logger.warning(
            "Got a react query request with an invalid method name: "
            "Method '{method}' is invalid for servicer {{ service.name }}."
            "\n"
            "Do you have an old browser tab still open for an older version "
            "of this application, or a different application all together?"
        )
        raise resemble.aio.aborted.SystemAborted(
            resemble.v1alpha1.errors_pb2.InvalidMethod(),
            message=
                f"Method '{method}' not found"
        )
        yield  # Unreachable but necessary for mypy.
        {% endif  %}

    @maybe_run_method_twice_to_validate_effects
    async def react_mutate(
        self,
        validating_effects: bool,
        headers: Headers,
        method: str,
        request_bytes: bytes,
    ) -> google.protobuf.message.Message:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes'."""
        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- set ns = namespace(first_method=True) -%}
        {%- for method in service.methods -%}
        {%- if ns.first_method -%}
        {% set ns.first_method = False %}
        if method == '{{ method.name }}':
        {% else %}
        elif method == '{{ method.name }}':
        {% endif %}
            {% if method.options.kind in ['writer', 'transaction', 'workflow'] %}
            {% if 'task' in method.options or method.options.kind == 'workflow' %}
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                f"Method '{{ method.name }}' can not be called via React (for now)"
            )
            {% else %}
            request = {{ method.input_type }}()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            backoff = Backoff()
            while True:
                try:
                    return await self._{{ method.name }}(
                        request,
                        self.create_context(
                            headers=headers,
                            context_type={%- if method.options.kind == 'writer' -%}Writer{%- else -%}Transaction{%- endif -%}Context,
                        ),
                        validating_effects=validating_effects,
                    )
                except resemble.aio.aborted.Aborted as aborted:
                    if aborted.code == grpc.StatusCode.UNAVAILABLE:
                        await backoff()
                        continue
                    raise
            {% endif %}
            {% else %}
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                "Method '{{ method.name }}' is invalid for servicer {{ service.name }}."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            {% endif %}
        {% endfor %}
        {% if not ns.first_method %}
        else:
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                "Method '{method}' is invalid for servicer {{ service.name }}."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
        {% else  %}
        logger.warning(
            "Got a react mutate request with an invalid method name: "
            "Method '{method}' is invalid for servicer {{ service.name }}."
            "\n"
            "Do you have an old browser tab still open for an older version "
            "of this application, or a different application all together?"
        )
        raise resemble.aio.aborted.SystemAborted(
            resemble.v1alpha1.errors_pb2.InvalidMethod(),
            message=
                f"Method '{method}' not found"
        )
        {% endif  %}

    async def dispatch(
        self,
        task: TaskEffect,
        *,
        only_validate: bool = False,
    ) -> google.protobuf.message.Message | resemble.aio.tasks.Loop:
        """Dispatches the tasks to execute unless 'only_validate' is set to
        true, in which case just ensures that the task actually exists.
        Note that this function will be called *by* tasks_dispatcher; it will
        not itself call into tasks_dispatcher."""
        # Need to forward declare context since we set it to different
        # types depending on if the task is a reader or a writer.
        context: Context

        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- set ns = namespace(first_task=True) -%}
        {%- for method in service.methods -%}
        {%- if 'task' in method.options or method.options.kind == 'workflow' -%}
        {%- if ns.first_task -%}
        {% set ns.first_task = False %}
        if '{{ method.name }}' == task.method_name:
        {% else %}
        elif '{{ method.name }}' == task.method_name:
        {% endif %}
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return {{ method.output_type }}()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            @maybe_run_function_twice_to_validate_effects
            async def run_{{method.name}}(
                validating_effects: bool,
                context: {{ method.options.kind | to_camel }}Context,
            ):
                {% if method.options.kind == 'reader' %}
                async with self._state_manager.task_reader(
                    context, self._servicer.__state_type__
                ) as (state, task_reader):
                    response = await self.__{{ method.name }}(
                        context,
                        state,
                        task.request,
                        validating_effects=validating_effects,
                    )

                    await task_reader.complete(task, response)

                    return response

                {% elif method.options.kind == 'writer' %}
                async with self._state_manager.task_writer(
                    context, self._servicer.__state_type__
                ) as (state, task_writer):
                    effects = await self.__{{ method.name }}(
                        context,
                        state,
                        task.request,
                        validating_effects=validating_effects,
                    )

                    if effects.tasks is not None:
                        await self.tasks_dispatcher.validate(
                            effects.tasks
                        )

                    await task_writer.complete(task, effects)

                    if effects.tasks is not None:
                        self.tasks_dispatcher.dispatch(effects.tasks)

                    return effects.response

                {% elif method.options.kind == 'transaction' %}
                # TODO(benh): implement transactional tasks!
                raise NotImplementedError
                {% elif method.options.kind == 'workflow' %}
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    response_or_loop = await self.__{{ method.name }}(
                        context,
                        task.request,
                        validating_effects=validating_effects,
                    )

                    await complete(task, response_or_loop)

                    return response_or_loop
                {% endif %}

            {% if method.options.kind == 'workflow' %}
            async def run_{{ method.name }}_reactively(
                context: WorkflowContext,
            ):
                async with self._state_manager.reactively(
                    context, self._servicer.__state_type__
                ) as states:
                    async for (state, idempotency_keys) in states:
                        try:
                            return await run_{{method.name}}(context)
                        except resemble.aio.react.RetryReactively:
                            continue
            {% endif %}

            return await run_{{ method.name }}{% if method.options.kind == 'workflow' %}_reactively{% endif %}(
                self.create_context(
                    headers=Headers(
                        application_id=self.application_id,
                        service_name=self.service_name,
                        actor_id=task.task_id.actor_id,
                    ),
                    context_type={{ method.options.kind | to_camel }}Context,
                    task=task,
                )
            )

        {% endif %}
        {% endfor %}

        # There are no tasks for this service.
        start_or_validate = "start" if not only_validate else "validate"
        raise RuntimeError(
            f"Attempted to {start_or_validate} task '{task.method_name}' "
            f"on '{{ service.name }}' which does not exist"
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    async def __{{ method.name }}(
        self,
        {% if method.options.kind == 'reader' %}
        context: ReaderContext,
        {% elif method.options.kind == 'writer' %}
        context: WriterContext,
        {% elif method.options.kind == 'transaction' %}
        context: TransactionContext,
        {% elif method.options.kind == 'workflow' %}
        context: WorkflowContext,
        {% endif %}
        {% if not (method.options.constructor or method.options.kind in ['transaction', 'workflow']) %}
        {% if not method.options.state_streaming %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% else %}
        states: AsyncIterable[{{ service.options.state_pb2_name }}.{{ service.options.state_name }}],
        {% endif %}
        {% endif %}
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        validating_effects: bool,
    {% if method.options.kind in ['reader', 'transaction', 'workflow'] %}
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}{% if method.options.kind == 'workflow' %} | resemble.aio.tasks.Loop{% endif %}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
    {% elif method.options.kind == 'writer' %}
    ) -> {{ service.name}}.{{ method.name }}Effects:
    {% endif %}
        try:
            {% if not method.server_streaming %}
            response = (
                await self._servicer.{{ method.name }}(
                    context=context,
                    {% if not (method.options.constructor or method.options.kind in ['transaction', 'workflow']) %}
                    state{% if method.options.state_streaming %}s{% endif %}=state{% if method.options.state_streaming %}s{% endif %},
                    {% endif %}
                    request{% if method.client_streaming %}s{% endif %}=request{% if method.client_streaming %}s{% endif +%}
                )
            )
            {% if method.options.kind in ['reader', 'transaction', 'workflow'] %}
            assert_type(
                response,
                [
                    {{ method.output_type }},
                    {% if method.options.kind == 'workflow' %}
                    resemble.aio.tasks.Loop,
                    {% endif %}
                ],
            )
            {% endif %}
            self.maybe_raise_effect_validation_retry(
                logger=logger,
                method_name='{{ service.name }}.{{ method.name }}',
                validating_effects=validating_effects,
                is_non_root_in_transaction=(
                    not issubclass(type(context), TransactionContext) and
                    context.transaction_id is not None
                ),
            )
            return response
            {% else %}
            async for response in self._servicer.{{ method.name }}(
                context=context,
                state{% if method.options.state_streaming %}s{% endif %}=state{% if method.options.state_streaming %}s{% endif %},
                request{% if method.client_streaming %}s{% endif %}=request{% if method.client_streaming %}s{% endif +%}
            ):
                assert_type(response, [{{ method.output_type }}])
                yield response
            {% endif %}
        except EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except resemble.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `resemble/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: Optional[type] = None
            aborted_type = {{ service.name }}.{{ method.name }}Aborted
            if isinstance(aborted, resemble.aio.aborted.SystemAborted):
                if context.task is not None:
                    logger.warning(
                        f"Unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(traceback.format_exception(aborted))
                    )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is not None:
                        logger.warning(
                            f"Propagating unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    if context.task is not None:
                        logger.warning(
                            f"Unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(traceback.format_exception(aborted))
                        )
                    raise resemble.aio.aborted.SystemAborted(
                        resemble.v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {aborted}"
                    )

            raise
        except asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            if context.task is not None:
                logger.warning(
                    f"Unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(traceback.format_exception(exception))
                )
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in '{{ package_name }}.{{ service.name }}.{{ method.name }}') {type(exception).__name__}: {exception}"
            )

    async def _{{ method.name }}(
        self,
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        {% if 'task' in method.options or method.options.kind == 'workflow' %}
        context: WriterContext,
        {% elif method.options.kind == 'reader' %}
        context: ReaderContext,
        {% elif method.options.kind == 'writer' %}
        context: WriterContext,
        {% elif method.options.kind == 'transaction' %}
        context: TransactionContext,
        {% endif %}
        *,
        validating_effects: bool,
        grpc_context: Optional[grpc.aio.ServicerContext] = None,
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        {% if method.options.kind in ['writer', 'transaction', 'workflow'] %}
        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = {{ method.output_type }}()
            response.ParseFromString(idempotent_mutation.response)

            {% if 'task' in method.options or method.options.kind == 'workflow' %}
            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        resemble.aio.headers.TASK_ID_UUID,
                        str(uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )
            {% endif %}

            return response
        {% endif %}

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__service_name__, context.actor_id
                )

            {% if 'task' in method.options or method.options.kind == 'workflow' %}
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor={{ method.options.constructor }},
                requires_constructor={{ service.requires_constructor }}
            ) as (state, writer):

                await self._maybe_authorize(
                    method_name=
                    '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                    headers=context._headers,
                    auth=context.auth,
                    {% if not method.options.constructor %}
                    state=state,
                    {% endif %}
                    request=request,
                )

                task = {{ service.name }}ServicerTasksStub(
                    context=context,
                    actor_id=context.actor_id,
                ).{{ method.name }}(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = Effects(
                    state=state,
                    tasks=[task],
                    response={{ method.output_type }}(),
                )

                assert effects.tasks is not None

                # NOTE: we validate tasks added as part of a
                # transaction when we prepare.
                if transaction is None:
                    await self.tasks_dispatcher.validate(effects.tasks)

                await writer.complete(effects)

                if transaction is None:
                    self.tasks_dispatcher.dispatch(effects.tasks)
                else:
                    assert task.task_id.service == transaction.service
                    transaction.tasks.extend(effects.tasks)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            resemble.aio.headers.TASK_ID_UUID,
                            str(uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return effects.response
        {% elif method.options.kind == 'reader' %}
            {% if not method.options.state_streaming %}
            async with self._state_manager.reader(
                context, self._servicer.__state_type__
            ) as state:
                await self._maybe_authorize(
                    method_name=
                    '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                    headers=context._headers,
                    auth=context.auth,
                    state=state,
                    request=request,
                )

            {% else %}
            async with self._state_manager.streaming_reader(
                context, self._servicer.__state_type__
            ) as unauthorized_states:
                async def authorized_states():
                    async for state in unauthorized_states:
                        # We currently authorize for each new `state`
                        # as a change in the state might now raise a
                        # `PermissionDenied`.
                        await self._maybe_authorize(
                            method_name=
                            '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                            headers=context._headers,
                            auth=context.auth,
                            state=state,
                            {% if not method.client_streaming %}
                            request=request,
                            {% endif %}
                        )
                        yield state

                states = authorized_states()

            {% endif %}
                {% if not method.server_streaming %}
                response = await self.__{{ method.name }}(
                    context,
                    state{% if method.options.state_streaming %}s{% endif %},
                    request{% if method.client_streaming %}s{% endif +%},
                    validating_effects=validating_effects,
                )
                if transaction is not None:
                    # We need the transaction to be stored _before_
                    # returning a response to the user otherwise they
                    # may read two different states if we crash.
                    await self._state_manager.transaction_participant_store(
                        transaction
                    )
                return response
                {% else %}
                async for response in self.__{{ method.name }}(
                    context,
                    state{% if method.options.state_streaming %}s{% endif %},
                    request{% if method.client_streaming %}s{% endif +%},
                    validating_effects=True,
                ):
                    if transaction is not None:
                        # We need the transaction to be stored
                        # _before_ yielding the first response to
                        # the user otherwise they may read two
                        # different states if we crash.
                        await self._state_manager.transaction_participant_store(
                            transaction
                        )
                    yield response
                {% endif %}
        {% elif method.options.kind == 'writer' %}
            # TODO: this loads a `state` object even when we know we're calling a constructor,
            # in which case (by definition) there is no state. Can we (and is it worth
            # the effort to) change this call to avoid that overhead in that case?
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                transaction=transaction,
                from_constructor={{ method.options.constructor }},
                requires_constructor={{ service.requires_constructor }}
            ) as (state, writer):

                await self._maybe_authorize(
                    method_name=
                    '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                    headers=context._headers,
                    auth=context.auth,
                    {% if not method.options.constructor %}
                    state=state,
                    {% endif %}
                    request=request,
                )

                effects = await self.__{{ method.name }}(
                    context,
                    {% if not method.options.constructor %}
                    state,
                    {% endif %}
                    request,
                    validating_effects=validating_effects,
                )

                if effects.tasks is not None:
                    # NOTE: we validate tasks added as part of a
                    # transaction when we prepare.
                    if transaction is None:
                        await self.tasks_dispatcher.validate(
                            effects.tasks
                        )

                await writer.complete(effects)

                if effects.tasks is not None:
                    if transaction is None:
                        self.tasks_dispatcher.dispatch(effects.tasks)
                    else:
                        assert all(
                            task.task_id.service == transaction.service
                            for task in effects.tasks
                        ), 'Task service does not match transaction service'
                        transaction.tasks.extend(effects.tasks)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]
        {% elif method.options.kind == 'transaction' %}
            assert transaction is not None
            async with self._state_manager.transaction(
                context,
                self._servicer.__state_type__,
                transaction,
                from_constructor={{ method.options.constructor }},
                requires_constructor={{ service.requires_constructor }}
            ) as (state, complete):

                await self._maybe_authorize(
                    method_name=
                    '{{ package_name }}.{{ service.name }}.{{ method.name }}',
                    headers=context._headers,
                    auth=context.auth,
                    {% if not method.options.constructor %}
                    state=state,
                    {% endif %}
                    request=request,
                )

                response = await self.__{{ method.name }}(
                    context,
                    request,
                    validating_effects=validating_effects,
                )

                await complete(response)

                return response
        {% endif %}

    {% if not method.server_streaming %}
    @maybe_run_method_twice_to_validate_effects
    {% endif %}
    async def {{ method.name }}(
        self,
        {% if not method.server_streaming %}
        validating_effects: bool,
        {% endif %}
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        grpc_context: grpc.aio.ServicerContext,
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        {% if 'task' in method.options or method.options.kind == 'workflow' %}
        context: Optional[WriterContext] = None
        context_type = WriterContext
        {% elif method.options.kind == 'reader' %}
        context: Optional[ReaderContext] = None
        context_type = ReaderContext
        {% elif method.options.kind == 'writer' %}
        context: Optional[WriterContext] = None
        context_type = WriterContext
        {% elif method.options.kind == 'transaction' %}
        context: Optional[TransactionContext] = None
        context_type = TransactionContext
        {% endif %}
        try:
            headers = Headers.from_grpc_context(grpc_context)

            context = self.create_context(
                headers=headers, context_type=context_type
            )
            assert context is not None

            {% if not method.server_streaming %}
            return await self._{{ method.name }}(
                {% if not method.client_streaming %}
                request,
                {% else %}
                requests,
                {% endif %}
                context,
                validating_effects=validating_effects,
                grpc_context=grpc_context,
            )
            {% else %}
            async for response in self._{{ method.name }}(
                {% if not method.client_streaming %}
                request,
                {% else %}
                requests,
                {% endif %}
                context,
                validating_effects=True,
                grpc_context=grpc_context,
            ):
                yield response
            {% endif %}
        except EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except resemble.aio.aborted.Aborted as aborted:
            await grpc_context.abort_with_status(
                rpc_status.to_status(aborted.to_status())
            )
            raise  # Unreachable but necessary for mypy.
        except asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except:
            # Print the exception stack trace for easier debugging. Note
            # that we don't include the stack trace in an error message
            # for the same reason that gRPC doesn't do so by default,
            # see https://github.com/grpc/grpc/issues/14897, but since this
            # should only get logged on the server side it is safe.
            logger.warning(
                'Unhandled exception\n' +
                ''.join(traceback.format_exc())
            )

            # Re-raise the exception for gRPC to handle!
            raise
        finally:
            if context is not None and context.transaction_id is not None:
                # Propagate transaction participants.
                #
                # NOTE: we'll want to propagate participants if we're
                # in a transaction method once we support nested
                # transactions, but for now we only need to propagate
                # participants when we're not in a transaction method.
                if not isinstance(context, TransactionContext):
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

    {% endfor %}
    async def _maybe_authorize(
        self,
        *,
        method_name: str,
        headers: Headers,
        auth: Optional[resemble.aio.auth.Auth],
        state: Optional[{{ service.name }}StateType] = None,
        request: Optional[{{ service.name }}RequestTypes] = None,
    ) -> None:
        """Check authorization decision for the given method, using available
        information.

        Raises `PermissionDenied` in case authorizer is present but the request
        is not authorized.
        """
        if self._authorizer is None:
            return

        if not self._authorizer.can_authorize(method_name):
            # Better safe than sorry.
            raise resemble.aio.aborted.SystemAborted(
                resemble.v1alpha1.errors_pb2.PermissionDenied(),
                message=
                    f"Authorizer does not support method '{method_name}'"
            )

        # If there is state, ensure that we don't accidentally mutate it.
        if state is not None:
            # TODO: If we can read-only a state object we can avoid a copy here.
            state_copy = {{ service.name }}StateType()
            state_copy.CopyFrom(state)
            state = state_copy

        # Create context for the authorizer. This is a `ReaderContext`
        # independently of the calling context.
        with self.use_context(
            headers=(
                # Get headers suitable for doing authorization.
                headers.copy_for_token_verification_and_authorization()
            ),
            context_type=ReaderContext,
        ) as context:
            context.auth = auth

            # Get the authorizer decision.
            authorization_decision = await self._authorizer.authorize(
                method_name=method_name,
                context=context,
                state=state,
                request=request,
            )

        # Enforce correct authorizer decision type.
        try:
            assert_type(
                authorization_decision,
                [
                    resemble.v1alpha1.errors_pb2.Ok,
                    resemble.v1alpha1.errors_pb2.Unauthenticated,
                    resemble.v1alpha1.errors_pb2.PermissionDenied,
                ]
            )
        except TypeError as e:
            # Recast the exception to provide more context.
            authorizer_type = f"{type(self._authorizer).__module__}.{type(self._authorizer).__name__}"
            raise TypeError(
                f"Authorizer '{authorizer_type}' "
                f"returned unexpected type '{type(authorization_decision).__name__}' "
                f"for method '{method_name}' on '{headers.actor_id}'"
            ) from e

        # If the decision is not `True`, raise a `SystemAborted` with either a
        # `PermissionDenied` error (in case of `False`) or an `Unauthenticated`
        # error.
        if not isinstance(authorization_decision, resemble.v1alpha1.errors_pb2.Ok):
            if isinstance(authorization_decision, resemble.v1alpha1.errors_pb2.Unauthenticated):
                logger.warning(
                    "Unauthenticated call to "
                    f"'{method_name}' on '{headers.actor_id}'"
                )

            raise resemble.aio.aborted.SystemAborted(
                authorization_decision,
                message=
                f'You are not authorized to call {method_name} on '
                f"'{headers.actor_id}'"
            )

    async def _maybe_verify_token(self, headers) -> Optional[resemble.aio.auth.Auth]:
        """Verify the bearer token and if a token verifier is present.

        Returns the (optional) `resemble.aio.auth.Auth` object
        produced by the token verifier if the token can be verified.
        """
        auth: Optional[resemble.aio.auth.Auth] = None

        if self._token_verifier is not None and headers.bearer_token is not None:

            with self.use_context(
                headers=(
                    # Get headers suitable for doing token verification.
                    headers.copy_for_token_verification_and_authorization()
                ),
                context_type=ReaderContext,
            ) as context:
                auth = await self._token_verifier.verify_token(
                    context=context,
                    token=headers.bearer_token,
                )

        return auth


class _{{ service.name }}Stub(Stub):

    def __init__(
        self,
        *,
        context_or_workflow: Context | Workflow,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        context: Optional[Context] = None

        if isinstance(context_or_workflow, Context):
            context = context_or_workflow

            # ISSUE(https://github.com/reboot-dev/respect/issues/2258)
            # For now we do not explicitly pass on the bearer token here, as it
            # might have security implications to just pass on the token to any
            # service we are calling.

        elif isinstance(context_or_workflow, Workflow):
            bearer_token = context_or_workflow.bearer_token

        super().__init__(
            channel_manager=context_or_workflow.channel_manager,
            idempotency_manager=context_or_workflow,
            service_name='{{ package_name }}.{{ service.name }}',
            actor_id=actor_id,
            context=context,
            bearer_token=bearer_token,
        )

        channel = self._channel_manager.get_channel_for(
            '{{ package_name }}.{{ service.name }}', actor_id
        )
        self._stub = {{ pb2_grpc_name }}.{{ service.name }}Stub(channel)


class {{ service.name }}ReaderStub(_{{ service.name }}Stub):

    def __init__(
        self,
        context_or_workflow: ReaderContext | WriterContext | TransactionContext | WorkflowContext | Workflow,
        *,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        assert_type(
            context_or_workflow,
            [ReaderContext, WriterContext, TransactionContext, WorkflowContext, Workflow]
        )
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {%- if method.options.kind == 'reader' %}
    async def {{ method.name }}(
        self,
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            '{{ method.name }}',
            self._stub.{{ method.name }},
            request{% if method.client_streaming %}s{% endif %},
            unary={{ not method.client_streaming and not method.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ service.name }}.{{ method.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.server_streaming %}
            assert isinstance(call, Awaitable)
            return await call
        {% else %}
            assert isinstance(call, AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% endif %}

    {% endfor %}


class {{ service.name }}WriterStub(_{{ service.name }}Stub):

    def __init__(
        self,
        context_or_workflow: TransactionContext | WorkflowContext | Workflow,
        *,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        assert_type(context_or_workflow, [TransactionContext, WorkflowContext, Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {%- if method.options.kind == 'reader' %}
    async def {{ method.name }}(
        self,
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            '{{ method.name }}',
            self._stub.{{ method.name }},
            request{% if method.client_streaming %}s{% endif %},
            unary={{ not method.client_streaming and not method.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ service.name }}.{{ method.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.server_streaming %}
            assert isinstance(call, Awaitable)
            return await call
        {% else %}
            assert isinstance(call, AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% elif method.options.kind == 'writer' %}
    async def {{ method.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: Optional[Idempotency] = None,
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    ) -> {{ method.output_type }}:
        idempotency_key: Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='{{ method.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                '{{ method.name }}',
                self._stub.{{ method.name }},
                request{% if method.client_streaming %}s{% endif %},
                unary={{ not method.client_streaming and not method.server_streaming }},
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ service.name }}.{{ method.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, Awaitable)
                return await call
    {% endif %}

    {% endfor %}

class {{ service.name }}WorkflowStub(_{{ service.name }}Stub):

    def __init__(
        self,
        *,
        context_or_workflow: WorkflowContext | Workflow,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        assert_type(context_or_workflow, [WorkflowContext, Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {%- if method.options.kind == 'reader' %}
    async def {{ method.name }}(
        self,
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            '{{ method.name }}',
            self._stub.{{ method.name }},
            request{% if method.client_streaming %}s{% endif %},
            unary={{ not method.client_streaming and not method.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ service.name }}.{{ method.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.server_streaming %}
            assert isinstance(call, Awaitable)
            return await call
        {% else %}
            assert isinstance(call, AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% elif method.options.kind in ['writer', 'transaction'] %}
    async def {{ method.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: Optional[Idempotency] = None,
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    ) -> {{ method.output_type }}:
        idempotency_key: Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='{{ method.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                '{{ method.name }}',
                self._stub.{{ method.name }},
                request{% if method.client_streaming %}s{% endif %},
                unary={{ not method.client_streaming and not method.server_streaming }},
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ service.name }}.{{ method.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, Awaitable)
                return await call
    {% endif %}

    {% endfor %}


class {{ service.name }}TasksStub(_{{ service.name }}Stub):

    def __init__(
        self,
        context_or_workflow: TransactionContext | WorkflowContext | Workflow,
        *,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        assert_type(context_or_workflow, [TransactionContext, WorkflowContext, Workflow])
        super().__init__(
            context_or_workflow=context_or_workflow,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {%- if 'task' in method.options or method.options.kind == 'workflow' %}
    async def {{ method.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: Optional[Idempotency] = None,
        *,
        metadata: Optional[GrpcMetadata] = None,
        bearer_token: Optional[str] = None,
    ) -> tasks_pb2.TaskId:
        idempotency_key: Optional[str]
        with self._idempotency_manager.idempotently(
            service=self._headers.service_name,
            actor_id=self._headers.actor_id,
            method='{{ method.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                '{{ method.name }}',
                self._stub.{{ method.name }},
                request,
                unary=True,
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ service.name }}.{{ method.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == resemble.aio.headers.TASK_ID_UUID:
                        return tasks_pb2.TaskId(
                            service=self._headers.service_name,
                            actor_id=self._headers.actor_id,
                            task_uuid=uuid.UUID(value).bytes,
                        )
                raise resemble.aio.aborted.SystemAborted(
                    resemble.v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )
    {% endif %}

    {% endfor %}


class {{ service.name }}ServicerTasksStub(_{{ service.name }}Stub):

    def __init__(
        self,
        context: WriterContext,
        *,
        actor_id: ActorId,
        bearer_token: Optional[str] = None,
    ):
        assert_type(context, [WriterContext])
        super().__init__(
            context_or_workflow=context,
            actor_id=actor_id,
            bearer_token=bearer_token,
        )

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {% if 'task' in method.options or method.options.kind == 'workflow' %}
    def {{ method.name }}(
        self,
        request: {{ method.input_type }},
        *,
        schedule: Optional[datetime | timedelta] = None,
    ) -> TaskEffect:
        return TaskEffect(
            service_name='{{ package_name }}.{{ service.name }}',
            actor_id=self._headers.actor_id,
            method_name='{{ method.name }}',
            request=request,
            schedule=(datetime.now() + schedule) if isinstance(
                schedule, timedelta
            ) else schedule,
        )
    {% endif %}

    {% endfor %}


class {{ service.name }}AuthorizerMixin:
    """Mixin that provides a default implementation of the `can_authorize`
    method for all {{ service.name }} authorizers.
    """

    def can_authorize(self, method_name: str) -> bool:
        service_method_names = [
            {% for method in service.methods %}
            '{{ package_name }}.{{ service.name }}.{{ method.name }}',
            {% endfor %}
        ]
        return method_name in service_method_names


{{ service.name }}StateType: TypeAlias = {{ service.options.state_pb2_name }}.{{ service.options.state_name }}
{{ service.name }}RequestTypes: TypeAlias = \
{% set request_types = [] %}
{% for method in service.methods if method.input_type is not none and method.input_type not in request_types %}
    {% if not loop.first %}        | {% else %}        {%endif%}{{method.input_type }}{% if not loop.last %} \{%endif%}{{ request_types.append(method.input_type) or '' }}
{% endfor %}


class {{ service.name }}Authorizer(
    {{ service.name }}AuthorizerMixin,
    resemble.aio.auth.authorizers.Authorizer[{{ service.name }}StateType, {{ service.name }}RequestTypes],
):
    StateType: TypeAlias = {{ service.name }}StateType
    RequestTypes: TypeAlias = {{ service.name }}RequestTypes

    async def authorize(
        self,
        *,
        method_name: str,
        context: ReaderContext,
        state: Optional[{{ service.name }}StateType] = None,
        request: Optional[{{ service.name }}RequestTypes] = None,
    ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
        {% for method in service.methods %}
        {% if loop.first %}
        if method_name == '{{ package_name }}.{{ service.name }}.{{ method.name }}':
        {% else %}
        elif method_name == '{{ package_name }}.{{ service.name }}.{{ method.name }}':
        {% endif %}
            return await self.{{ method.name }}(
                context,
                {% if not method.options.constructor %}
                cast({{ service.options.state_pb2_name }}.{{ service.options.state_name }}, state),
                {% endif %}
                {% if not (method.options.kind == 'reader' and method.client_streaming) %}
                cast({{ method.input_type }}, request),
                {% endif %}
            )
        {% endfor %}
        else:
            return resemble.v1alpha1.errors_pb2.PermissionDenied()

    {% for method in service.methods %}
    async def {{ method.name }}(
        self,
        context: ReaderContext,
        {% if not method.options.constructor %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% endif %}
        {% if not (method.options.kind == 'reader' and method.client_streaming) %}
        request: {{ method.input_type }},
        {% endif %}
    ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
        return resemble.v1alpha1.errors_pb2.PermissionDenied()

    {% endfor %}

    # Off-the shelf authorizers for {{ service.name }}:

    class AllowAllIfAuthenticated(
        {{ service.name }}AuthorizerMixin,
        resemble.aio.auth.authorizers.Authorizer,
    ):
        """An authorizer for {{ service.name }} that allows all requests if the
        caller is authenticated.
        """
        async def authorize(
            self,
            *,
            method_name: str,
            context: ReaderContext,
            state: Optional[{{ service.name }}StateType] = None,
            request: Optional[{{ service.name }}RequestTypes] = None,
        ) -> resemble.aio.auth.authorizers.Authorizer.Decision:
            if context.auth is None:
                return resemble.v1alpha1.errors_pb2.Unauthenticated()

            return resemble.v1alpha1.errors_pb2.Ok()


class {{ service.name }}Servicer(Servicer):
    Authorizer: TypeAlias = {{ service.name }}Authorizer

    __service_name__ = '{{ package_name }}.{{ service.name }}'
    __file_descriptor__ = {{ pb2_name }}.DESCRIPTOR
    __state_type__ = {{ service.options.state_pb2_name }}.{{ service.options.state_name }}

    def __init__(self):
        # NOTE: need to hold on to the middleware so we can do inline
        # writes (see 'self.write(...)').
        #
        # Because '_middleware' is not really private this does mean
        # users may do possibly dangerous things, but this is no more
        # likely given they could have already overridden
        # 'create_middleware()'.
        self._middleware: Optional[{{ service.name }}ServicerMiddleware] = None

    def create_middleware(
        self,
        *,
        application_id: ApplicationId,
        state_manager: StateManager,
        channel_manager: _ChannelManager,
        tasks_cache: TasksCache,
        token_verifier: Optional[resemble.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: EffectValidation,
    ) -> {{ service.name }}ServicerMiddleware:
        self._middleware = {{ service.name }}ServicerMiddleware(
            servicer=self,
            application_id=application_id,
            state_manager=state_manager,
            channel_manager=channel_manager,
            tasks_cache=tasks_cache,
            token_verifier=token_verifier,
            effect_validation=effect_validation,
        )
        return self._middleware

    def authorizer(self) -> Optional[resemble.aio.auth.authorizers.Authorizer]:
        return None

    def token_verifier(self) -> Optional[resemble.aio.auth.token_verifiers.TokenVerifier]:
        return None

    def lookup(
        self,
        *,
        bearer_token: Optional[str] = None,
    ) -> {{ service.name }}.WeakReference:
        # TODO(benh): it's still possible that the `bearer_token` from
        # the context will not be sufficient for making a
        # call/schedule due to a user defined authorizer; consider
        # creating a "per middleware" bearer token that always works
        # for calls from `self.lookup()`.
        context = Context.get()

        if context is None:
            raise RuntimeError(
                'Missing asyncio context variable `context`; '
                'are you using this class without Resemble?'
            )

        return {{ service.name }}.WeakReference(
            actor_id=context.actor_id,
            bearer_token=bearer_token or context.bearer_token,
        )

    def schedule(
        self,
        *,
        when: Optional[datetime | timedelta] = None,
    ):
        class Tasks:
            def __init__(self, when: Optional[datetime | timedelta] = None):
                self._when = when

            # {{ service.name }} specific methods:
            {% for method in service.methods %}
            {% if 'task' in method.options or method.options.kind == 'workflow' %}
            def {{ method.name }}(
                self,
                __context__: WriterContext,
                {% for name, types in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: Optional[{{ types.py_type }}] = None,
                {% endfor %}
            ) -> TaskEffect:
                {% for name, types in method.input_type_fields.items() %}
                if {{ name }} is not None and not isinstance(
                    {{ name }},
                    {# NOTE: split at '[' so we don't include generic type parameters. #}
                    {{ types.py_type.split('[')[0] }},
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'{{ method.input_type }}': field '{{ name }}' is not "
                        f"of required type '{{ types.py_type }}'"
                    )
                {% endfor %}
                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments
                # are always non-None, when in reality they are optional.
                request = {{ method.input_type }}(
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},  # type: ignore[arg-type]
                    {% endfor %}
                )
                return {{ service.name }}ServicerTasksStub(
                    context=__context__,
                    actor_id=__context__.actor_id,
                ).{{ method.name }}(
                    request,
                    schedule=self._when,
                )

            {% endif %}
            {% endfor %}

        return Tasks(when)

    class Effects(resemble.aio.state_managers.Effects):
        def __init__(
            self,
            *,
            state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
            response: Optional[google.protobuf.message.Message] = None,
            tasks: Optional[list[TaskEffect]] = None
        ):
            assert_type(state, [{{ service.options.state_pb2_name }}.{{ service.options.state_name }}])

            super().__init__(state=state, response=response, tasks=tasks)

    {% for method in service.methods %}
    {% if method.options.kind == 'writer' %}
    class {{ method.name }}Effects(Effects):
        def __init__(
            self,
            *,
            state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
            response: {{ method.output_type }},
            tasks: Optional[list[TaskEffect]] = None
        ):
            assert_type(state, [{{ service.options.state_pb2_name }}.{{ service.options.state_name }}])
            assert_type(response, [{{ method.output_type }}])

            super().__init__(state=state, response=response, tasks=tasks)

    {% endif %}

    {% endfor %}

    class InlineWriterCallable(typing.Protocol):
        async def __call__(
            self,
            context: WriterContext,
            state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }}
        ) -> {{ service.name }}Servicer.Effects:
            ...

    async def read(
        self, context: TransactionContext | WorkflowContext
    ) -> {{ service.options.state_pb2_name }}.{{ service.options.state_name }}:
        """Read the current state within a transaction."""
        assert_type(context, [TransactionContext, WorkflowContext])

        if self._middleware is None:
            raise RuntimeError(
                'Resemble middleware was not created; '
                'are you using this class without Resemble?'
            )

        return await self._middleware._state_manager.read(
            context, self.__state_type__
        )

    async def write(
        self,
        context: TransactionContext | WorkflowContext,
        writer: InlineWriterCallable,
        __options__: Optional[resemble.aio.call.Options] = None,
    ):
        """Perform an "inline write" within a transaction or task."""
        assert_type(context, [TransactionContext, WorkflowContext])

        if self._middleware is None:
            raise RuntimeError(
                'Resemble middleware was not created; '
                'are you using this class without Resemble?'
            )

        idempotency: Optional[resemble.aio.idempotency.Idempotency] = None
        metadata: Optional[resemble.aio.types.GrpcMetadata] = None

        if __options__ is not None:
            if __options__.idempotency_key is not None:
                idempotency = Idempotency(key=__options__.idempotency_key)
            elif __options__.idempotency_alias is not None:
                idempotency = Idempotency(alias=__options__.idempotency_alias)
            if __options__.metadata is not None:
                metadata = __options__.metadata

        if metadata is None:
            metadata = ()

        headers = Headers(
            application_id=context.application_id,
            service_name=self.__service_name__,
            actor_id=context.actor_id,
            transaction_id=context.transaction_id,
            transaction_coordinator_service=context
            .transaction_coordinator_service,
            transaction_coordinator_actor_id=context
            .transaction_coordinator_actor_id
        )

        metadata += headers.to_grpc_metadata()

        idempotency_key: Optional[str]
        with context.idempotently(
            service=self.__service_name__,
            actor_id=context.actor_id,
            method=None,
            request=None,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:

            if any(t[0] == resemble.aio.headers.IDEMPOTENCY_KEY_HEADER for t in metadata):
                raise ValueError(
                    f"Do not set '{resemble.aio.headers.IDEMPOTENCY_KEY_HEADER}' metadata yourself"
                )

            if idempotency_key is not None:
                metadata += (
                    (resemble.aio.headers.IDEMPOTENCY_KEY_HEADER, idempotency_key),
                )

            with self._middleware.use_context(
                headers=Headers.from_grpc_metadata(metadata),
                context_type=WriterContext,
            ) as writer_context:
                # Check if we already have performed this mutation!
                #
                # We do this _before_ calling 'transactionally()' because
                # if this call is for a transaction method _and_ we've
                # already performed the transaction then we don't want to
                # become a transaction participant (again) we just want to
                # return the transaction's response.
                idempotent_mutation = (
                    self._middleware._state_manager.check_for_idempotent_mutation(
                        writer_context
                    )
                )

                if idempotent_mutation is not None:
                    # NOTE: invariant for now is that inline writers can't
                    # have responses which we also check for below.
                    assert len(idempotent_mutation.response) == 0
                    return

                async with self._middleware._state_manager.transactionally(
                    writer_context, self._middleware.tasks_dispatcher
                ) as transaction:
                    async with self._middleware._state_manager.writer(
                        writer_context,
                        self.__state_type__,
                        transaction=transaction,
                    ) as (state, state_manager_writer):
                        effects: {{ service.name }}Servicer.Effects = await writer(
                            context=writer_context, state=state
                        )

                        assert_type(
                            effects,
                            [{{ service.name }}Servicer.Effects],
                            may_be_subclass=False,
                        )

                        # TODO(benh): figure out if we want to support
                        # returning a response because we don't know how
                        # to parse it from an idempotent mutation.
                        if effects.response is not None:
                            raise ValueError(
                                'Returning a response from an inline writer '
                                'is not supported'
                            )

                        # All idempotent mutations require a reponse, so
                        # for now we just use `Empty`.
                        effects.response = empty_pb2.Empty()

                        if effects.tasks is not None:
                            # NOTE: we validate tasks added as part of a
                            # transaction when we prepare.
                            if transaction is None:
                                await self._middleware.tasks_dispatcher.validate(
                                    effects.tasks
                                )

                        await state_manager_writer.complete(effects)

                        if effects.tasks is not None:
                            if transaction is None:
                                self._middleware.tasks_dispatcher.dispatch(effects.tasks)
                            else:
                                assert all(
                                    task.task_id.service == transaction.service
                                    for task in effects.tasks
                                ), 'Task service does not match transaction service'
                                transaction.tasks.extend(effects.tasks)

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {% if method.options.kind == 'reader' %}
    @abstractmethod
    async def {{ method.name }}(
        self,
        context: ReaderContext,
        {% if not method.options.state_streaming %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% else %}
        states: AsyncIterable[{{ service.options.state_pb2_name }}.{{ service.options.state_name }}],
        {% endif %}
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        raise NotImplementedError
        {% if method.server_streaming %}
        yield  # Necessary for type checking.
        {% endif %}
    {% elif method.options.kind == 'writer' %}
    @abstractmethod
    async def {{ method.name }}(
        self,
        context: WriterContext,
        {% if not method.options.constructor %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% endif %}
        request: {{ method.input_type }},
    ) -> {{ method.name }}Effects:
        raise NotImplementedError
    {% elif method.options.kind == 'transaction' %}
    @abstractmethod
    async def {{ method.name }}(
        self,
        context: TransactionContext,
        request: {{ method.input_type }},
    ) -> {{ method.output_type }}:
        raise NotImplementedError
    {% elif method.options.kind == 'workflow' %}
    @abstractmethod
    async def {{ method.name }}(
        self,
        context: WorkflowContext,
        request: {{ method.input_type }},
    ) -> {{ method.output_type }} | resemble.aio.tasks.Loop:
        raise NotImplementedError
    {% endif %}

    {% endfor %}

class {{ service.name }}:

    Interface: TypeAlias = {{ service.name }}Servicer

    Effects: TypeAlias = {{ service.name }}Servicer.Effects

    Authorizer: TypeAlias = {{ service.name }}Authorizer

    {% for method in service.methods %}
    {% if 'task' in method.options or method.options.kind == 'workflow' %}
    class {{ method.name }}Future:
        """Represents a future corresponding to a task running on the
        actor. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context_or_workflow: Context | Workflow,
            *,
            task_id: tasks_pb2.TaskId,
        ):
            self._channel_manager = context_or_workflow.channel_manager
            self._task_id = task_id

        @property
        def task_id(self):
            return self._task_id

        def __await__(self):
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task():
                channel = self._channel_manager.get_channel_from_service_name(
                    self._task_id.service, self._task_id.actor_id
                )

                stub = tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=Headers(
                            service_name=self._task_id.service,
                            actor_id=self._task_id.actor_id,
                            # TODO(benh): will eventually be necessary to
                            # disambiguate between applications.
                            application_id=None,
                        ).to_grpc_metadata(),
                    )
                except grpc.aio.AioRpcError as error:
                    if error.code() == grpc.StatusCode.NOT_FOUND:
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise resemble.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response = {{ method.output_type }}()

                    if (
                        wait_for_task_response.response.TypeName() !=
                        response.DESCRIPTOR.full_name
                    ):
                        raise resemble.aio.aborted.SystemAborted(
                            resemble.v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{wait_for_task_response.response.TypeName()}' "
                            "but expecting type '{{ method.output_type }}'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    wait_for_task_response.response.Unpack(response)
                    return response

            return wait_for_task().__await__()
    {% endif %}

    {% if method.options.kind == 'writer' %}
    {{ method.name }}Effects: TypeAlias = Interface.{{ method.name }}Effects
    {% endif %}

    class {{ method.name }}Aborted(resemble.aio.aborted.Aborted):

        {% if method.options.errors|length > 0 %}
        MethodError = Union[
            {% for error in method.options.errors.values() -%}
            {{ error.py_type }}{%- if not loop.last -%}, {%- endif -%}
            {% endfor %}
        ]
        {% endif %}

        Error = Union[
            {% if method.options.errors|length > 0 %}
            MethodError,
            {% endif %}
            resemble.aio.aborted.GrpcError,
            resemble.aio.aborted.ResembleError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
            {% for error in method.options.errors.values() -%}
            {{ error.py_type }}{%- if not loop.last -%}, {%- endif -%}
            {% endfor %}
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            resemble.aio.aborted.GRPC_ERROR_TYPES +
            resemble.aio.aborted.RESEMBLE_ERROR_TYPES
        )

        _error: Error
        _code: grpc.StatusCode
        _message: Optional[str]

        def __init__(
            self,
            error: {% if method.options.errors|length > 0 %}MethodError | {% endif %} resemble.aio.aborted.GrpcError,
            *,
            message: Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + resemble.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Resemble specific or declared method error.
                code = grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> grpc.StatusCode:
            return self._code

        @property
        def message(self) -> Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: google.protobuf.message.Message) -> bool:
            {% for name in method.options.errors.keys() %}
            {% if loop.first %}
            if message.DESCRIPTOR.full_name == '{{ name }}':
            {% else %}
            elif message.DESCRIPTOR.full_name == '{{ name }}':
            {% endif %}
                return True
            {% endfor %}
            return False

    {% endfor %}

    {% for method in service.methods %}
    {%- if 'task' in method.options or method.options.kind == 'workflow' %}
    {# TODO(benh): support constructor "tasks" and workflows. #}
    {%- else %}
    {% if (method.options.kind == 'writer' and method.options.writer.constructor) or (method.options.kind == 'transactions' and method.options.transaction.constructor) %}
    @classmethod
    async def {{ method.name }}(
        cls,
        __actor_id__: ActorId,
        __context_or_workflow__: {% if method.options.kind == 'writer' %}TransactionContext | {% endif %}WorkflowContext | Workflow,
        __options__: Optional[resemble.aio.call.Options] = None,
        {% for name, types in method.input_type_fields.items() %}
        {% if loop.first %}
        *,
        {% endif %}
        {{ name }}: Optional[{{ types.py_type }}] = None,
        {% endfor %}
    ) -> tuple[{{ service.name }}.WeakReference, {{ method.output_type }}]:
        {% for name, types in method.input_type_fields.items() %}
        if {{ name }} is not None and not isinstance(
            {{ name }},
            {# NOTE: split at '[' so we don't include generic type parameters. #}
            {{ types.py_type.split('[')[0] }},
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'{{ method.input_type }}': field '{{ name }}' is not "
                f"of required type '{{ types.py_type }}'"
            )
        {% endfor %}
        # TODO: mypy-protobuf declares that
        # `google.protobuf.message.Message` constructor arguments are
        # always non-None, when in reality they are optional.
        request = {{ method.input_type }}(
            {% for name in method.input_type_fields %}
            {{ name }}={{ name }},  # type: ignore[arg-type]
            {% endfor %}
        )
        idempotency: Optional[resemble.aio.idempotency.Idempotency] = None
        metadata: Optional[resemble.aio.types.GrpcMetadata] = None
        bearer_token: Optional[str] = None
        if __options__ is not None:
            if __options__.idempotency_key is not None:
                idempotency = Idempotency(key=__options__.idempotency_key)
            elif __options__.idempotency_alias is not None:
                idempotency = Idempotency(alias=__options__.idempotency_alias)
            if __options__.metadata is not None:
                metadata = __options__.metadata
            if __options__.bearer_token is not None:
                bearer_token = __options__.bearer_token

        if isinstance(__context_or_workflow__, WorkflowContext) and idempotency is None:
            raise ValueError(
                'Calls to mutators within a `workflow` must use idempotency'
            )

        reference = cls.lookup(__actor_id__, bearer_token=bearer_token)
        return (
            reference,
            await reference._writer(__context_or_workflow__).{{ method.name }}(
                request,
                idempotency=idempotency,
                metadata=metadata,
                bearer_token=bearer_token,
            )
        )
    {% endif %}
    {% endif %}

    {% endfor %}

    class WeakReference:

        def __init__(
            self,
            actor_id: str,
            *,
            bearer_token: Optional[str] = None,
        ):
            resemble.aio.call.validate_ascii(
                actor_id,
                'actor_id',
                MAX_ACTOR_ID_LENGTH,
                InvalidActorIdError,
            )
            self._actor_id = actor_id
            self._reader_stub: Optional[{{ service.name }}ReaderStub] = None
            self._writer_stub: Optional[{{ service.name }}WriterStub] = None
            self._workflow_stub: Optional[{{ service.name }}WorkflowStub] = None
            self._tasks_stub: Optional[{{ service.name }}TasksStub] = None
            self._bearer_token = bearer_token

        def _reader(
            self,
            context_or_workflow: ReaderContext | WriterContext | TransactionContext | WorkflowContext | Workflow,
        ) -> {{ service.name }}ReaderStub:
            if self._reader_stub is None:
                self._reader_stub = {{ service.name }}ReaderStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._reader_stub is not None
            assert self._reader_stub._idempotency_manager == context_or_workflow
            return self._reader_stub

        def _writer(
            self,
            context_or_workflow: TransactionContext | WorkflowContext | Workflow,
        ) -> {{ service.name }}WriterStub:
            if self._writer_stub is None:
                self._writer_stub = {{ service.name }}WriterStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._writer_stub is not None
            assert self._writer_stub._idempotency_manager == context_or_workflow
            return self._writer_stub

        def _workflow(
            self,
            context_or_workflow: WorkflowContext | Workflow,
        ) -> {{ service.name }}WorkflowStub:
            if self._workflow_stub is None:
                self._workflow_stub = {{ service.name }}WorkflowStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._workflow_stub is not None
            assert self._workflow_stub._idempotency_manager == context_or_workflow
            return self._workflow_stub

        def _tasks(
            self,
            context_or_workflow: TransactionContext | WorkflowContext | Workflow,
        ) -> {{ service.name }}TasksStub:
            if self._tasks_stub is None:
                self._tasks_stub = {{ service.name }}TasksStub(
                    context_or_workflow=context_or_workflow,
                    actor_id=self._actor_id,
                    bearer_token=self._bearer_token,
                )
            assert self._tasks_stub is not None
            assert self._tasks_stub._idempotency_manager == context_or_workflow
            return self._tasks_stub

        def schedule(
            self,
            *,
            when: Optional[datetime | timedelta] = None,
        ):
            class Tasks:
                def __init__(
                    self,
                    tasks: Callable[[TransactionContext | WorkflowContext | Workflow], {{ service.name }}TasksStub],
                    *,
                    when: Optional[datetime | timedelta] = None,
                ):
                    self._tasks = tasks
                    self._when = when

                # {{ service.name }} callable tasks:
                {% for method in service.methods %}
                {%- if 'task' in method.options or method.options.kind == 'workflow' %}
                async def {{ method.name }}(
                    self,
                    __context_or_workflow__: TransactionContext | WorkflowContext | Workflow,
                    __options__: Optional[resemble.aio.call.Options] = None,
                    {% for name, types in method.input_type_fields.items() %}
                    {% if loop.first %}
                    *,
                    {% endif %}
                    {{ name }}: Optional[{{ types.py_type }}] = None,
                    {% endfor %}
                ) -> {{ service.name}}.{{ method.name }}Future:
                    {% for name, types in method.input_type_fields.items() %}
                    if {{ name }} is not None and not isinstance(
                        {{ name }},
                        {# NOTE: split at '[' so we don't include generic type parameters. #}
                        {{ types.py_type.split('[')[0] }},
                    ):
                        raise TypeError(
                            f"Can not construct protobuf message of type "
                            f"'{{ method.input_type }}': field '{{ name }}' is not "
                            f"of required type '{{ types.py_type }}'"
                        )
                    {% endfor %}
                    # TODO: mypy-protobuf declares that
                    # `google.protobuf.message.Message` constructor arguments are
                    # always non-None, when in reality they are optional.
                    request = {{ method.input_type }}(
                        {% for name in method.input_type_fields %}
                        {{ name }}={{ name }},  # type: ignore[arg-type]
                        {% endfor %}
                    )
                    idempotency: Optional[resemble.aio.idempotency.Idempotency] = None
                    metadata: Optional[resemble.aio.types.GrpcMetadata] = None
                    bearer_token: Optional[str] = None
                    if __options__ is not None:
                        if __options__.idempotency_key is not None:
                            idempotency = Idempotency(key=__options__.idempotency_key)
                        elif __options__.idempotency_alias is not None:
                            idempotency = Idempotency(alias=__options__.idempotency_alias)
                        if __options__.metadata is not None:
                            metadata = __options__.metadata
                        if __options__.bearer_token is not None:
                            bearer_token = __options__.bearer_token

                    if isinstance(__context_or_workflow__, WorkflowContext) and idempotency is None:
                        raise ValueError(
                            'Calls to mutators within a `workflow` must use idempotency'
                        )

                    if self._when is not None:
                        if metadata is None:
                            metadata = ()

                        schedule = (datetime.now() + self._when) if isinstance(
                            self._when, timedelta
                        ) else self._when

                        metadata += (
                            (resemble.aio.headers.TASK_SCHEDULE, schedule.isoformat()),
                        )

                    return {{ service.name }}.{{ method.name }}Future(
                        __context_or_workflow__,
                        task_id=await self._tasks(__context_or_workflow__).{{ method.name }}(
                            request,
                            idempotency=idempotency,
                            metadata=metadata,
                            bearer_token=bearer_token,
                        )
                    )

                {% endif %}
                {% endfor %}

            return Tasks(self._tasks, when=when)

        # {{ service.name }} specific methods:
        {% for method in service.methods %}
        {%- if 'task' in method.options %}
        {# Task code is generated above as part of `schedule()`. #}
        {%- elif method.options.kind == 'reader' %}
        async def {{ method.name }}(
            self,
            __context_or_workflow__: ReaderContext | WriterContext | TransactionContext | WorkflowContext | Workflow,
            __options__: Optional[resemble.aio.call.Options] = None,
            {% if not method.client_streaming %}
            {% for name, types in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: Optional[{{ types.py_type }}] = None,
            {% endfor %}
            {% else %}
            *,
            requests: AsyncIterable[{{ method.input_type }}],
            {% endif %}
        {% if not method.server_streaming %}
        ) -> {{ method.output_type }}:
        {% else %}
        ) -> AsyncIterable[{{ method.output_type }}]:
        {% endif %}
            {% if not method.client_streaming %}
            {% for name, types in method.input_type_fields.items() %}
            if {{ name }} is not None and not isinstance(
                {{ name }},
                {# NOTE: split at '[' so we don't include generic type parameters. #}
                {{ types.py_type.split('[')[0] }},
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'{{ method.input_type }}': field '{{ name }}' is not "
                    f"of required type '{{ types.py_type }}'"
                )
            {% endfor %}
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            request = {{ method.input_type }}(
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},  # type: ignore[arg-type]
                {% endfor %}
            )
            {% endif %}
            metadata: Optional[resemble.aio.types.GrpcMetadata] = None
            bearer_token: Optional[str] = None
            if __options__ is not None:
                if __options__.metadata is not None:
                    metadata = __options__.metadata
                if __options__.bearer_token is not None:
                    bearer_token = __options__.bearer_token
            {% if not method.server_streaming %}
            return await self._reader(__context_or_workflow__).{{ method.name }}(
                request{% if method.client_streaming %}s{% endif %},
                metadata=metadata,
                bearer_token=bearer_token,
            )
            {% else %}
            call = self._reader(__context_or_workflow__).{{ method.name }}(
                request{% if method.client_streaming %}s{% endif %},
                metadata=metadata,
            )
            async for response in call:
                yield response
            {% endif %}
        {% elif method.options.kind == 'writer' %}
        async def {{ method.name }}(
            self,
            __context_or_workflow__: TransactionContext | WorkflowContext | Workflow,
            __options__: Optional[resemble.aio.call.Options] = None,
            {% for name, types in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: Optional[{{ types.py_type }}] = None,
            {% endfor %}
        ) -> {{ method.output_type }}:
            {% for name, types in method.input_type_fields.items() %}
            if {{ name }} is not None and not isinstance(
                {{ name }},
                {# NOTE: split at '[' so we don't include generic type parameters. #}
                {{ types.py_type.split('[')[0] }},
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'{{ method.input_type }}': field '{{ name }}' is not "
                    f"of required type '{{ types.py_type }}'"
                )
            {% endfor %}
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            request = {{ method.input_type }}(
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},  # type: ignore[arg-type]
                {% endfor %}
            )
            idempotency: Optional[resemble.aio.idempotency.Idempotency] = None
            metadata: Optional[resemble.aio.types.GrpcMetadata] = None
            bearer_token: Optional[str] = None
            if __options__ is not None:
                if __options__.idempotency_key is not None:
                    idempotency = Idempotency(key=__options__.idempotency_key)
                elif __options__.idempotency_alias is not None:
                    idempotency = Idempotency(alias=__options__.idempotency_alias)
                if __options__.metadata is not None:
                    metadata = __options__.metadata
                if __options__.bearer_token is not None:
                    bearer_token = __options__.bearer_token

            if isinstance(__context_or_workflow__, WorkflowContext) and idempotency is None:
                raise ValueError(
                    'Calls to mutators within a `workflow` must use idempotency'
                )

            return await self._writer(__context_or_workflow__).{{ method.name }}(
                request,
                idempotency=idempotency,
                metadata=metadata,
                bearer_token=bearer_token,
            )
        {% elif method.options.kind == 'transaction' %}
        async def {{ method.name }}(
            self,
            __context_or_workflow__: WorkflowContext | Workflow,
            __options__: Optional[resemble.aio.call.Options] = None,
            {% for name, types in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: Optional[{{ types.py_type }}] = None,
            {% endfor %}
        ) -> {{ method.output_type }}:
            {% for name, types in method.input_type_fields.items() %}
            if {{ name }} is not None and not isinstance(
                {{ name }},
                {# NOTE: split at '[' so we don't include generic type parameters. #}
                {{ types.py_type.split('[')[0] }},
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'{{ method.input_type }}': field '{{ name }}' is not "
                    f"of required type '{{ types.py_type }}'"
                )
            {% endfor %}
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            request = {{ method.input_type }}(
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},  # type: ignore[arg-type]
                {% endfor %}
            )
            idempotency: Optional[resemble.aio.idempotency.Idempotency] = None
            metadata: Optional[resemble.aio.types.GrpcMetadata] = None
            bearer_token: Optional[str] = None
            if __options__ is not None:
                if __options__.idempotency_key is not None:
                    idempotency = Idempotency(key=__options__.idempotency_key)
                elif __options__.idempotency_alias is not None:
                    idempotency = Idempotency(alias=__options__.idempotency_alias)
                if __options__.metadata is not None:
                    metadata = __options__.metadata
                if __options__.bearer_token is not None:
                    bearer_token = __options__.bearer_token

            if isinstance(__context_or_workflow__, WorkflowContext) and idempotency is None:
                    raise ValueError(
                        'Calls to mutators within a `workflow` must use idempotency'
                    )

            return await self._workflow(__context_or_workflow__).{{ method.name }}(
                request,
                idempotency=idempotency,
                metadata=metadata,
                bearer_token=bearer_token,
            )
        {% endif %}

        {% endfor %}

    @classmethod
    def lookup(
        cls,
        actor_id: str,
        *,
        bearer_token: Optional[str] = None,
    ) -> {{ service.name }}.WeakReference:
        return {{ service.name }}.WeakReference(
            actor_id, bearer_token=bearer_token
        )


class {{ service.name }}ServicerNodeAdaptor({{ service.name }}.Interface):

    def __init__(self):
        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        self._js_servicer_reference = self._construct_js_servicer()  # type: ignore[attr-defined]

    # {{ service.name }} specific methods:
    {% for method in service.methods %}
    {% if method.options.kind == 'reader' %}
    async def {{ method.name }}(
        self,
        context: ReaderContext,
        {% if not method.options.state_streaming %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% else %}
        states: AsyncIterable[{{ service.options.state_pb2_name }}.{{ service.options.state_name }}],
        {% endif %}
        {% if not method.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: AsyncIterable[{{ method.input_type }}],
        {% endif %}
    {% if not method.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        {% if method.client_streaming or method.options.state_streaming or method.server_streaming %}
        raise NotImplementedError
        {% else %}
        json_state = google.protobuf.json_format.MessageToJson(state)
        json_request = google.protobuf.json_format.MessageToJson(request)

        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        json_response = await self._reader(  # type: ignore[attr-defined]
            self._js_servicer_reference,
            '{{ method.name }}',
            context,
            json_state,
            json_request,
        )

        return google.protobuf.json_format.Parse(
            json_response,
            {{ method.output_type }}(),
        )
        {% endif %}
        {% if method.server_streaming %}
        yield  # Necessary for type checking.
        {% endif %}
    {% elif method.options.kind == 'writer' %}
    async def {{ method.name }}(
        self,
        context: WriterContext,
        {% if not method.options.constructor %}
        state: {{ service.options.state_pb2_name }}.{{ service.options.state_name }},
        {% endif %}
        request: {{ method.input_type }},
    ) -> {{ service.name }}.{{ method.name }}Effects:
        {% if not method.options.constructor %}
        json_state = google.protobuf.json_format.MessageToJson(state)
        {% endif %}

        json_request = google.protobuf.json_format.MessageToJson(request)

        # TODO: See https://github.com/reboot-dev/respect/issues/2339
        json_effects = await self._writer(  # type: ignore[attr-defined]
            self._js_servicer_reference,
            '{{ method.name }}',
            context,
            {% if not method.options.constructor %}
            json_state,
            {% else %}
            None,
            {% endif %}
            json_request,
        )

        effects = json.loads(json_effects)

        assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

        return {{ service.name }}.{{ method.name }}Effects(
            state=google.protobuf.json_format.ParseDict(
                effects['state'],
                {{ service.options.state_pb2_name }}.{{ service.options.state_name }}(),
            ),
            response=google.protobuf.json_format.ParseDict(
                effects['response'],
                {{ method.output_type }}(),
            ),
        )
    {% elif method.options.kind == 'transaction' %}
    async def {{ method.name }}(
        self,
        context: TransactionContext,
        request: {{ method.input_type }},
    ) -> {{ method.output_type }}:
        raise NotImplementedError
    {% endif %}

    {% endfor %}


class {{ service.name }}NodeAdaptor({{ service.name }}.WeakReference):

    async def _reader(  # type: ignore[override]
        self,
        method: str,
        context: ReaderContext | WriterContext | TransactionContext | WorkflowContext | Workflow,
        request_type: type[google.protobuf.message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        google.protobuf.json_format.Parse(json_request, request)

        response = await getattr(super()._reader(context), method)(request)

        return google.protobuf.json_format.MessageToJson(response)

    async def _writer(  # type: ignore[override]
        self,
        method: str,
        context: TransactionContext | WorkflowContext | Workflow,
        request_type: type[google.protobuf.message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        google.protobuf.json_format.Parse(json_request, request)

        response = await getattr(super()._writer(context), method)(request)

        return google.protobuf.json_format.MessageToJson(response)

{% endfor %}
# yapf: enable
