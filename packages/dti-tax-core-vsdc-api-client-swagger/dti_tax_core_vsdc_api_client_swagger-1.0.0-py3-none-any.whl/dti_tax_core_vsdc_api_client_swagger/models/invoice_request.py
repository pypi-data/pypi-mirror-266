# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class InvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_and_time_of_issue': 'datetime',
        'cashier': 'str',
        'buyer_id': 'str',
        'buyer_cost_center_id': 'str',
        'invoice_type': 'int',
        'transaction_type': 'int',
        'payment': 'list[Payment]',
        'invoice_number': 'str',
        'referent_document_number': 'str',
        'referent_document_dt': 'datetime',
        'options': 'dict(str, str)',
        'items': 'list[Item]'
    }

    attribute_map = {
        'date_and_time_of_issue': 'dateAndTimeOfIssue',
        'cashier': 'cashier',
        'buyer_id': 'buyerId',
        'buyer_cost_center_id': 'buyerCostCenterId',
        'invoice_type': 'invoiceType',
        'transaction_type': 'transactionType',
        'payment': 'payment',
        'invoice_number': 'invoiceNumber',
        'referent_document_number': 'referentDocumentNumber',
        'referent_document_dt': 'referentDocumentDT',
        'options': 'options',
        'items': 'items'
    }

    def __init__(self, date_and_time_of_issue=None, cashier=None, buyer_id=None, buyer_cost_center_id=None, invoice_type=None, transaction_type=None, payment=None, invoice_number=None, referent_document_number=None, referent_document_dt=None, options=None, items=None, _configuration=None):  # noqa: E501
        """InvoiceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_and_time_of_issue = None
        self._cashier = None
        self._buyer_id = None
        self._buyer_cost_center_id = None
        self._invoice_type = None
        self._transaction_type = None
        self._payment = None
        self._invoice_number = None
        self._referent_document_number = None
        self._referent_document_dt = None
        self._options = None
        self._items = None
        self.discriminator = None

        if date_and_time_of_issue is not None:
            self.date_and_time_of_issue = date_and_time_of_issue
        if cashier is not None:
            self.cashier = cashier
        if buyer_id is not None:
            self.buyer_id = buyer_id
        if buyer_cost_center_id is not None:
            self.buyer_cost_center_id = buyer_cost_center_id
        self.invoice_type = invoice_type
        self.transaction_type = transaction_type
        self.payment = payment
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if referent_document_number is not None:
            self.referent_document_number = referent_document_number
        if referent_document_dt is not None:
            self.referent_document_dt = referent_document_dt
        if options is not None:
            self.options = options
        self.items = items

    @property
    def date_and_time_of_issue(self):
        """Gets the date_and_time_of_issue of this InvoiceRequest.  # noqa: E501


        :return: The date_and_time_of_issue of this InvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_and_time_of_issue

    @date_and_time_of_issue.setter
    def date_and_time_of_issue(self, date_and_time_of_issue):
        """Sets the date_and_time_of_issue of this InvoiceRequest.


        :param date_and_time_of_issue: The date_and_time_of_issue of this InvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._date_and_time_of_issue = date_and_time_of_issue

    @property
    def cashier(self):
        """Gets the cashier of this InvoiceRequest.  # noqa: E501


        :return: The cashier of this InvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._cashier

    @cashier.setter
    def cashier(self, cashier):
        """Sets the cashier of this InvoiceRequest.


        :param cashier: The cashier of this InvoiceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cashier is not None and len(cashier) > 50):
            raise ValueError("Invalid value for `cashier`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cashier is not None and len(cashier) < 0):
            raise ValueError("Invalid value for `cashier`, length must be greater than or equal to `0`")  # noqa: E501

        self._cashier = cashier

    @property
    def buyer_id(self):
        """Gets the buyer_id of this InvoiceRequest.  # noqa: E501


        :return: The buyer_id of this InvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """Sets the buyer_id of this InvoiceRequest.


        :param buyer_id: The buyer_id of this InvoiceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                buyer_id is not None and len(buyer_id) > 20):
            raise ValueError("Invalid value for `buyer_id`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                buyer_id is not None and len(buyer_id) < 0):
            raise ValueError("Invalid value for `buyer_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._buyer_id = buyer_id

    @property
    def buyer_cost_center_id(self):
        """Gets the buyer_cost_center_id of this InvoiceRequest.  # noqa: E501


        :return: The buyer_cost_center_id of this InvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._buyer_cost_center_id

    @buyer_cost_center_id.setter
    def buyer_cost_center_id(self, buyer_cost_center_id):
        """Sets the buyer_cost_center_id of this InvoiceRequest.


        :param buyer_cost_center_id: The buyer_cost_center_id of this InvoiceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                buyer_cost_center_id is not None and len(buyer_cost_center_id) > 50):
            raise ValueError("Invalid value for `buyer_cost_center_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                buyer_cost_center_id is not None and len(buyer_cost_center_id) < 0):
            raise ValueError("Invalid value for `buyer_cost_center_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._buyer_cost_center_id = buyer_cost_center_id

    @property
    def invoice_type(self):
        """Gets the invoice_type of this InvoiceRequest.  # noqa: E501


        :return: The invoice_type of this InvoiceRequest.  # noqa: E501
        :rtype: int
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this InvoiceRequest.


        :param invoice_type: The invoice_type of this InvoiceRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and invoice_type is None:
            raise ValueError("Invalid value for `invoice_type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_type not in allowed_values):
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InvoiceRequest.  # noqa: E501


        :return: The transaction_type of this InvoiceRequest.  # noqa: E501
        :rtype: int
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InvoiceRequest.


        :param transaction_type: The transaction_type of this InvoiceRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                transaction_type not in allowed_values):
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def payment(self):
        """Gets the payment of this InvoiceRequest.  # noqa: E501


        :return: The payment of this InvoiceRequest.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this InvoiceRequest.


        :param payment: The payment of this InvoiceRequest.  # noqa: E501
        :type: list[Payment]
        """
        if self._configuration.client_side_validation and payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")  # noqa: E501

        self._payment = payment

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InvoiceRequest.  # noqa: E501


        :return: The invoice_number of this InvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InvoiceRequest.


        :param invoice_number: The invoice_number of this InvoiceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                invoice_number is not None and len(invoice_number) > 60):
            raise ValueError("Invalid value for `invoice_number`, length must be less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_number is not None and len(invoice_number) < 0):
            raise ValueError("Invalid value for `invoice_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def referent_document_number(self):
        """Gets the referent_document_number of this InvoiceRequest.  # noqa: E501


        :return: The referent_document_number of this InvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._referent_document_number

    @referent_document_number.setter
    def referent_document_number(self, referent_document_number):
        """Sets the referent_document_number of this InvoiceRequest.


        :param referent_document_number: The referent_document_number of this InvoiceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                referent_document_number is not None and len(referent_document_number) > 50):
            raise ValueError("Invalid value for `referent_document_number`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                referent_document_number is not None and len(referent_document_number) < 0):
            raise ValueError("Invalid value for `referent_document_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._referent_document_number = referent_document_number

    @property
    def referent_document_dt(self):
        """Gets the referent_document_dt of this InvoiceRequest.  # noqa: E501


        :return: The referent_document_dt of this InvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._referent_document_dt

    @referent_document_dt.setter
    def referent_document_dt(self, referent_document_dt):
        """Sets the referent_document_dt of this InvoiceRequest.


        :param referent_document_dt: The referent_document_dt of this InvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._referent_document_dt = referent_document_dt

    @property
    def options(self):
        """Gets the options of this InvoiceRequest.  # noqa: E501


        :return: The options of this InvoiceRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this InvoiceRequest.


        :param options: The options of this InvoiceRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    @property
    def items(self):
        """Gets the items of this InvoiceRequest.  # noqa: E501


        :return: The items of this InvoiceRequest.  # noqa: E501
        :rtype: list[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceRequest.


        :param items: The items of this InvoiceRequest.  # noqa: E501
        :type: list[Item]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceRequest):
            return True

        return self.to_dict() != other.to_dict()
