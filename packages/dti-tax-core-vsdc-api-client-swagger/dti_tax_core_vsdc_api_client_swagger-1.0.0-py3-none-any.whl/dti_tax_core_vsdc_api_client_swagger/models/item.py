# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gtin': 'str',
        'name': 'str',
        'quantity': 'float',
        'labels': 'list[str]',
        'unit_price': 'float',
        'total_amount': 'float',
        'labels_joined': 'str'
    }

    attribute_map = {
        'gtin': 'gtin',
        'name': 'name',
        'quantity': 'quantity',
        'labels': 'labels',
        'unit_price': 'unitPrice',
        'total_amount': 'totalAmount',
        'labels_joined': 'labelsJoined'
    }

    def __init__(self, gtin=None, name=None, quantity=None, labels=None, unit_price=None, total_amount=None, labels_joined=None, _configuration=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gtin = None
        self._name = None
        self._quantity = None
        self._labels = None
        self._unit_price = None
        self._total_amount = None
        self._labels_joined = None
        self.discriminator = None

        if gtin is not None:
            self.gtin = gtin
        self.name = name
        self.quantity = quantity
        self.labels = labels
        self.unit_price = unit_price
        self.total_amount = total_amount
        if labels_joined is not None:
            self.labels_joined = labels_joined

    @property
    def gtin(self):
        """Gets the gtin of this Item.  # noqa: E501


        :return: The gtin of this Item.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Item.


        :param gtin: The gtin of this Item.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gtin is not None and len(gtin) > 14):
            raise ValueError("Invalid value for `gtin`, length must be less than or equal to `14`")  # noqa: E501
        if (self._configuration.client_side_validation and
                gtin is not None and len(gtin) < 8):
            raise ValueError("Invalid value for `gtin`, length must be greater than or equal to `8`")  # noqa: E501

        self._gtin = gtin

    @property
    def name(self):
        """Gets the name of this Item.  # noqa: E501


        :return: The name of this Item.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 2048):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this Item.  # noqa: E501


        :return: The quantity of this Item.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def labels(self):
        """Gets the labels of this Item.  # noqa: E501


        :return: The labels of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Item.


        :param labels: The labels of this Item.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def unit_price(self):
        """Gets the unit_price of this Item.  # noqa: E501


        :return: The unit_price of this Item.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Item.


        :param unit_price: The unit_price of this Item.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def total_amount(self):
        """Gets the total_amount of this Item.  # noqa: E501


        :return: The total_amount of this Item.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Item.


        :param total_amount: The total_amount of this Item.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def labels_joined(self):
        """Gets the labels_joined of this Item.  # noqa: E501


        :return: The labels_joined of this Item.  # noqa: E501
        :rtype: str
        """
        return self._labels_joined

    @labels_joined.setter
    def labels_joined(self, labels_joined):
        """Sets the labels_joined of this Item.


        :param labels_joined: The labels_joined of this Item.  # noqa: E501
        :type: str
        """

        self._labels_joined = labels_joined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Item):
            return True

        return self.to_dict() != other.to_dict()
