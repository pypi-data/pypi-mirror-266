# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class TaxCorePublicConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_name': 'str',
        'server_time_zone': 'str',
        'street': 'str',
        'city': 'str',
        'country': 'str',
        'endpoints': 'dict(str, str)',
        'environment_name': 'str',
        'logo': 'str',
        'ntp_server': 'str',
        'supported_languages': 'list[str]'
    }

    attribute_map = {
        'organization_name': 'organizationName',
        'server_time_zone': 'serverTimeZone',
        'street': 'street',
        'city': 'city',
        'country': 'country',
        'endpoints': 'endpoints',
        'environment_name': 'environmentName',
        'logo': 'logo',
        'ntp_server': 'ntpServer',
        'supported_languages': 'supportedLanguages'
    }

    def __init__(self, organization_name=None, server_time_zone=None, street=None, city=None, country=None, endpoints=None, environment_name=None, logo=None, ntp_server=None, supported_languages=None, _configuration=None):  # noqa: E501
        """TaxCorePublicConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_name = None
        self._server_time_zone = None
        self._street = None
        self._city = None
        self._country = None
        self._endpoints = None
        self._environment_name = None
        self._logo = None
        self._ntp_server = None
        self._supported_languages = None
        self.discriminator = None

        if organization_name is not None:
            self.organization_name = organization_name
        if server_time_zone is not None:
            self.server_time_zone = server_time_zone
        if street is not None:
            self.street = street
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if endpoints is not None:
            self.endpoints = endpoints
        if environment_name is not None:
            self.environment_name = environment_name
        if logo is not None:
            self.logo = logo
        if ntp_server is not None:
            self.ntp_server = ntp_server
        if supported_languages is not None:
            self.supported_languages = supported_languages

    @property
    def organization_name(self):
        """Gets the organization_name of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The organization_name of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this TaxCorePublicConfiguration.


        :param organization_name: The organization_name of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def server_time_zone(self):
        """Gets the server_time_zone of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The server_time_zone of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_time_zone

    @server_time_zone.setter
    def server_time_zone(self, server_time_zone):
        """Sets the server_time_zone of this TaxCorePublicConfiguration.


        :param server_time_zone: The server_time_zone of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._server_time_zone = server_time_zone

    @property
    def street(self):
        """Gets the street of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The street of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this TaxCorePublicConfiguration.


        :param street: The street of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def city(self):
        """Gets the city of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The city of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TaxCorePublicConfiguration.


        :param city: The city of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The country of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxCorePublicConfiguration.


        :param country: The country of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def endpoints(self):
        """Gets the endpoints of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The endpoints of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this TaxCorePublicConfiguration.


        :param endpoints: The endpoints of this TaxCorePublicConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._endpoints = endpoints

    @property
    def environment_name(self):
        """Gets the environment_name of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The environment_name of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this TaxCorePublicConfiguration.


        :param environment_name: The environment_name of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def logo(self):
        """Gets the logo of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The logo of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this TaxCorePublicConfiguration.


        :param logo: The logo of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def ntp_server(self):
        """Gets the ntp_server of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The ntp_server of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ntp_server

    @ntp_server.setter
    def ntp_server(self, ntp_server):
        """Sets the ntp_server of this TaxCorePublicConfiguration.


        :param ntp_server: The ntp_server of this TaxCorePublicConfiguration.  # noqa: E501
        :type: str
        """

        self._ntp_server = ntp_server

    @property
    def supported_languages(self):
        """Gets the supported_languages of this TaxCorePublicConfiguration.  # noqa: E501


        :return: The supported_languages of this TaxCorePublicConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this TaxCorePublicConfiguration.


        :param supported_languages: The supported_languages of this TaxCorePublicConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._supported_languages = supported_languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxCorePublicConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxCorePublicConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxCorePublicConfiguration):
            return True

        return self.to_dict() != other.to_dict()
