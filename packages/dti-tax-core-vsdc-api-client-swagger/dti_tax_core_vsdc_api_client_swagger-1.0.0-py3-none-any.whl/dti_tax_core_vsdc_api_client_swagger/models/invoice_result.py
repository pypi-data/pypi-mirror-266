# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class InvoiceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_by': 'str',
        'sdc_date_time': 'datetime',
        'invoice_counter': 'str',
        'invoice_counter_extension': 'str',
        'invoice_number': 'str',
        'tax_items': 'list[TaxItem]',
        'verification_url': 'str',
        'verification_qr_code': 'str',
        'journal': 'str',
        'messages': 'str',
        'signed_by': 'str',
        'encrypted_internal_data': 'str',
        'signature': 'str',
        'total_counter': 'int',
        'transaction_type_counter': 'int',
        'total_amount': 'float',
        'tax_group_revision': 'int',
        'business_name': 'str',
        'tin': 'str',
        'location_name': 'str',
        'address': 'str',
        'district': 'str',
        'mrc': 'str'
    }

    attribute_map = {
        'requested_by': 'requestedBy',
        'sdc_date_time': 'sdcDateTime',
        'invoice_counter': 'invoiceCounter',
        'invoice_counter_extension': 'invoiceCounterExtension',
        'invoice_number': 'invoiceNumber',
        'tax_items': 'taxItems',
        'verification_url': 'verificationUrl',
        'verification_qr_code': 'verificationQRCode',
        'journal': 'journal',
        'messages': 'messages',
        'signed_by': 'signedBy',
        'encrypted_internal_data': 'encryptedInternalData',
        'signature': 'signature',
        'total_counter': 'totalCounter',
        'transaction_type_counter': 'transactionTypeCounter',
        'total_amount': 'totalAmount',
        'tax_group_revision': 'taxGroupRevision',
        'business_name': 'businessName',
        'tin': 'tin',
        'location_name': 'locationName',
        'address': 'address',
        'district': 'district',
        'mrc': 'mrc'
    }

    def __init__(self, requested_by=None, sdc_date_time=None, invoice_counter=None, invoice_counter_extension=None, invoice_number=None, tax_items=None, verification_url=None, verification_qr_code=None, journal=None, messages=None, signed_by=None, encrypted_internal_data=None, signature=None, total_counter=None, transaction_type_counter=None, total_amount=None, tax_group_revision=None, business_name=None, tin=None, location_name=None, address=None, district=None, mrc=None, _configuration=None):  # noqa: E501
        """InvoiceResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requested_by = None
        self._sdc_date_time = None
        self._invoice_counter = None
        self._invoice_counter_extension = None
        self._invoice_number = None
        self._tax_items = None
        self._verification_url = None
        self._verification_qr_code = None
        self._journal = None
        self._messages = None
        self._signed_by = None
        self._encrypted_internal_data = None
        self._signature = None
        self._total_counter = None
        self._transaction_type_counter = None
        self._total_amount = None
        self._tax_group_revision = None
        self._business_name = None
        self._tin = None
        self._location_name = None
        self._address = None
        self._district = None
        self._mrc = None
        self.discriminator = None

        if requested_by is not None:
            self.requested_by = requested_by
        self.sdc_date_time = sdc_date_time
        self.invoice_counter = invoice_counter
        if invoice_counter_extension is not None:
            self.invoice_counter_extension = invoice_counter_extension
        self.invoice_number = invoice_number
        if tax_items is not None:
            self.tax_items = tax_items
        if verification_url is not None:
            self.verification_url = verification_url
        if verification_qr_code is not None:
            self.verification_qr_code = verification_qr_code
        if journal is not None:
            self.journal = journal
        if messages is not None:
            self.messages = messages
        self.signed_by = signed_by
        self.encrypted_internal_data = encrypted_internal_data
        if signature is not None:
            self.signature = signature
        if total_counter is not None:
            self.total_counter = total_counter
        if transaction_type_counter is not None:
            self.transaction_type_counter = transaction_type_counter
        if total_amount is not None:
            self.total_amount = total_amount
        if tax_group_revision is not None:
            self.tax_group_revision = tax_group_revision
        if business_name is not None:
            self.business_name = business_name
        if tin is not None:
            self.tin = tin
        if location_name is not None:
            self.location_name = location_name
        if address is not None:
            self.address = address
        if district is not None:
            self.district = district
        if mrc is not None:
            self.mrc = mrc

    @property
    def requested_by(self):
        """Gets the requested_by of this InvoiceResult.  # noqa: E501


        :return: The requested_by of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this InvoiceResult.


        :param requested_by: The requested_by of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._requested_by = requested_by

    @property
    def sdc_date_time(self):
        """Gets the sdc_date_time of this InvoiceResult.  # noqa: E501


        :return: The sdc_date_time of this InvoiceResult.  # noqa: E501
        :rtype: datetime
        """
        return self._sdc_date_time

    @sdc_date_time.setter
    def sdc_date_time(self, sdc_date_time):
        """Sets the sdc_date_time of this InvoiceResult.


        :param sdc_date_time: The sdc_date_time of this InvoiceResult.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and sdc_date_time is None:
            raise ValueError("Invalid value for `sdc_date_time`, must not be `None`")  # noqa: E501

        self._sdc_date_time = sdc_date_time

    @property
    def invoice_counter(self):
        """Gets the invoice_counter of this InvoiceResult.  # noqa: E501


        :return: The invoice_counter of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._invoice_counter

    @invoice_counter.setter
    def invoice_counter(self, invoice_counter):
        """Sets the invoice_counter of this InvoiceResult.


        :param invoice_counter: The invoice_counter of this InvoiceResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and invoice_counter is None:
            raise ValueError("Invalid value for `invoice_counter`, must not be `None`")  # noqa: E501

        self._invoice_counter = invoice_counter

    @property
    def invoice_counter_extension(self):
        """Gets the invoice_counter_extension of this InvoiceResult.  # noqa: E501


        :return: The invoice_counter_extension of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._invoice_counter_extension

    @invoice_counter_extension.setter
    def invoice_counter_extension(self, invoice_counter_extension):
        """Sets the invoice_counter_extension of this InvoiceResult.


        :param invoice_counter_extension: The invoice_counter_extension of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._invoice_counter_extension = invoice_counter_extension

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InvoiceResult.  # noqa: E501


        :return: The invoice_number of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InvoiceResult.


        :param invoice_number: The invoice_number of this InvoiceResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def tax_items(self):
        """Gets the tax_items of this InvoiceResult.  # noqa: E501


        :return: The tax_items of this InvoiceResult.  # noqa: E501
        :rtype: list[TaxItem]
        """
        return self._tax_items

    @tax_items.setter
    def tax_items(self, tax_items):
        """Sets the tax_items of this InvoiceResult.


        :param tax_items: The tax_items of this InvoiceResult.  # noqa: E501
        :type: list[TaxItem]
        """

        self._tax_items = tax_items

    @property
    def verification_url(self):
        """Gets the verification_url of this InvoiceResult.  # noqa: E501


        :return: The verification_url of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._verification_url

    @verification_url.setter
    def verification_url(self, verification_url):
        """Sets the verification_url of this InvoiceResult.


        :param verification_url: The verification_url of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._verification_url = verification_url

    @property
    def verification_qr_code(self):
        """Gets the verification_qr_code of this InvoiceResult.  # noqa: E501


        :return: The verification_qr_code of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._verification_qr_code

    @verification_qr_code.setter
    def verification_qr_code(self, verification_qr_code):
        """Sets the verification_qr_code of this InvoiceResult.


        :param verification_qr_code: The verification_qr_code of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._verification_qr_code = verification_qr_code

    @property
    def journal(self):
        """Gets the journal of this InvoiceResult.  # noqa: E501


        :return: The journal of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._journal

    @journal.setter
    def journal(self, journal):
        """Sets the journal of this InvoiceResult.


        :param journal: The journal of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._journal = journal

    @property
    def messages(self):
        """Gets the messages of this InvoiceResult.  # noqa: E501


        :return: The messages of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this InvoiceResult.


        :param messages: The messages of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._messages = messages

    @property
    def signed_by(self):
        """Gets the signed_by of this InvoiceResult.  # noqa: E501


        :return: The signed_by of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._signed_by

    @signed_by.setter
    def signed_by(self, signed_by):
        """Sets the signed_by of this InvoiceResult.


        :param signed_by: The signed_by of this InvoiceResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and signed_by is None:
            raise ValueError("Invalid value for `signed_by`, must not be `None`")  # noqa: E501

        self._signed_by = signed_by

    @property
    def encrypted_internal_data(self):
        """Gets the encrypted_internal_data of this InvoiceResult.  # noqa: E501


        :return: The encrypted_internal_data of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_internal_data

    @encrypted_internal_data.setter
    def encrypted_internal_data(self, encrypted_internal_data):
        """Sets the encrypted_internal_data of this InvoiceResult.


        :param encrypted_internal_data: The encrypted_internal_data of this InvoiceResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and encrypted_internal_data is None:
            raise ValueError("Invalid value for `encrypted_internal_data`, must not be `None`")  # noqa: E501

        self._encrypted_internal_data = encrypted_internal_data

    @property
    def signature(self):
        """Gets the signature of this InvoiceResult.  # noqa: E501


        :return: The signature of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this InvoiceResult.


        :param signature: The signature of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def total_counter(self):
        """Gets the total_counter of this InvoiceResult.  # noqa: E501


        :return: The total_counter of this InvoiceResult.  # noqa: E501
        :rtype: int
        """
        return self._total_counter

    @total_counter.setter
    def total_counter(self, total_counter):
        """Sets the total_counter of this InvoiceResult.


        :param total_counter: The total_counter of this InvoiceResult.  # noqa: E501
        :type: int
        """

        self._total_counter = total_counter

    @property
    def transaction_type_counter(self):
        """Gets the transaction_type_counter of this InvoiceResult.  # noqa: E501


        :return: The transaction_type_counter of this InvoiceResult.  # noqa: E501
        :rtype: int
        """
        return self._transaction_type_counter

    @transaction_type_counter.setter
    def transaction_type_counter(self, transaction_type_counter):
        """Sets the transaction_type_counter of this InvoiceResult.


        :param transaction_type_counter: The transaction_type_counter of this InvoiceResult.  # noqa: E501
        :type: int
        """

        self._transaction_type_counter = transaction_type_counter

    @property
    def total_amount(self):
        """Gets the total_amount of this InvoiceResult.  # noqa: E501


        :return: The total_amount of this InvoiceResult.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InvoiceResult.


        :param total_amount: The total_amount of this InvoiceResult.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def tax_group_revision(self):
        """Gets the tax_group_revision of this InvoiceResult.  # noqa: E501


        :return: The tax_group_revision of this InvoiceResult.  # noqa: E501
        :rtype: int
        """
        return self._tax_group_revision

    @tax_group_revision.setter
    def tax_group_revision(self, tax_group_revision):
        """Sets the tax_group_revision of this InvoiceResult.


        :param tax_group_revision: The tax_group_revision of this InvoiceResult.  # noqa: E501
        :type: int
        """

        self._tax_group_revision = tax_group_revision

    @property
    def business_name(self):
        """Gets the business_name of this InvoiceResult.  # noqa: E501


        :return: The business_name of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this InvoiceResult.


        :param business_name: The business_name of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def tin(self):
        """Gets the tin of this InvoiceResult.  # noqa: E501


        :return: The tin of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._tin

    @tin.setter
    def tin(self, tin):
        """Sets the tin of this InvoiceResult.


        :param tin: The tin of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._tin = tin

    @property
    def location_name(self):
        """Gets the location_name of this InvoiceResult.  # noqa: E501


        :return: The location_name of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this InvoiceResult.


        :param location_name: The location_name of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def address(self):
        """Gets the address of this InvoiceResult.  # noqa: E501


        :return: The address of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InvoiceResult.


        :param address: The address of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def district(self):
        """Gets the district of this InvoiceResult.  # noqa: E501


        :return: The district of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this InvoiceResult.


        :param district: The district of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def mrc(self):
        """Gets the mrc of this InvoiceResult.  # noqa: E501


        :return: The mrc of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._mrc

    @mrc.setter
    def mrc(self, mrc):
        """Sets the mrc of this InvoiceResult.


        :param mrc: The mrc of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._mrc = mrc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceResult):
            return True

        return self.to_dict() != other.to_dict()
