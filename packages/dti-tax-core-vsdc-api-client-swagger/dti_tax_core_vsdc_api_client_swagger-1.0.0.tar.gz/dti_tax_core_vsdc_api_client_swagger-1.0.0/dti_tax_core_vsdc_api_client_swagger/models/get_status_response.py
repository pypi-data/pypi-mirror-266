# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class GetStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sdc_date_time': 'datetime',
        'supported_languages': 'list[str]',
        'uid': 'str',
        'tax_core_api': 'str',
        'current_tax_rates': 'TaxRateGroup',
        'all_tax_rates': 'list[TaxRateGroup]'
    }

    attribute_map = {
        'sdc_date_time': 'sdcDateTime',
        'supported_languages': 'supportedLanguages',
        'uid': 'uid',
        'tax_core_api': 'taxCoreApi',
        'current_tax_rates': 'currentTaxRates',
        'all_tax_rates': 'allTaxRates'
    }

    def __init__(self, sdc_date_time=None, supported_languages=None, uid=None, tax_core_api=None, current_tax_rates=None, all_tax_rates=None, _configuration=None):  # noqa: E501
        """GetStatusResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sdc_date_time = None
        self._supported_languages = None
        self._uid = None
        self._tax_core_api = None
        self._current_tax_rates = None
        self._all_tax_rates = None
        self.discriminator = None

        if sdc_date_time is not None:
            self.sdc_date_time = sdc_date_time
        if supported_languages is not None:
            self.supported_languages = supported_languages
        if uid is not None:
            self.uid = uid
        if tax_core_api is not None:
            self.tax_core_api = tax_core_api
        if current_tax_rates is not None:
            self.current_tax_rates = current_tax_rates
        if all_tax_rates is not None:
            self.all_tax_rates = all_tax_rates

    @property
    def sdc_date_time(self):
        """Gets the sdc_date_time of this GetStatusResponse.  # noqa: E501


        :return: The sdc_date_time of this GetStatusResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._sdc_date_time

    @sdc_date_time.setter
    def sdc_date_time(self, sdc_date_time):
        """Sets the sdc_date_time of this GetStatusResponse.


        :param sdc_date_time: The sdc_date_time of this GetStatusResponse.  # noqa: E501
        :type: datetime
        """

        self._sdc_date_time = sdc_date_time

    @property
    def supported_languages(self):
        """Gets the supported_languages of this GetStatusResponse.  # noqa: E501


        :return: The supported_languages of this GetStatusResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this GetStatusResponse.


        :param supported_languages: The supported_languages of this GetStatusResponse.  # noqa: E501
        :type: list[str]
        """

        self._supported_languages = supported_languages

    @property
    def uid(self):
        """Gets the uid of this GetStatusResponse.  # noqa: E501


        :return: The uid of this GetStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetStatusResponse.


        :param uid: The uid of this GetStatusResponse.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def tax_core_api(self):
        """Gets the tax_core_api of this GetStatusResponse.  # noqa: E501


        :return: The tax_core_api of this GetStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_core_api

    @tax_core_api.setter
    def tax_core_api(self, tax_core_api):
        """Sets the tax_core_api of this GetStatusResponse.


        :param tax_core_api: The tax_core_api of this GetStatusResponse.  # noqa: E501
        :type: str
        """

        self._tax_core_api = tax_core_api

    @property
    def current_tax_rates(self):
        """Gets the current_tax_rates of this GetStatusResponse.  # noqa: E501


        :return: The current_tax_rates of this GetStatusResponse.  # noqa: E501
        :rtype: TaxRateGroup
        """
        return self._current_tax_rates

    @current_tax_rates.setter
    def current_tax_rates(self, current_tax_rates):
        """Sets the current_tax_rates of this GetStatusResponse.


        :param current_tax_rates: The current_tax_rates of this GetStatusResponse.  # noqa: E501
        :type: TaxRateGroup
        """

        self._current_tax_rates = current_tax_rates

    @property
    def all_tax_rates(self):
        """Gets the all_tax_rates of this GetStatusResponse.  # noqa: E501


        :return: The all_tax_rates of this GetStatusResponse.  # noqa: E501
        :rtype: list[TaxRateGroup]
        """
        return self._all_tax_rates

    @all_tax_rates.setter
    def all_tax_rates(self, all_tax_rates):
        """Sets the all_tax_rates of this GetStatusResponse.


        :param all_tax_rates: The all_tax_rates of this GetStatusResponse.  # noqa: E501
        :type: list[TaxRateGroup]
        """

        self._all_tax_rates = all_tax_rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
