# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class TaxItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_type': 'int',
        'label': 'str',
        'amount': 'float',
        'rate': 'float',
        'category_name': 'str'
    }

    attribute_map = {
        'category_type': 'categoryType',
        'label': 'label',
        'amount': 'amount',
        'rate': 'rate',
        'category_name': 'categoryName'
    }

    def __init__(self, category_type=None, label=None, amount=None, rate=None, category_name=None, _configuration=None):  # noqa: E501
        """TaxItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category_type = None
        self._label = None
        self._amount = None
        self._rate = None
        self._category_name = None
        self.discriminator = None

        if category_type is not None:
            self.category_type = category_type
        self.label = label
        self.amount = amount
        self.rate = rate
        self.category_name = category_name

    @property
    def category_type(self):
        """Gets the category_type of this TaxItem.  # noqa: E501


        :return: The category_type of this TaxItem.  # noqa: E501
        :rtype: int
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this TaxItem.


        :param category_type: The category_type of this TaxItem.  # noqa: E501
        :type: int
        """

        self._category_type = category_type

    @property
    def label(self):
        """Gets the label of this TaxItem.  # noqa: E501


        :return: The label of this TaxItem.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TaxItem.


        :param label: The label of this TaxItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def amount(self):
        """Gets the amount of this TaxItem.  # noqa: E501


        :return: The amount of this TaxItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaxItem.


        :param amount: The amount of this TaxItem.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def rate(self):
        """Gets the rate of this TaxItem.  # noqa: E501


        :return: The rate of this TaxItem.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this TaxItem.


        :param rate: The rate of this TaxItem.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501

        self._rate = rate

    @property
    def category_name(self):
        """Gets the category_name of this TaxItem.  # noqa: E501


        :return: The category_name of this TaxItem.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this TaxItem.


        :param category_name: The category_name of this TaxItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")  # noqa: E501

        self._category_name = category_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxItem):
            return True

        return self.to_dict() != other.to_dict()
