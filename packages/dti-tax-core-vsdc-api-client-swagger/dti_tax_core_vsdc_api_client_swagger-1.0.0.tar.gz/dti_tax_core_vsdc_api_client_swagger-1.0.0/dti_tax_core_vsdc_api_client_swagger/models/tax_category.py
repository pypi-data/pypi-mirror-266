# coding: utf-8

"""
    Dti.TaxCore.VSDC.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dti_tax_core_vsdc_api_client_swagger.configuration import Configuration


class TaxCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category_type': 'int',
        'tax_rates': 'list[TaxRate]',
        'order_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'category_type': 'categoryType',
        'tax_rates': 'taxRates',
        'order_id': 'orderId'
    }

    def __init__(self, name=None, category_type=None, tax_rates=None, order_id=None, _configuration=None):  # noqa: E501
        """TaxCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._category_type = None
        self._tax_rates = None
        self._order_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if category_type is not None:
            self.category_type = category_type
        if tax_rates is not None:
            self.tax_rates = tax_rates
        if order_id is not None:
            self.order_id = order_id

    @property
    def name(self):
        """Gets the name of this TaxCategory.  # noqa: E501


        :return: The name of this TaxCategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxCategory.


        :param name: The name of this TaxCategory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category_type(self):
        """Gets the category_type of this TaxCategory.  # noqa: E501


        :return: The category_type of this TaxCategory.  # noqa: E501
        :rtype: int
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this TaxCategory.


        :param category_type: The category_type of this TaxCategory.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                category_type not in allowed_values):
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def tax_rates(self):
        """Gets the tax_rates of this TaxCategory.  # noqa: E501


        :return: The tax_rates of this TaxCategory.  # noqa: E501
        :rtype: list[TaxRate]
        """
        return self._tax_rates

    @tax_rates.setter
    def tax_rates(self, tax_rates):
        """Sets the tax_rates of this TaxCategory.


        :param tax_rates: The tax_rates of this TaxCategory.  # noqa: E501
        :type: list[TaxRate]
        """

        self._tax_rates = tax_rates

    @property
    def order_id(self):
        """Gets the order_id of this TaxCategory.  # noqa: E501


        :return: The order_id of this TaxCategory.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this TaxCategory.


        :param order_id: The order_id of this TaxCategory.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxCategory):
            return True

        return self.to_dict() != other.to_dict()
