import numpy as np
import tensorflow as tf
from deephyper.nas.metrics import r2
from {{ pckg }}.{{ pb_folder }}.load_data import load_data


def run(config):
    (x_train, y_train), (x_valid, y_valid) = load_data()

    if config["activation"] == "identity":
        config["activation"] = None

    model = tf.keras.models.Sequential()
    model.add(
        tf.keras.layers.Dense(
            config["units"],
            activation=config["activation"],
            input_shape=tuple(np.shape(x_train)[1:]),
        )
    )
    model.add(tf.keras.layers.Dense(1))

    model.summary()

    model.compile(
        loss="mse", optimizer=tf.keras.optimizers.RMSprop(lr=config["lr"]), metrics=[r2]
    )

    history = model.fit(
        x_train,
        y_train,
        batch_size=64,
        epochs=1000,
        verbose=0,
        callbacks=[
            tf.keras.callbacks.EarlyStopping(
                monitor="val_r2", mode="max", verbose=1, patience=10
            )
        ],
        validation_data=(x_valid, y_valid),
    )

    return history.history["val_r2"][-1]


if __name__ == "__main__":
    config = {"units": 10, "activation": "relu", "lr": 0.01}
    objective = run(config)
    print("Default configuration objective: ", objective)
