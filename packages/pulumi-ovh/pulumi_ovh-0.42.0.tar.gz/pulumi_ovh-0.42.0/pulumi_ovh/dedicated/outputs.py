# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ServerInstallTaskDetails',
    'ServerNetworkingInterface',
    'GetServerSpecificationsHardwareDefaultHardwareRaidSizeResult',
    'GetServerSpecificationsHardwareDiskGroupResult',
    'GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult',
    'GetServerSpecificationsHardwareDiskGroupDiskSizeResult',
    'GetServerSpecificationsHardwareExpansionCardResult',
    'GetServerSpecificationsHardwareMemorySizeResult',
    'GetServerSpecificationsHardwareUsbKeyResult',
]

@pulumi.output_type
class ServerInstallTaskDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHostname":
            suggest = "custom_hostname"
        elif key == "diskGroupId":
            suggest = "disk_group_id"
        elif key == "installSqlServer":
            suggest = "install_sql_server"
        elif key == "noRaid":
            suggest = "no_raid"
        elif key == "postInstallationScriptLink":
            suggest = "post_installation_script_link"
        elif key == "postInstallationScriptReturn":
            suggest = "post_installation_script_return"
        elif key == "softRaidDevices":
            suggest = "soft_raid_devices"
        elif key == "sshKeyName":
            suggest = "ssh_key_name"
        elif key == "useSpla":
            suggest = "use_spla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerInstallTaskDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerInstallTaskDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerInstallTaskDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_hostname: Optional[str] = None,
                 disk_group_id: Optional[int] = None,
                 install_sql_server: Optional[bool] = None,
                 language: Optional[str] = None,
                 no_raid: Optional[bool] = None,
                 post_installation_script_link: Optional[str] = None,
                 post_installation_script_return: Optional[str] = None,
                 soft_raid_devices: Optional[int] = None,
                 ssh_key_name: Optional[str] = None,
                 use_spla: Optional[bool] = None):
        """
        :param str custom_hostname: Set up the server using the provided hostname instead of the default hostname.
        :param int disk_group_id: Disk group id.
        :param bool install_sql_server: set to true to install sql server (Windows template only).
        :param str language: language.
        :param bool no_raid: set to true to disable RAID.
        :param str post_installation_script_link: Indicate the URL where your postinstall customisation script is located.
        :param str post_installation_script_return: Indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'.
        :param int soft_raid_devices: soft raid devices.
        :param str ssh_key_name: Name of the ssh key that should be installed. Password login will be disabled.
        :param bool use_spla: set to true to use SPLA.
        """
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if disk_group_id is not None:
            pulumi.set(__self__, "disk_group_id", disk_group_id)
        if install_sql_server is not None:
            pulumi.set(__self__, "install_sql_server", install_sql_server)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if no_raid is not None:
            pulumi.set(__self__, "no_raid", no_raid)
        if post_installation_script_link is not None:
            pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        if post_installation_script_return is not None:
            pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        if soft_raid_devices is not None:
            pulumi.set(__self__, "soft_raid_devices", soft_raid_devices)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if use_spla is not None:
            pulumi.set(__self__, "use_spla", use_spla)

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        """
        Set up the server using the provided hostname instead of the default hostname.
        """
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> Optional[int]:
        """
        Disk group id.
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="installSqlServer")
    def install_sql_server(self) -> Optional[bool]:
        """
        set to true to install sql server (Windows template only).
        """
        return pulumi.get(self, "install_sql_server")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        """
        language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="noRaid")
    def no_raid(self) -> Optional[bool]:
        """
        set to true to disable RAID.
        """
        return pulumi.get(self, "no_raid")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> Optional[str]:
        """
        Indicate the URL where your postinstall customisation script is located.
        """
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> Optional[str]:
        """
        Indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'.
        """
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter(name="softRaidDevices")
    def soft_raid_devices(self) -> Optional[int]:
        """
        soft raid devices.
        """
        return pulumi.get(self, "soft_raid_devices")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[str]:
        """
        Name of the ssh key that should be installed. Password login will be disabled.
        """
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useSpla")
    def use_spla(self) -> Optional[bool]:
        """
        set to true to use SPLA.
        """
        return pulumi.get(self, "use_spla")


@pulumi.output_type
class ServerNetworkingInterface(dict):
    def __init__(__self__, *,
                 macs: Sequence[str],
                 type: str):
        """
        :param Sequence[str] macs: Interface Mac address
        :param str type: Interface type
        """
        pulumi.set(__self__, "macs", macs)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def macs(self) -> Sequence[str]:
        """
        Interface Mac address
        """
        return pulumi.get(self, "macs")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsHardwareDefaultHardwareRaidSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupResult(dict):
    def __init__(__self__, *,
                 default_hardware_raid_size: 'outputs.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult',
                 default_hardware_raid_type: str,
                 description: str,
                 disk_group_id: float,
                 disk_size: 'outputs.GetServerSpecificationsHardwareDiskGroupDiskSizeResult',
                 disk_type: str,
                 number_of_disks: float,
                 raid_controller: str):
        """
        :param 'GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeArgs' default_hardware_raid_size: Default hardware raid size for this disk group
        :param str default_hardware_raid_type: Default hardware raid type for this disk group
        :param str description: Expansion card description
        :param float disk_group_id: Identifier of this disk group
        :param 'GetServerSpecificationsHardwareDiskGroupDiskSizeArgs' disk_size: Disk capacity
        :param str disk_type: Type of the disk (SSD, SATA, SAS, ...)
        :param float number_of_disks: Number of disks in this group
        :param str raid_controller: Raid controller, if any, managing this group of disks
        """
        pulumi.set(__self__, "default_hardware_raid_size", default_hardware_raid_size)
        pulumi.set(__self__, "default_hardware_raid_type", default_hardware_raid_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_group_id", disk_group_id)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "number_of_disks", number_of_disks)
        pulumi.set(__self__, "raid_controller", raid_controller)

    @property
    @pulumi.getter(name="defaultHardwareRaidSize")
    def default_hardware_raid_size(self) -> 'outputs.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult':
        """
        Default hardware raid size for this disk group
        """
        return pulumi.get(self, "default_hardware_raid_size")

    @property
    @pulumi.getter(name="defaultHardwareRaidType")
    def default_hardware_raid_type(self) -> str:
        """
        Default hardware raid type for this disk group
        """
        return pulumi.get(self, "default_hardware_raid_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Expansion card description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> float:
        """
        Identifier of this disk group
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> 'outputs.GetServerSpecificationsHardwareDiskGroupDiskSizeResult':
        """
        Disk capacity
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Type of the disk (SSD, SATA, SAS, ...)
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="numberOfDisks")
    def number_of_disks(self) -> float:
        """
        Number of disks in this group
        """
        return pulumi.get(self, "number_of_disks")

    @property
    @pulumi.getter(name="raidController")
    def raid_controller(self) -> str:
        """
        Raid controller, if any, managing this group of disks
        """
        return pulumi.get(self, "raid_controller")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareDiskGroupDiskSizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareExpansionCardResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str):
        """
        :param str description: Expansion card description
        :param str type: Expansion card type enum
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Expansion card description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Expansion card type enum
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerSpecificationsHardwareMemorySizeResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerSpecificationsHardwareUsbKeyResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: float):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


