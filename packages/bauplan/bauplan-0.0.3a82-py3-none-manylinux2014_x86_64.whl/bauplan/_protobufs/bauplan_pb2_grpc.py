# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import bauplan_pb2 as bauplan__pb2
import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CommanderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TriggerRun = channel.unary_unary(
            '/bauplan.CommanderService/TriggerRun',
            request_serializer=bauplan__pb2.TriggerRunRequest.SerializeToString,
            response_deserializer=bauplan__pb2.JobId.FromString,
        )
        self.CancelJob = channel.unary_unary(
            '/bauplan.CommanderService/CancelJob',
            request_serializer=bauplan__pb2.CancelJobRequest.SerializeToString,
            response_deserializer=bauplan__pb2.CancelJobResponse.FromString,
        )
        self.SubscribeLogs = channel.unary_stream(
            '/bauplan.CommanderService/SubscribeLogs',
            request_serializer=bauplan__pb2.JobId.SerializeToString,
            response_deserializer=bauplan__pb2.RunnerInfo.FromString,
        )
        self.SubscribeRunner = channel.stream_stream(
            '/bauplan.CommanderService/SubscribeRunner',
            request_serializer=bauplan__pb2.RunnerInfo.SerializeToString,
            response_deserializer=bauplan__pb2.RunnerAction.FromString,
        )
        self.JoinRunner = channel.unary_unary(
            '/bauplan.CommanderService/JoinRunner',
            request_serializer=bauplan__pb2.JoinRunnerRequest.SerializeToString,
            response_deserializer=bauplan__pb2.JoinRunnerResponse.FromString,
        )
        self.GetLogs = channel.unary_unary(
            '/bauplan.CommanderService/GetLogs',
            request_serializer=bauplan__pb2.JobId.SerializeToString,
            response_deserializer=bauplan__pb2.JobLogs.FromString,
        )
        self.GetNodes = channel.unary_unary(
            '/bauplan.CommanderService/GetNodes',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=bauplan__pb2.NodeInfo.FromString,
        )
        self.GetBranches = channel.unary_unary(
            '/bauplan.CommanderService/GetBranches',
            request_serializer=bauplan__pb2.GetBranchesRequest.SerializeToString,
            response_deserializer=bauplan__pb2.GetBranchesResponse.FromString,
        )
        self.GetBranch = channel.unary_unary(
            '/bauplan.CommanderService/GetBranch',
            request_serializer=bauplan__pb2.GetBranchRequest.SerializeToString,
            response_deserializer=bauplan__pb2.GetBranchResponse.FromString,
        )
        self.GetTable = channel.unary_unary(
            '/bauplan.CommanderService/GetTable',
            request_serializer=bauplan__pb2.GetTableRequest.SerializeToString,
            response_deserializer=bauplan__pb2.GetTableResponse.FromString,
        )
        self.DeleteBranch = channel.unary_unary(
            '/bauplan.CommanderService/DeleteBranch',
            request_serializer=bauplan__pb2.DeleteBranchRequest.SerializeToString,
            response_deserializer=bauplan__pb2.DeleteBranchResponse.FromString,
        )


class CommanderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TriggerRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRunner(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinRunner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBranches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommanderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'TriggerRun': grpc.unary_unary_rpc_method_handler(
            servicer.TriggerRun,
            request_deserializer=bauplan__pb2.TriggerRunRequest.FromString,
            response_serializer=bauplan__pb2.JobId.SerializeToString,
        ),
        'CancelJob': grpc.unary_unary_rpc_method_handler(
            servicer.CancelJob,
            request_deserializer=bauplan__pb2.CancelJobRequest.FromString,
            response_serializer=bauplan__pb2.CancelJobResponse.SerializeToString,
        ),
        'SubscribeLogs': grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeLogs,
            request_deserializer=bauplan__pb2.JobId.FromString,
            response_serializer=bauplan__pb2.RunnerInfo.SerializeToString,
        ),
        'SubscribeRunner': grpc.stream_stream_rpc_method_handler(
            servicer.SubscribeRunner,
            request_deserializer=bauplan__pb2.RunnerInfo.FromString,
            response_serializer=bauplan__pb2.RunnerAction.SerializeToString,
        ),
        'JoinRunner': grpc.unary_unary_rpc_method_handler(
            servicer.JoinRunner,
            request_deserializer=bauplan__pb2.JoinRunnerRequest.FromString,
            response_serializer=bauplan__pb2.JoinRunnerResponse.SerializeToString,
        ),
        'GetLogs': grpc.unary_unary_rpc_method_handler(
            servicer.GetLogs,
            request_deserializer=bauplan__pb2.JobId.FromString,
            response_serializer=bauplan__pb2.JobLogs.SerializeToString,
        ),
        'GetNodes': grpc.unary_unary_rpc_method_handler(
            servicer.GetNodes,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=bauplan__pb2.NodeInfo.SerializeToString,
        ),
        'GetBranches': grpc.unary_unary_rpc_method_handler(
            servicer.GetBranches,
            request_deserializer=bauplan__pb2.GetBranchesRequest.FromString,
            response_serializer=bauplan__pb2.GetBranchesResponse.SerializeToString,
        ),
        'GetBranch': grpc.unary_unary_rpc_method_handler(
            servicer.GetBranch,
            request_deserializer=bauplan__pb2.GetBranchRequest.FromString,
            response_serializer=bauplan__pb2.GetBranchResponse.SerializeToString,
        ),
        'GetTable': grpc.unary_unary_rpc_method_handler(
            servicer.GetTable,
            request_deserializer=bauplan__pb2.GetTableRequest.FromString,
            response_serializer=bauplan__pb2.GetTableResponse.SerializeToString,
        ),
        'DeleteBranch': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteBranch,
            request_deserializer=bauplan__pb2.DeleteBranchRequest.FromString,
            response_serializer=bauplan__pb2.DeleteBranchResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler('bauplan.CommanderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CommanderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TriggerRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/TriggerRun',
            bauplan__pb2.TriggerRunRequest.SerializeToString,
            bauplan__pb2.JobId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CancelJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/CancelJob',
            bauplan__pb2.CancelJobRequest.SerializeToString,
            bauplan__pb2.CancelJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SubscribeLogs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bauplan.CommanderService/SubscribeLogs',
            bauplan__pb2.JobId.SerializeToString,
            bauplan__pb2.RunnerInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SubscribeRunner(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/bauplan.CommanderService/SubscribeRunner',
            bauplan__pb2.RunnerInfo.SerializeToString,
            bauplan__pb2.RunnerAction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def JoinRunner(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/JoinRunner',
            bauplan__pb2.JoinRunnerRequest.SerializeToString,
            bauplan__pb2.JoinRunnerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLogs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/GetLogs',
            bauplan__pb2.JobId.SerializeToString,
            bauplan__pb2.JobLogs.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/GetNodes',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            bauplan__pb2.NodeInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetBranches(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/GetBranches',
            bauplan__pb2.GetBranchesRequest.SerializeToString,
            bauplan__pb2.GetBranchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetBranch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/GetBranch',
            bauplan__pb2.GetBranchRequest.SerializeToString,
            bauplan__pb2.GetBranchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetTable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/GetTable',
            bauplan__pb2.GetTableRequest.SerializeToString,
            bauplan__pb2.GetTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteBranch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CommanderService/DeleteBranch',
            bauplan__pb2.DeleteBranchRequest.SerializeToString,
            bauplan__pb2.DeleteBranchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class CodeIntelligenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostRun = channel.unary_unary(
            '/bauplan.CodeIntelligenceService/PostRun',
            request_serializer=bauplan__pb2.PostRunRequest.SerializeToString,
            response_deserializer=bauplan__pb2.PostRunResponse.FromString,
        )


class CodeIntelligenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PostRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CodeIntelligenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'PostRun': grpc.unary_unary_rpc_method_handler(
            servicer.PostRun,
            request_deserializer=bauplan__pb2.PostRunRequest.FromString,
            response_serializer=bauplan__pb2.PostRunResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'bauplan.CodeIntelligenceService', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CodeIntelligenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PostRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bauplan.CodeIntelligenceService/PostRun',
            bauplan__pb2.PostRunRequest.SerializeToString,
            bauplan__pb2.PostRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
