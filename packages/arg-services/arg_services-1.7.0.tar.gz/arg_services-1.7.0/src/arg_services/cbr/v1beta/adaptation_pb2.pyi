"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import arg_services.cbr.v1beta.model_pb2
import arg_services.cbr.v1beta.retrieval_pb2
import arg_services.nlp.v1.nlp_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Direction:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DirectionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Direction.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DIRECTION_UNSPECIFIED: _Direction.ValueType  # 0
    DIRECTION_GENERALIZATION: _Direction.ValueType  # 1
    DIRECTION_SPECIALIZATION: _Direction.ValueType  # 2
    DIRECTION_COMBINED: _Direction.ValueType  # 3

class Direction(_Direction, metaclass=_DirectionEnumTypeWrapper): ...

DIRECTION_UNSPECIFIED: Direction.ValueType  # 0
DIRECTION_GENERALIZATION: Direction.ValueType  # 1
DIRECTION_SPECIALIZATION: Direction.ValueType  # 2
DIRECTION_COMBINED: Direction.ValueType  # 3
global___Direction = Direction

class _Pos:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _PosEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Pos.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    POS_UNSPECIFIED: _Pos.ValueType  # 0
    POS_NOUN: _Pos.ValueType  # 1
    POS_VERB: _Pos.ValueType  # 2
    POS_ADJECTIVE: _Pos.ValueType  # 3
    POS_ADVERB: _Pos.ValueType  # 4

class Pos(_Pos, metaclass=_PosEnumTypeWrapper): ...

POS_UNSPECIFIED: Pos.ValueType  # 0
POS_NOUN: Pos.ValueType  # 1
POS_VERB: Pos.ValueType  # 2
POS_ADJECTIVE: Pos.ValueType  # 3
POS_ADVERB: Pos.ValueType  # 4
global___Pos = Pos

@typing_extensions.final
class AdaptRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class CasesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___AdaptedCaseRequest: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___AdaptedCaseRequest | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CASES_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    NLP_CONFIG_FIELD_NUMBER: builtins.int
    DIRECTION_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    @property
    def cases(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___AdaptedCaseRequest]: ...
    @property
    def query(self) -> arg_services.cbr.v1beta.model_pb2.AnnotatedGraph: ...
    @property
    def nlp_config(self) -> arg_services.nlp.v1.nlp_pb2.NlpConfig: ...
    direction: global___Direction.ValueType
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct:
        """Implementation-specific information can be encoded here"""
    def __init__(
        self,
        *,
        cases: collections.abc.Mapping[builtins.str, global___AdaptedCaseRequest] | None = ...,
        query: arg_services.cbr.v1beta.model_pb2.AnnotatedGraph | None = ...,
        nlp_config: arg_services.nlp.v1.nlp_pb2.NlpConfig | None = ...,
        direction: global___Direction.ValueType = ...,
        extras: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras", b"extras", "nlp_config", b"nlp_config", "query", b"query"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cases", b"cases", "direction", b"direction", "extras", b"extras", "nlp_config", b"nlp_config", "query", b"query"]) -> None: ...

global___AdaptRequest = AdaptRequest

@typing_extensions.final
class AdaptResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class CasesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___AdaptedCaseResponse: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___AdaptedCaseResponse | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CASES_FIELD_NUMBER: builtins.int
    EXTRAS_FIELD_NUMBER: builtins.int
    @property
    def cases(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___AdaptedCaseResponse]: ...
    @property
    def extras(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(
        self,
        *,
        cases: collections.abc.Mapping[builtins.str, global___AdaptedCaseResponse] | None = ...,
        extras: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["extras", b"extras"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cases", b"cases", "extras", b"extras"]) -> None: ...

global___AdaptResponse = AdaptResponse

@typing_extensions.final
class AdaptedCaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CASE_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    MAPPING_FIELD_NUMBER: builtins.int
    @property
    def case(self) -> arg_services.cbr.v1beta.model_pb2.AnnotatedGraph: ...
    @property
    def rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Rule]: ...
    @property
    def mapping(self) -> arg_services.cbr.v1beta.retrieval_pb2.RetrievedMapping: ...
    def __init__(
        self,
        *,
        case: arg_services.cbr.v1beta.model_pb2.AnnotatedGraph | None = ...,
        rules: collections.abc.Iterable[global___Rule] | None = ...,
        mapping: arg_services.cbr.v1beta.retrieval_pb2.RetrievedMapping | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_mapping", b"_mapping", "case", b"case", "mapping", b"mapping"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_mapping", b"_mapping", "case", b"case", "mapping", b"mapping", "rules", b"rules"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_mapping", b"_mapping"]) -> typing_extensions.Literal["mapping"] | None: ...

global___AdaptedCaseRequest = AdaptedCaseRequest

@typing_extensions.final
class AdaptedCaseResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CASE_FIELD_NUMBER: builtins.int
    EXTRACTED_CONCEPTS_FIELD_NUMBER: builtins.int
    DISCARDED_CONCEPTS_FIELD_NUMBER: builtins.int
    APPLIED_RULES_FIELD_NUMBER: builtins.int
    DISCARDED_RULES_FIELD_NUMBER: builtins.int
    GENERATED_RULES_FIELD_NUMBER: builtins.int
    RULE_CANDIDATES_FIELD_NUMBER: builtins.int
    @property
    def case(self) -> arg_services.cbr.v1beta.model_pb2.AnnotatedGraph: ...
    @property
    def extracted_concepts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Concept]:
        """These are optional and used for further evaluation only"""
    @property
    def discarded_concepts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Concept]: ...
    @property
    def applied_rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Rule]: ...
    @property
    def discarded_rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Rule]: ...
    @property
    def generated_rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Rule]: ...
    @property
    def rule_candidates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RuleCandidates]:
        """repeated Path extracted_paths = 6;
        repeated Path adapted_paths = 7;
        """
    def __init__(
        self,
        *,
        case: arg_services.cbr.v1beta.model_pb2.AnnotatedGraph | None = ...,
        extracted_concepts: collections.abc.Iterable[global___Concept] | None = ...,
        discarded_concepts: collections.abc.Iterable[global___Concept] | None = ...,
        applied_rules: collections.abc.Iterable[global___Rule] | None = ...,
        discarded_rules: collections.abc.Iterable[global___Rule] | None = ...,
        generated_rules: collections.abc.Iterable[global___Rule] | None = ...,
        rule_candidates: collections.abc.Iterable[global___RuleCandidates] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["case", b"case"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["applied_rules", b"applied_rules", "case", b"case", "discarded_concepts", b"discarded_concepts", "discarded_rules", b"discarded_rules", "extracted_concepts", b"extracted_concepts", "generated_rules", b"generated_rules", "rule_candidates", b"rule_candidates"]) -> None: ...

global___AdaptedCaseResponse = AdaptedCaseResponse

@typing_extensions.final
class Rule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> global___Concept: ...
    @property
    def target(self) -> global___Concept: ...
    def __init__(
        self,
        *,
        source: global___Concept | None = ...,
        target: global___Concept | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source", b"source", "target", b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source", b"source", "target", b"target"]) -> None: ...

global___Rule = Rule

@typing_extensions.final
class Concept(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LEMMA_FIELD_NUMBER: builtins.int
    POS_FIELD_NUMBER: builtins.int
    SCORE_FIELD_NUMBER: builtins.int
    lemma: builtins.str
    pos: global___Pos.ValueType
    score: builtins.float
    def __init__(
        self,
        *,
        lemma: builtins.str = ...,
        pos: global___Pos.ValueType = ...,
        score: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["lemma", b"lemma", "pos", b"pos", "score", b"score"]) -> None: ...

global___Concept = Concept

@typing_extensions.final
class RuleCandidates(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> global___Concept: ...
    @property
    def target(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Concept]: ...
    def __init__(
        self,
        *,
        source: global___Concept | None = ...,
        target: collections.abc.Iterable[global___Concept] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source", b"source", "target", b"target"]) -> None: ...

global___RuleCandidates = RuleCandidates
