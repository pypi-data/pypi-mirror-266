# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_cmds.ipynb.

# %% auto 0
__all__ = ['app', 'make_env_file', 'run_make_env_file']

# %% ../nbs/04_cmds.ipynb 3
import os, subprocess
from typing import Optional

from rich import print
import typer
import questionary

# %% ../nbs/04_cmds.ipynb 4
from .cons import (DEFAULT_SPEC_FILE, BLUE_NIGHT, THEMES)
from .dcls import EnvSpec

# %% ../nbs/04_cmds.ipynb 6
app = typer.Typer()

# %% ../nbs/04_cmds.ipynb 8
@app.command()
def make_env_file(
    name: str = typer.Option(
        'litenv', '--name', '-n',
        help='The name of the environment you want to make.',
    ),

    file: Optional[str] = typer.Option(
        'env.yml', '--file', '-f',
        help='The YAML file to save the environment specifications to.',
    ),

    theme: Optional[str] = typer.Option(
        BLUE_NIGHT, '--theme', '-t',
        help='The theme from which to style choices.',
    ),

    template_file: Optional[str] = typer.Option(
        DEFAULT_SPEC_FILE, '--specification-file', '-s',
        help='The template file from which to generate choices.',
    ),

    prefix_name: Optional[bool] = typer.Option(
        False, '--prefix-name', '-p',
        help='Prefix the environment name to the YAML file.',
    ),

    print_tree: Optional[bool] = typer.Option(
        False, '--print-tree', '-r',
        help='Print the dependency tree.',
    ),

    use_conda: Optional[bool] = typer.Option(
        False, '--conda', '-c',
        help='Use conda to create the environment. Otherwise, use mamba.',
    ),

    make_env: Optional[bool] = typer.Option(
        False, '--make-env', '-m', help='Create the environment.',
    ),

):
    
    if prefix_name:
        file = os.path.join(os.path.dirname(file), name + '.' + os.path.basename(file))
    
    if theme not in THEMES:
        theme = BLUE_NIGHT

    spec = EnvSpec(template_file, theme)

    accel = spec.select_accelerator()
    if accel is None:
        return
    
    selected_catkeys = spec.select_categories()
    if selected_catkeys is None:
        return

    catkey_subkeys = {}
    for catkey in selected_catkeys:                
        selected_subkeys = spec.select_subcategories(catkey)
        if selected_subkeys is None:
            return
        catkey_subkeys[catkey] = selected_subkeys

    env_dict = spec.to_dict(name, catkey_subkeys, accel)
    env_str = spec.dict_to_str(env_dict)    

    if print_tree:
        spec.print_selected(catkey_subkeys)    
        
    with open(file, 'w') as f:
        f.write(env_str)

        
    print(f'Environment saved to [bold]{file}[/bold].')

    command = f"{'conda' if use_conda else 'mamba'} env create -f {file}"
    if make_env:
        confirmed = questionary.confirm('Run {command}?').ask()
        if confirmed:
            subprocess.run(command, shell=True)

# %% ../nbs/04_cmds.ipynb 9
def run_make_env_file():     
    app()    
    make_env_file()
