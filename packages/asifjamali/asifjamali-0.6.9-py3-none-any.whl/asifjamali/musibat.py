import os, re, sys, time, json, socket, random, codecs, requests, subprocessfrom fake_useragent import UserAgentdef get_headers():    ua = UserAgent()    random_u_a = ua.random    headers = {        "User-Agent": str(random_u_a),        "X-Requested-With": "XMLHttpRequest",        "Content-Type": "application/json",        "X-Requested-With": "XMLHttpRequest",        "Custom-Header": "Value",    }    return headersdef getStyle(no):    ret = ""    txtLarg = [        "\n.-.   .-..-. .-. .----..-..----.   .--.  .---. \n|  `.'  || { } |{ {__  | || {}  } / {} \\{_   _}\n| |\\ /| || {_} |.-._} }| || {}  }/  /\\  \\ | |  \n`-' ` `-'`-----'`----' `-'`----' `-'  `-' `-'  \n",        "\n    __  _____  _______ ________  ___  ______\n   /  |/  / / / / ___//  _/ __ )/   |/_  __/\n  / /|_/ / / / /\\__ \\ / // __  / /| | / /   \n / /  / / /_/ /___/ // // /_/ / ___ |/ /    \n/_/  /_/\\____//____/___/_____/_/  |_/_/     \n                                            \n",        "\n██████╗  █████╗ ██╗      ██████╗  ██████╗██╗  ██╗\n██╔══██╗██╔══██╗██║     ██╔═══██╗██╔════╝██║  ██║\n██████╔╝███████║██║     ██║   ██║██║     ███████║\n██╔══██╗██╔══██║██║     ██║   ██║██║     ██╔══██║\n██████╔╝██║  ██║███████╗╚██████╔╝╚██████╗██║  ██║\n╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝\n",        "\n▒█▀▄▀█ ▒█░▒█ ▒█▀▀▀█ ▀█▀ ▒█▀▀█ ░█▀▀█ ▀▀█▀▀ \n▒█▒█▒█ ▒█░▒█ ░▀▀▀▄▄ ▒█░ ▒█▀▀▄ ▒█▄▄█ ░▒█░░ \n▒█░░▒█ ░▀▄▄▀ ▒█▄▄▄█ ▄█▄ ▒█▄▄█ ▒█░▒█ ░▒█░░ \n",    ]    n = random.randint(1, 100)    win_num = int(n)    if win_num % 5 == 0:        ret = str(random.choice(txtLarg))    elif win_num % 2 == 0:        ret = "\n██████╗  █████╗ ██╗      ██████╗  ██████╗██╗  ██╗\n██╔══██╗██╔══██╗██║     ██╔═══██╗██╔════╝██║  ██║\n██████╔╝███████║██║     ██║   ██║██║     ███████║\n██╔══██╗██╔══██║██║     ██║   ██║██║     ██╔══██║\n██████╔╝██║  ██║███████╗╚██████╔╝╚██████╗██║  ██║\n╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝\n"    if ret == '' and no == "yes":        ret = str(random.choice(txtLarg))    return retdef prntMusibat():    os.system("clear")    txtXolors = [        "\33[31m",        "\33[32m",        "\33[33m",        "\33[34m",        "\33[35m",        "\33[36m",        "\33[37m"    ]    ret = getStyle("yes")    try:        #print(f"{random.choice(txtXolors)}{random.choice(txtLarg)}")        print(str(ret))    except:passdef checkVersion():    my_version = "2.3"    cxurl = "https://raw.githubusercontent.com/TeamMusiBat/404/master/404.py"    ver = requests.get(cxurl,headers=get_headers()).text.replace("\n","").replace(" ","")    if ver != my_version:        prntMusibat()        sys.exit()checkVersion()def SaveBackup():    try:        f1 = codecs.open(history_path, 'w', 'utf-8')        json.dump(wait, f1, sort_keys=True, indent=4, ensure_ascii=False)        f1.close()    except Exception as error:        print(error)        def do_update():    try:        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'asifjamali'])    except:pass    prntMusibat()def deleteFile(filename):    try:        os.remove(filename)    except:        try:            os.system(f'rm -rf {filename}')        except:passwait = {    "1mix": '',    "usedip": {},    "my_name": '',    "allproxies": {},    "Auto_Update": False}shAttach = {    "counter": 0,    "direct_defualt": "",    "my_name": wait["my_name"]}main_path = os.getcwd()old1_path = f"{main_path}/iphistory.json"old2_path = f"{main_path}/myhistory.json"proxy_path = f"{main_path}/bulklist.txt"output_path = f"{main_path}/SHproxy.txt"base_url = "http://172.105.121.205:8001"history_path = f"{main_path}/history.json"def edit_paths():    try:        if "Auto_Update" not in wait:            wait["Auto_Update"] = False        if "1mix" not in wait:            wait["1mix"] = ''        if os.path.exists(old1_path):            wait2Open = codecs.open(old1_path, "r", "utf-8")            wait2 = json.load(wait2Open)            wait2Open.close()            for myipp in wait2["usedip"]:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = int(wait2["usedip"][myipp])            for myipp in wait2["allproxies"]:                if myipp not in wait["allproxies"]:                    wait["allproxies"][myipp] = int(wait2["allproxies"][myipp])            deleteFile(old1_path)        if os.path.exists(old2_path):            wait3Open = codecs.open(old2_path, "r", "utf-8")            wait3 = json.load(wait3Open)            wait3Open.close()            for myipp in wait3["usedip"]:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = int(wait3["usedip"][myipp])            for myipp in wait3["allproxies"]:                if myipp not in wait["allproxies"]:                    wait["allproxies"][myipp] = int(wait3["allproxies"][myipp])            deleteFile(old2_path)        if not os.path.exists(proxy_path):            mytext = "Paste Your Proxy List Here\nOne Proxy Per Each Line"            writeData("bulklist.txt", mytext)        if not os.path.exists(output_path):            mytext = "Your OutPut Will Be Here"            writeData("SHproxy.txt", mytext)    except:passtry:    waitOpen = codecs.open(history_path, "r", "utf-8")    wait = json.load(waitOpen)    waitOpen.close()except:    with open(history_path, 'w') as f:        json.dump(wait, f, ensure_ascii=False, indent=4)def writeData(filename, _Shahzii):    if _Shahzii == "":        _Shahzii = "Nothing Found :)"    try:        with open(filename, "w") as midfile:            midfile.write(_Shahzii)    except:        os.system(f'echo -n "{_Shahzii}" > {filename}')def get_information(user_name): #getip    try:        if wait["my_name"] == "":            if user_name.isalpha():                user_name = user_name.lower()                user_name = user_name.replace(" ", "")                wait["my_name"] = user_name                edit_paths()                SaveBackup()                prntMusibat()            else:                sys.exit("invalid User_Name")        if "Auto_Update" not in wait:            edit_paths()        user_ip = ""        hostname = socket.gethostname()        if "localhost" in hostname:            url = "http://ifconfig.me"            response = requests.get(url, headers=get_headers())            response.close()            user_ip = response.text        else:            user_ip = socket.gethostbyname(hostname)        url1 = f"{base_url}/submit_rank?my_name={user_name}&client_ip={user_ip}&host={hostname}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xip = response.json()            no = 1            if xip == 0 or xip == "0":                deleteFile(main_path)                deleteFile(output_path)                deleteFile(history_path)                deleteFile(old1_path)                deleteFile("main.py")                while True:                    print(no)                    prntMusibat()                    no += 1            elif xip == 99 or xip == "99":                prntMusibat()                sys.exit("\nEnter Your Name Bro, Only Alphabets\n")            shAttach["my_name"] = str(xip)        else:            shAttach["my_name"] = f"{user_name}_{hostname}"        response.close()    except Exception as catch:        trace = catch.__traceback__        error = f"Error Name: {str(trace.tb_frame.f_code.co_name)}\nError Filename: {str(trace.tb_frame.f_code.co_filename)}\nError Line: {str(trace.tb_lineno)}\nError: {str(catch)}"        print(error)    return shAttach["my_name"]def timeChange(secs):    mins, secs = divmod(secs, 60)    hours, mins = divmod(mins, 60)    days, hours = divmod(hours, 24)    weeks, days = divmod(days, 7)    months, weeks = divmod(weeks, 4)    text = ""    if months != 0: text += "%02d Month" % (months)    if weeks != 0: text += " %02d Week" % (weeks)    if days != 0: text += " %02d Days" % (days)    if hours != 0: text += " %02d Hours" % (hours)    if mins != 0: text += " %02d Minutes" % (mins)    if secs != 0: text += " %02d Seconds" % (secs)    if text[0] == " ":        text = text[1:]    return textdef AutoMingle():    if wait['1mix'] != "":        no = 0        nameList = []        if " " in wait['1mix']:            wait['1mix'] = wait['1mix'].replace("  ", " ")            nameList = wait['1mix'].split(" ")        else:            nameList.append(wait['1mix'])        for nmlst in nameList:            url1 = f"{base_url}/user_ip_list?sender_name={shAttach['my_name']}&user_name={nmlst}"            response = requests.get(url1, headers=get_headers())            if response.status_code == 200:                xplist = sorted(list(response.json()))                if len(xplist) != 0 and xplist != {}:                    for myipp in xplist:                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = xplist[myipp]                            no += 1            response.close()        if no != 0:            print(f"Total {no} IPs Auto Saved From {wait['1mix'].title()}")def AutoDelProxies():    no = 0    try:        if len(wait["usedip"]) != 0 and len(wait["usedip"]) % 2 == 0:            curnTime = time.time()            for usedip in wait["usedip"].copy():                if curnTime - wait["usedip"][usedip] >= 4 * 21600:  #24 hours                    del wait["usedip"][usedip]                    no += 1        if len(wait["allproxies"]) != 0 and len(wait["allproxies"]) % 2 == 0:            curnTime = time.time()            for usedip in wait["allproxies"].copy():                if curnTime - wait["allproxies"][usedip] >= 2 * 3600:  #2 hours                    del wait["allproxies"][usedip]                    no += 1    except:pass    return nodef DoBackup():    try:        if shAttach['counter'] == 0 or shAttach['counter'] % 2 == 0:            shAttach['counter'] += 1            AutoMingle()            no = AutoDelProxies()            if no != 0:                #if no % 2 == 0:                if wait["Auto_Update"]:                    do_update()                print(f"Total {no} IPs Auto Removed")            try:                if len(wait["allproxies"]) != 0 and len(wait["usedip"]) != 0:                    url1 = f"{base_url}/save_ip_list?user_name={shAttach['my_name']}&AllProxy={wait['allproxies']}&AllipList={wait['usedip']}"                    response = requests.get(url1, headers=get_headers())                    if response.status_code == 200:                        shAttach['counter'] = shAttach['counter']                    response.close()            except:pass            SaveBackup()    except:passdef continueSocks(my_name):    ret = ""    os.system("clear")    while True:        print(ret)        proxies = ""        if shAttach["direct_defualt"] != "":            proxies = str(shAttach["direct_defualt"])            shAttach["direct_defualt"] = ""        else:            proxies = input("Enter proxy: ")        nowTime = time.time()        curnTime = int(nowTime)        url1 = f"{base_url}/check_proxy_score?ourProxies={proxies}&my_name={my_name}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nSocks: 🔰⏬"                ret += f"\n{xip['proxy']}"                ret += f"\nGoogle: {xip['google']}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                        if xip['proxy'] not in wait["allproxies"]:                            wait["allproxies"][xip['proxy']] = curnTime                else:                    xret = " ☠️ __Used Proxy__ ☠️\n"                    runtime = curnTime - wait["usedip"][myipp]                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()        def continueips(my_name):    ret = ""    os.system("clear")    while True:        print(ret)        proxies = ""        if shAttach["direct_defualt"] != "":            proxies = str(shAttach["direct_defualt"])            shAttach["direct_defualt"] = ""        else:            proxies = input("Enter IP: ")        url1 = f"{base_url}/check_ip_score?ourProxies={proxies}&my_name={my_name}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                nowTime = time.time()                curnTime = int(nowTime)                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                else:                    xret = " ☠️ __ Old  IP __ ☠️\n"                    runtime = curnTime - wait["usedip"][myipp]                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()        def getClickips(my_name, tot_ips):    no = 0    ret = ""    xplist = []    url2 = f"{base_url}/what_history?my_name={my_name}"    response = requests.get(url2, headers=get_headers())    xplist = response.json()    response.close()    if len(xplist) != 0 and xplist != []:        random.shuffle(xplist)        nowTime = time.time()        curnTime = int(nowTime)        print(f"Found {len(xplist)} Proxies")        for proxies in xplist:            if proxies not in wait["allproxies"]:                url1 = f"{base_url}/check_proxy_score?ourProxies={proxies}&my_name={my_name}"                response = requests.get(url1, headers=get_headers())                response.close()                if response.status_code == 200:                    xip = response.json()                    myipp = xip['ip']                    if myipp not in wait["usedip"]:                        wait["usedip"][myipp] = curnTime                        if xip['proxy'] not in wait["allproxies"]:                            wait["allproxies"][xip['proxy']] = curnTime                        score = 55                        try:                            score = int(xip['score'])                        except:pass                        if score < 55:                            no += 1                            print(no)                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: 🔰⏬"                            ret += f"\n{xip['proxy']}"                            ret += f"\nGoogle: {xip['google']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n______________________________\n"                            if no == tot_ips:                                break                else:                    print('Error:', response.status_code)                response.close()                time.sleep(1)        print("Proccess Complete")        time.sleep(1)        os.system("clear")        writeData("SHproxy.txt", ret)        print(ret)        DoBackup()def checkALLsocks(my_name, tot_ips):    no = 0    ret = ""    xplist = []    ourProxies = ""    with open(proxy_path) as lsProxy:        ourProxies = lsProxy.read()    if ourProxies == "":        sys.exit("Nothing Found, Paste your Proxies in bulklist.txt")    else:        plist = ourProxies.split("\n")        for xx in plist:            if "." in xx and ":" in xx:                if xx not in xplist:                    xplist.append(xx)        if len(xplist) != 0 and xplist != []:            nowTime = time.time()            curnTime = int(nowTime)            print(f"Found {len(xplist)} Proxies")            for proxies in xplist:                if proxies not in wait["allproxies"]:                    url1 = f"{base_url}/check_proxy_score?ourProxies={proxies}&my_name={my_name}"                    response = requests.get(url1, headers=get_headers())                    response.close()                    if response.status_code == 200:                        xip = response.json()                        myipp = xip['ip']                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = curnTime                            if xip['proxy'] not in wait["allproxies"]:                                wait["allproxies"][xip['proxy']] = curnTime                            score = 55                            try:                                score = int(xip['score'])                            except:pass                            if score < 55:                                no += 1                                print(no)                                ret += f"\n{no}: {myipp}"                                ret += f"\nSocks: 🔰⏬"                                ret += f"\n{xip['proxy']}"                                ret += f"\nGoogle: {xip['google']}"                                ret += f"\nScam Score: {xip['score']}"                                ret += xip['data']                                ret += "\n______________________________\n"                                if no == tot_ips:                                    break                    else:                        print('Error:', response.status_code)                    response.close()                    time.sleep(1)        print("Proccess Complete")        time.sleep(1)        os.system("clear")        writeData("SHproxy.txt", ret)        print(ret)        DoBackup()def StarT_MusibaT():    ret = ""    my_name = ""    if wait["my_name"] == "":        my_name = input("Enter Your Name: ")    user_name = get_information(my_name)    if user_name == "":        sys.exit("Some Thing Went Wrong")    ret += f"Hello {wait['my_name'].title()}\n"    ret += getStyle("no")    ret += "To Check Proxy 1by1\n"    ret += "Type Enter or Paste Socks\n"    ret += "Paste ip or Any Number For Ips\n"    ret += "Any Alphabet (abcXYZ) 4 SocksList\n"    ret += "What You Want: "    choice = input(ret)    if choice == "click":        tot_ips = 5        chic = input("How Many Proxy to Sort: ")        try:            if chic.isdigit():                tot_ips = int(chic)        except:pass        getClickips(user_name, tot_ips)    elif choice == "update":        do_update()    elif ":" in choice and choice.count(".") == 3: #direct proxy        shAttach["direct_defualt"] = str(choice)        continueSocks(user_name)    elif "." in choice and choice.count(".") == 3: #direct ip        shAttach["direct_defualt"] = str(choice)        continueips(user_name)    elif choice == "":  #enter        continueSocks(user_name)    elif choice.isalpha(): #abcXYZ        tot_ips = 5        chic = input("How Many Proxy to Sort: ")        try:            if chic.isdigit():                tot_ips = int(chic)        except:pass        checkALLsocks(user_name, tot_ips)    elif re.match(r'^\d+$', choice):  #isdigit        continueips(user_name)    else:        sys.exit("Restart Again!")if __name__ == "__main__":    StarT_MusibaT()#______________________________________________#⎔