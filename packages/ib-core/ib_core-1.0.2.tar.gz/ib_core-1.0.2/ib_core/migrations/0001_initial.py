# Generated by Django 4.2.3 on 2023-08-04 17:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ib_core.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TagBinder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('creator', models.UUIDField()),
                ('key', models.CharField(db_index=True, max_length=1000)),
                ('tag', models.UUIDField()),
                ('bind_creator', models.CharField(max_length=150, null=True, verbose_name='Создатель')),
                ('create_date_time_stamp', models.DateTimeField(auto_now_add=True, verbose_name='Дата привязки')),
                ('allow_many', models.BooleanField(default=False, verbose_name='Разрешен список значений')),
            ],
            options={
                'verbose_name': 'Связка тега',
                'verbose_name_plural': 'Связки тегов',
                'db_table': 'table_01_tag_binders',
            },
        ),
        migrations.CreateModel(
            name='TagManager',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('creator', models.UUIDField()),
                ('create_datetime_stamp', models.DateTimeField(auto_now_add=True, verbose_name='Дата привязки')),
                ('tags', ib_core.fields.OneToManyField(to='ib_core.tagbinder', verbose_name='Свойства')),
            ],
            options={
                'verbose_name': 'Менеджер тегов',
                'verbose_name_plural': 'Менеджеры тегов',
            },
        ),
        migrations.AddField(
            model_name='tagbinder',
            name='related_manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manager', to='ib_core.tagmanager', verbose_name='Связанный менеджер'),
        ),
        migrations.AddField(
            model_name='tagbinder',
            name='tag_manager',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ib_core.tagmanager'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Идентификатор пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='tagbinder',
            index=models.Index(fields=['key', 'related_manager'], name='table_01_ta_key_4607a8_idx'),
        ),
    ]
