# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallOffTopicRuleConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_domain_data': 'list[str]',
        'out_of_domain_data': 'list[str]'
    }

    attribute_map = {
        'in_domain_data': 'inDomainData',
        'out_of_domain_data': 'outOfDomainData'
    }

    def __init__(self, in_domain_data=None, out_of_domain_data=None):  # noqa: E501
        """GenerativefirewallOffTopicRuleConfig - a model defined in Swagger"""  # noqa: E501
        self._in_domain_data = None
        self._out_of_domain_data = None
        self.discriminator = None
        if in_domain_data is not None:
            self.in_domain_data = in_domain_data
        if out_of_domain_data is not None:
            self.out_of_domain_data = out_of_domain_data

    @property
    def in_domain_data(self):
        """Gets the in_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501

        In_domain_data is a list of strings that are considered on-topic. Total number of data points in in_domain_data and out_of_domain_data should not exceed 500 and total bytes should not exceed 300KB.  # noqa: E501

        :return: The in_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._in_domain_data

    @in_domain_data.setter
    def in_domain_data(self, in_domain_data):
        """Sets the in_domain_data of this GenerativefirewallOffTopicRuleConfig.

        In_domain_data is a list of strings that are considered on-topic. Total number of data points in in_domain_data and out_of_domain_data should not exceed 500 and total bytes should not exceed 300KB.  # noqa: E501

        :param in_domain_data: The in_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501
        :type: list[str]
        """

        self._in_domain_data = in_domain_data

    @property
    def out_of_domain_data(self):
        """Gets the out_of_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501

        Out_of_domain_data is a list of strings that are considered off-topic.  # noqa: E501

        :return: The out_of_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._out_of_domain_data

    @out_of_domain_data.setter
    def out_of_domain_data(self, out_of_domain_data):
        """Sets the out_of_domain_data of this GenerativefirewallOffTopicRuleConfig.

        Out_of_domain_data is a list of strings that are considered off-topic.  # noqa: E501

        :param out_of_domain_data: The out_of_domain_data of this GenerativefirewallOffTopicRuleConfig.  # noqa: E501
        :type: list[str]
        """

        self._out_of_domain_data = out_of_domain_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallOffTopicRuleConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallOffTopicRuleConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
