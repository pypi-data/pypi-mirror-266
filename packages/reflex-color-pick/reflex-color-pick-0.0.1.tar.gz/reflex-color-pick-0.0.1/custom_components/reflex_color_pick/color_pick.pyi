"""Stub file for custom_components/reflex_color_pick/color_pick.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------

from typing import Any, Dict, Literal, Optional, Union, overload
from reflex.vars import Var, BaseVar, ComputedVar
from reflex.event import EventChain, EventHandler, EventSpec
from reflex.style import Style
import reflex as rx

class ColorPick(rx.Component):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[Var, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, function, BaseVar]
        ] = None,
        **props
    ) -> "ColorPick":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The React library to wrap.  The React component tag.  If the tag is the default export from the module, you must set is_default = True.  This is normally used when components don't have curly braces around them when importing.  is_default = True  If you are wrapping another components with the same tag as a component in your project  you can use aliases to differentiate between them and avoid naming conflicts.  alias = "OtherColorPick"  The props of the React component.  Note: when Reflex compiles the component to Javascript,  `snake_case` property names are automatically formatted as `camelCase`.  The prop names may be defined in `camelCase` as well.  some_prop: rx.Var[str] = "some default value"  some_other_prop: rx.Var[int] = 1  By default Reflex will install the library you have specified in the library property.  However, sometimes you may need to install other libraries to use a component.  In this case you can use the lib_dependencies property to specify other libraries to install.  lib_dependencies: list[str] = []  Event triggers declaration if any.  Below is equivalent to merging `{ "on_change": lambda e: [e] }`  onto the default event triggers of parent/base Component.  The function defined for the `on_change` trigger maps event for the javascript  trigger to what will be passed to the backend event handler function.  on_change: rx.EventHandler[lambda e: [e]]  To add custom code to your component  The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.

        Raises:
            TypeError: If an invalid child is passed.
        """
        ...

color_pick = ColorPick.create
