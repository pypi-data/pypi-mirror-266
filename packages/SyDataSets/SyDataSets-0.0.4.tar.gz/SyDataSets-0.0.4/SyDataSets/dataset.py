import requests
import threading
import time
import sys
import os
from tqdm import tqdm
from .utils.util import generate_token,extract_tar_gz,get_absolute_path
# Get server-side data processing status interface
getstatusurl = '{}/dataset/{}/{}'
#Request data interface
requesturl = '{}/dataset/{}/{}/{}'
# Example Clearing the server file interface
deltaskurl='{}/dataset/{}/del/{}/{}'


# Send the request file task
def send_request(httpserver,tag,event,size,token,datadir):
    try:
        response = requests.get(requesturl.format(httpserver,tag,token,size), stream=True)
        event.set()
        total_size = int(response.headers.get('content-length', 0))
        print("\nThe server starts preparing the data set...")
        sys.stdout.write(f"\rThe server has completed the preparation of {size} image...")
        sys.stdout.flush()
        print("\nStart downloading...")
        tarfile = token+'.tar.gz'
        with open(tarfile, 'wb') as f:
            with tqdm(total=total_size, unit='B', unit_scale=True, desc='Progress',ascii=True) as pbar:
                for chunk in response.iter_content(chunk_size=1024):
                    if chunk:
                        f.write(chunk)
                        pbar.update(len(chunk))
        print("\nFile download successful!!!")
        extract_tar_gz(tarfile,datadir)
        deltask(httpserver,token,size)
    except requests.exceptions.Timeout:
        print("Request timeout")
    except requests.exceptions.RequestException as e:
        print("Request error The request failed:", e)
    finally:
        event.set()


#Clean up the file generated by the request on the server side
def deltask(httpserver,token,size):
    ret=str(requests.get(deltaskurl.format(httpserver,"9ans",token,size)).content.decode('utf-8'))
    if ret != "success":
        print("\nIf the deletion service is abnormal, contact the administrator to clear files to prevent insufficient file storage on the server")


#Progress style printing
def print_info_while_waiting(httpserver,event,token,stop_printing):
    time.sleep(1)
    while not event.is_set():
        size = int(requests.get(getstatusurl.format(httpserver,"9ans",token)).content.decode('utf-8'))
        sys.stdout.write(f"\rServer has prepared {size} image...   ")
        sys.stdout.flush()
        time.sleep(0.5)
        sys.stdout.write(f"\rServer has prepared {size} image..    ")
        sys.stdout.flush()
        time.sleep(0.5)
        sys.stdout.write(f"\rServer has prepared {size} image.     ")
        sys.stdout.flush()
        time.sleep(0.5)
        sys.stdout.write(f"\rServer has prepared {size} image     ")
        sys.stdout.flush()
        time.sleep(0.5)
    stop_printing.set()

"""
Usage:
    SyDataset(tag, size=1000, datadir="data")
    Parameter description:
        tag: Data label currently in use,default is 9ans
        size: The amount of data requested,default is 100
        datadir: Download the location where the data is saved,default is data for the current directory
Example:
    result = SyDataset(tag="9ans",size=200,datadir="data2")

"""
#Entry program
def SyDataset(tag, size=1000, datadir="data"):
    datadirout=get_absolute_path(datadir)
    if os.path.exists(datadirout):
        #print(f"This directory[{datadir}] already exists. If you want to continue, specify a new directory")
        raise Exception(f"This directory[{datadir}] already exists. If you want to continue, specify a new directory")
    httpserver = os.environ.get("SyDatasetServer", "http://192.168.1.35:5000")
    token = generate_token()
    url = requesturl.format(httpserver, tag, token, size)
    event = threading.Event()
    stop_printing = threading.Event()  # Used to notify print_info_while_waiting to stop output
    request_thread = threading.Thread(target=send_request, args=(httpserver, tag, event, size, token, datadir))
    request_thread.start()
    print_thread = threading.Thread(target=print_info_while_waiting, args=(httpserver, event, token, stop_printing))
    print_thread.start()
    request_thread.join()  # Wait for the file to finish downloading
    event.set()  # Set the event object to tell print_thread to end the loop
    stop_printing.set()  # Set the stop_printing object to tell print_thread to stop output
    print_thread.join()  # Wait for print_thread to finish
    return datadirout

if __name__ == "__main__":
    print("\nData store directory:"+SyDataset(tag="9ans",datadir="data2"))