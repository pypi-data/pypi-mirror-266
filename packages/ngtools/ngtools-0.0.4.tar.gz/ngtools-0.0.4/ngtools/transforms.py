import sys
import nitransforms as nit
from tempfile import NamedTemporaryFile
from .opener import open, remote_protocols


AFFINE_FORMATMAP = {
    'afni': nit.io.afni.AFNILinearTransform,
    'fsl': nit.io.fsl.FSLLinearTransform,
    'itk': nit.io.itk.ITKLinearTransform,
    'lta': nit.io.lta.FSLinearTransform,
}


def load_affine(fileobj, format=None, moving=None, fixed=None):
    """
    Load an affine transform from a file.

    Parameters
    ----------
    fileobj : file_like or str
        Input file. May start with a format protocol such as
        `"afni://path/to/file"`. Accepeted protocols are

        * `"afni://"`   Affine generated by AFNI
        * `"fsl://"`    Affine generated by FSL FLIRT
        * `"itk://"`    Affine in ITK format (e.g., generated by ANTs)
        * `"lta://"`    Affine in FreeSurfer LTA format (mri_robust_register)
    format : {"afni", "fsl", "itk", "lta"}, optional
        Alternative way to provide a format hint.

    Returns
    -------
    affine : (4, 4) np.ndarray
        A RAS2RAS affine transform.
    """

    if isinstance(fileobj, str):
        format_protocols = [format + '://' for format in AFFINE_FORMATMAP]
        if fileobj.startswith(tuple(format_protocols)):
            format, *fileobj = fileobj.split('://')
            fileobj = '://'.join(fileobj)

        if not format and fileobj.endswith('.lta'):
            format = 'lta'

    # If remote file, open with fsspec
    if isinstance(fileobj, str) and fileobj.startswith(remote_protocols()):
        with open(fileobj) as f:
            return load_affine(f, format=format)

    # If open file object, write to local file
    if hasattr(fileobj, 'read'):
        with NamedTemporaryFile() as tmp:
            tmp.write(fileobj.read())
            return load_affine(tmp.name, format=format)

    if format:
        try:
            klass = AFFINE_FORMATMAP[format]
            return klass.from_filename(fileobj).to_ras(moving, fixed)
        except Exception as e:
            print(f'Tried format "{format}" with no success', file=sys.stderr)
            raise e

    for format, klass in AFFINE_FORMATMAP.items():
        try:
            klass = AFFINE_FORMATMAP[format]
            return klass.from_filename(fileobj).to_ras(moving, fixed)
        except Exception:
            print(f'Tried format "{format}" with no success', file=sys.stderr)

    raise RuntimeError(f"Failed to load {fileobj}")
