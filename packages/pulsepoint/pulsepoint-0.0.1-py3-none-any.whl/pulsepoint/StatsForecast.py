# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_StatsForecast.ipynb.

# %% auto 0
__all__ = ['SF_test']

# %% ../nbs/00_StatsForecast.ipynb 4
from .core import *
from .tests import _train_SF_model, _evaluate_results, _split_dataset
from .utils import _process_data
from typing import Callable
import pandas as pd

# %% ../nbs/00_StatsForecast.ipynb 5
def SF_test(path: str,       # Path of feather file
            splt_date:str,      # Date to split data
            model:list,              # Models to use
            dimension:str = None,       # dimension of test
            date_col:str = 'ds',        # Independant Variable
            metric_col: str = 'y',      # Dependend Variable
            filters: list[dict] = None, 
            crnt_frmt = None,       # Format of Date Column
            hrz: int = 7,           # Test Horizon
            freq: str = 'D',        # Data frequency
            cross_validate: bool= False,
            cv_periods: int = 0,
            anom_level: int = 80,
            fruitful: bool = False,
            publish_fn: Callable = None,
            **kwargs):
    """ Run Model(s) from StatsForecast """

    levels = [70,80,90,95,99]

    pcd_df = _process_data(path= path, dimension = dimension,date_col= date_col, metric_col= metric_col, filters= filters)
    
    train_df, test_df = _split_dataset(df= pcd_df,splt_date= splt_date, crnt_frmt=crnt_frmt)
    
    fcst_df, cv_df, insample_df = _train_SF_model(df= train_df, model= model, hrz= hrz, freq= freq, levels= levels, cross_validate= cross_validate, cv_periods= cv_periods)
    
    combined_data, anoms_df, = _evaluate_results(dataset= pcd_df, fcst= fcst_df, mdl_name= mdl_name,anom_level= anom_level, levels= levels)
    
    if publish_fn: sent_data = publish_fn()
    
    if fruitful: return combined_data, anoms_df
