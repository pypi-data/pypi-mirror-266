# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_utils.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/02_utils.ipynb 3
import pandas as pd
from .core import *
from typing import Union, Callable
import pandas as pd

# %% ../nbs/02_utils.ipynb 7
def _filter_dataframe(df,     # A pandas DataFrame
                     filters, # dictonary or list of dictionaries
                     )-> pd.DataFrame:
    """Filter a DataFrame using a dictionary or a list of dictionaries with multiple filter conditions.
    
    Filter Examples:
    You can pass in a single value like {"State":"Wisconsin"}.
    You can also pass in a list {"Cities":["La Crosse","Madison","Eau Claire","Milwaukee"]}
    
    """
    
    if isinstance(filters, dict): filters = [filters]
    
    for filter_dict in filters:
        for column, value in filter_dict.items():

            if isinstance(value, list):      df = df[df[column].isin(value)]
            else:                            df = df[df[column] == value]
    
    return df

# %% ../nbs/02_utils.ipynb 10
def _rm_small_dims(df,threshold:int):
    """Remove Dimensions that have less than N observations"""
    val_drop = list(df['unique_id'].value_counts()[df['unique_id'].value_counts() < threshold].index)
    df = df[~df['unique_id'].isin(val_drop)]
    return df

# %% ../nbs/02_utils.ipynb 12
def _name_type_check(df,dimension,date_col):
    """Check datatypes and names of columns"""
    if dimension: 
        df = df.rename(columns={date_col: 'ds', dimension: 'unique_id'})
    else:
        df = df.rename(columns={date_col: 'ds'})
        df['unique_id'] = 'Total'
    
    if df['y'].dtype != 'float64': df['y'] = df['y'].astype(float)

    return df

# %% ../nbs/02_utils.ipynb 15
def _process_metric_col(df,metric_col):

    if callable(metric_col): df['y'] = metric_col(grpd_df)
    else:
        if metric_col in df.columns: df = df.rename(columns={metric_col: 'y'})
        else: raise ValueError(f"metric_col '{metric_col}' not found in the dataframe columns.")
    
    return df

# %% ../nbs/02_utils.ipynb 18
def _process_data(
    path: str, # Path to Feather File
    dimension: str = None, # Independant Variable
    date_col: str = 'ds',  # Date Column    
    metric_col: Union[str, Callable] = 'y', # Dependent Variable
    filters: list[dict] = None, # Desired Filters
    sz_threshold = 50): # Minimum number of observations
    """Filters and aggregates data"""

    df = pd.read_feather(path)
    
    if dimension and isinstance(dimension, str): idxs = [dimension, date_col]
    else:                                        idxs = [date_col]

    if filters: df = _filter_dataframe(df, filters)

    num_cols = list(df.select_dtypes(include=['int64', 'float64', 'int32', 'float32']).columns)

    if len(num_cols) == 0: raise ValueError(f"No numerical columns found. \nThe {metric_col} column(s) should be of type int or float")

    grpd_df = pd.pivot_table(df, values=num_cols, index=idxs, aggfunc='sum').reset_index()
    agg_df = _process_metric_col(grpd_df, metric_col) 
    fnl_df = _name_type_check(agg_df,dimension,date_col)
    fnl_df = _rm_small_dims(fnl_df,sz_threshold)

    return fnl_df
