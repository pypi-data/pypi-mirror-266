# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PdfParams(pydantic.BaseModel):
    strategy: typing.Optional[str] = pydantic.Field(default=None)
    """
    The strategy to use for partitioning the PDF. Valid strategies are "hi_res",
    "ocr_only", and "fast". When using the "hi_res" strategy, the function uses
    a layout detection model to identify document elements. When using the
    "ocr_only" strategy, partition_pdf simply extracts the text from the
    document using OCR and processes it. If the "fast" strategy is used, the text
    is extracted directly from the PDF. The default strategy `auto` will determine
    when a page can be extracted using `fast` mode, otherwise it will fall back to `hi_res`.
    """

    infer_table_structure: typing.Optional[bool] = None
    hi_res_model_name: typing.Optional[str] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
