##
#   Copyright 2021 Alibaba, Inc. and its affiliates. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##

# -*- coding: utf-8 -*-

from typing import List, Dict, Tuple


def combine_sparse_and_dense(sparse_vector: Dict, dence_vector: List[float], alpha: float) -> Tuple[List[float], Dict]:
    """
    Using convex combination to generate hybrid vector.

    Args:
        sparse_vector (Dict): sparse vector generated by encode_documents or encode_query method.
        dence_vector(List[float]): a dense vector represented as a list of floats
        alpha(float): float between 0 and 1 where 0 == sparse only and 1 == dense only.

    Return:
        a tuple of dense and sparse vectors scaled by alpha as a convex combination:
        ((dense * alpha), (sparse * (1 - alpha))).
    """
    if not sparse_vector:
        raise ValueError("sparse_vector must not be empty")

    if not dence_vector:
        raise ValueError("dence_vector must not be empty")

    if not isinstance(alpha, float):
        raise TypeError("alpha must be a float")

    if not 0 <= alpha <= 1:
        raise ValueError("alpha must be between 0 and 1")

    scaled_sparse = {key: value * (1 - alpha) for key, value in sparse_vector.items()}

    scaled_dense = [v * alpha for v in dence_vector]
    return scaled_dense, scaled_sparse
