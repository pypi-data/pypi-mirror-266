name: dev build CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    REGISTRY_URL: satregistry.ehps.ncsu.edu
    PROJECT_NAME: {{ cookiecutter.project_slug }}
    REPO_NAME: {{ cookiecutter.project_slug }}
    SLACK_UPDATES: true
    # Defaults to the #dev-team-conversation channel
    SLACK_CHANNEL_ID: C01TX5VBUTX


# contains 3 jobs: test, publish_dev_build and notification
jobs:
  test:
    name: Run tests
    runs-on: sat-hosted
    # map step outputs to job outputs so they can be share among jobs
    outputs:
      package_version: ${{ steps.variables_step.outputs.package_version }}
      package_name: ${{ steps.variables_step.outputs.package_name }}
      repo_name: ${{ steps.variables_step.outputs.repo_name }}
      repo_owner: ${{ steps.variables_step.outputs.repo_owner }}
      build_number: ${{ steps.variables_step.outputs.build_number }}

    # uncomment the following to pickup services
    # services:
    #   redis:
    #     image: redis
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 6379:6379

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Get Code
          uses: actions/checkout@v3
          with:
              ref: ${{ github.head_ref }}
        - name: Get SAT Actions
          uses: actions/checkout@v3
          with:
              repository: SAT/sat-actions
              path: sat-actions
        - name: Setup Python
          uses: actions/setup-python@v4
          with:
              python-version: "3.10"
        - name: Cache Packages
          uses: actions/cache@v3
          with:
              path: ~/.local
              key: requirements-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/requirements/base/base.txt') }}-${{ hashFiles('**/requirements/dev/dev.txt') }}-${{ hashFiles('.github/workflows/*.yml') }}
              restore-keys: |
                  requirements-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-
        - name: Setup Virtual Environment
          run: |
              python -m venv venv
        - run: |
              source venv/bin/activate
              make setup
        - name: Run Tests
          run: |
              source venv/bin/activate
              pytest -x
        # declare package_version, repo_owner, repo_name, package_name so you may use it in web hooks.
        - name: Declare variables for convenient use
          id: variables_step
          run: |
              echo "repo_owner=${GITHUB_REPOSITORY%/*}" >> $GITHUB_OUTPUT
              echo "repo_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
          shell: bash

        - name: Send Failure Message on Slack if Tests Fail
          if: ${{ failure() }}
          uses: ./sat-actions/slack-updates
          with:
              channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
              message: "The tests for `${{ env.REPO_NAME }}` have failed."
          env:
              SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

        - name: End the Job if the Tests Fail
          if: ${{ failure() }}
          run: exit 1

        - name: Send Success Message on Slack
          uses: ./sat-actions/slack-updates
          with:
              channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
              message: "The tests for `${{ env.REPO_NAME }}` have passed."
          env:
              SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}


#  publish_dev_build:
#    # if test failed, we should not publish
#    needs: test
#    # you may need to change os below
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry tox tox-gh-actions
#
#      - name: build documentation
#        run: |
#          poetry install -E doc
#          mkdocs build
#          git config --global user.name Docs deploy
#          git config --global user.email docs@dummy.bot.com
#          mike deploy -p -f --ignore "`poetry version --short`.dev"
#          mike set-default -p "`poetry version --short`.dev"
#
#      - name: Build wheels and source tarball
#        run: |
#          poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
#          poetry lock
#          poetry build
#
#      - name: publish to Test PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.TEST_PYPI_API_TOKEN}}
#          repository_url: https://test.pypi.org/legacy/
#          skip_existing: true
#
#  notification:
#    needs: [test,publish_dev_build]
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - uses: martialonline/workflow-status@v2
#        id: check
#
#      - name: build success notification via slack
#        if: ${{ steps.check.outputs.status == 'success' }}
#        uses: ./sat-actions/slack-updates
