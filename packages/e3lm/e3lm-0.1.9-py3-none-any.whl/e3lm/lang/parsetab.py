
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftENDleftPLUSMINUSleftTIMESDIVIDEAND ATTR AVAL BODY BOOL CLASS COLON COMMA COMMENT DIVIDE DOT END ID IMPORT LARRAY LDICT LPAREN MINUS NAME NEWLINE NONE NOT NUM_BIN NUM_FLOAT NUM_HEX NUM_IMAG NUM_INT NUM_OCT OR PLUS RARRAY RDICT RPAREN STRING STRING_CONTINUE STRING_CONTINUE_NEWLINE STRING_END STRING_START_SINGLEQ1 STRING_START_SINGLEQ2 STRING_START_TRIPLEQ1 STRING_START_TRIPLEQ2 TERM TIMES UNIT WS\n        master    : master block\n                  | block\n        \n        block   : CLASS blockcontent END\n                | CLASS END\n        \n        blockcontent    : blockcontent attr\n                        | blockcontent block\n                        | attr\n                        | block\n        attr     : ATTR expr\n                    | BODY\n         expr    : expr PLUS term\n                    | expr MINUS term\n                    | term\n            term    : term TIMES factor\n                    | term DIVIDE factor\n                    | term TIMES TIMES factor\n                    | term DIVIDE DIVIDE factor\n                    | factor\n        factor : NUM_INT\n                  | NUM_FLOAT\n                  | NUM_HEX\n                  | NUM_OCT\n                  | NUM_IMAG\n                  | NUM_BIN\n                  | PLUS factor\n                  | MINUS factor\n        factor : LPAREN expr RPAREN\n        factor : STRING\n        factor : BOOL\n        factor : NONE\n        factor : identifier\n                  | func\n        func   : ID LPAREN funcargs RPAREN\n                  | ID LPAREN RPAREN\n        funcargs : funcargs COMMA expr\n                    | expr\n        identifier : factor DOT func\n                      | identifier DOT func\n        identifier : identifier DOT ID\n                      | factor DOT ID\n                      | func\n                      | ID\n        identifier : identifier LARRAY expr RARRAY\n        arraydata : arraydata COMMA expr\n                     | expr\n        factor : LARRAY arraydata RARRAY\n                  | LARRAY arraydata COMMA RARRAY\n                  | LARRAY RARRAY\n        dictdata : dictdata COMMA dictcouple\n                    | dictcouple\n        expr : NOT expr\n        dictdata : dict\n        dictcouple : expr COLON expr\n        dict   : LDICT dictdata RDICT\n                  | LDICT dictdata COMMA RDICT\n                  | LDICT RDICT\n        factor : dict\n        '
    
_lr_action_items = {'CLASS':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,48,52,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[3,3,-2,3,-1,3,-4,-7,-8,-10,-3,-5,-6,-9,-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,-48,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'$end':([1,2,4,6,11,],[0,-2,-1,-4,-3,]),'END':([3,5,6,7,8,10,11,12,13,14,16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,48,52,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[6,11,-4,-7,-8,-10,-3,-5,-6,-9,-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,-48,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'ATTR':([3,5,6,7,8,10,11,12,13,14,16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,48,52,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[9,9,-4,-7,-8,-10,-3,-5,-6,-9,-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,-48,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'BODY':([3,5,6,7,8,10,11,12,13,14,16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,48,52,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[10,10,-4,-7,-8,-10,-3,-5,-6,-9,-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,-48,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'NOT':([9,18,26,32,35,46,50,69,74,75,82,],[18,18,18,18,18,18,18,18,18,18,18,]),'NUM_INT':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'NUM_FLOAT':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'NUM_HEX':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'NUM_OCT':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'NUM_IMAG':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NUM_BIN':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'PLUS':([9,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,48,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,],[15,36,15,-13,15,15,-18,-19,-20,-21,-22,-23,-24,15,-28,-29,-30,-31,-32,15,-57,-42,15,15,15,-25,15,15,-26,36,36,15,-48,36,15,-56,-57,36,-11,-12,15,-14,15,-15,-37,-40,-27,-38,-39,36,-46,15,-34,36,-54,15,15,-16,-17,-43,-47,36,-33,15,-55,36,36,]),'MINUS':([9,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,48,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,],[17,37,17,-13,17,17,-18,-19,-20,-21,-22,-23,-24,17,-28,-29,-30,-31,-32,17,-57,-42,17,17,17,-25,17,17,-26,37,37,17,-48,37,17,-56,-57,37,-11,-12,17,-14,17,-15,-37,-40,-27,-38,-39,37,-46,17,-34,37,-54,17,17,-16,-17,-43,-47,37,-33,17,-55,37,37,]),'LPAREN':([9,15,17,18,26,32,34,35,36,37,39,40,46,50,58,60,63,66,69,74,75,82,],[26,26,26,26,26,26,50,26,26,26,26,26,26,26,26,26,50,50,26,26,26,26,]),'STRING':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'BOOL':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'NONE':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'LARRAY':([9,15,17,18,26,30,31,32,34,35,36,37,39,40,46,50,58,60,62,63,65,66,69,71,74,75,78,81,82,],[32,32,32,32,32,46,-41,32,-42,32,32,32,32,32,32,32,32,32,-37,-40,-38,-39,32,-34,32,32,-43,-33,32,]),'ID':([9,15,17,18,26,32,35,36,37,39,40,43,45,46,50,58,60,69,74,75,82,],[34,34,34,34,34,34,34,34,34,34,34,63,66,34,34,34,34,34,34,34,34,]),'LDICT':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'RPAREN':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,44,48,50,52,56,57,59,61,62,63,64,65,66,68,70,71,72,73,76,77,78,79,81,83,86,],[-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,64,-48,71,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,81,-34,-36,-54,-16,-17,-43,-47,-33,-55,-35,]),'RARRAY':([16,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,38,41,42,47,48,49,52,56,57,59,61,62,63,64,65,66,67,68,69,71,73,76,77,78,79,80,81,83,],[-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,48,-57,-42,-25,-26,-51,68,-48,-45,-56,-11,-12,-14,-15,-37,-40,-27,-38,-39,78,-46,79,-34,-54,-16,-17,-43,-47,-44,-33,-55,]),'COMMA':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,47,48,49,51,52,53,54,56,57,59,61,62,63,64,65,66,68,70,71,72,73,76,77,78,79,80,81,83,84,85,86,],[-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,69,-48,-45,74,-56,-50,-52,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,82,-34,-36,-54,-16,-17,-43,-47,-44,-33,-55,-49,-53,-35,]),'COLON':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,42,48,52,54,55,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,-26,-51,-48,-56,-57,75,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'RDICT':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,35,38,41,42,48,51,52,53,54,56,57,59,61,62,63,64,65,66,68,71,73,74,76,77,78,79,81,83,84,85,],[-13,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,52,-25,-26,-51,-48,73,-56,-50,-52,-11,-12,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,83,-16,-17,-43,-47,-33,-55,-49,-53,]),'TIMES':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,39,41,48,52,54,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[39,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,58,-26,-48,-56,-57,39,39,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'DIVIDE':([16,19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,40,41,48,52,54,56,57,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[40,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-57,-42,-25,60,-26,-48,-56,-57,40,40,-14,-15,-37,-40,-27,-38,-39,-46,-34,-54,-16,-17,-43,-47,-33,-55,]),'DOT':([19,20,21,22,23,24,25,27,28,29,30,31,33,34,38,41,48,52,54,59,61,62,63,64,65,66,68,71,73,76,77,78,79,81,83,],[43,-19,-20,-21,-22,-23,-24,-28,-29,-30,45,-32,-57,-42,-25,-26,-48,-56,-57,43,43,-37,-40,-27,-38,-39,-46,-34,-54,43,43,-43,-47,-33,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'master':([0,],[1,]),'block':([0,1,3,5,],[2,4,8,13,]),'blockcontent':([3,],[5,]),'attr':([3,5,],[7,12,]),'expr':([9,18,26,32,35,46,50,69,74,75,82,],[14,42,44,49,55,67,72,80,55,85,86,]),'term':([9,18,26,32,35,36,37,46,50,69,74,75,82,],[16,16,16,16,16,56,57,16,16,16,16,16,16,]),'factor':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[19,38,41,19,19,19,19,19,19,59,61,19,19,76,77,19,19,19,19,]),'identifier':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'func':([9,15,17,18,26,32,35,36,37,39,40,43,45,46,50,58,60,69,74,75,82,],[31,31,31,31,31,31,31,31,31,31,31,62,65,31,31,31,31,31,31,31,31,]),'dict':([9,15,17,18,26,32,35,36,37,39,40,46,50,58,60,69,74,75,82,],[33,33,33,33,33,33,54,33,33,33,33,33,33,33,33,33,33,33,33,]),'arraydata':([32,],[47,]),'dictdata':([35,],[51,]),'dictcouple':([35,74,],[53,84,]),'funcargs':([50,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> master","S'",1,None,None,None),
  ('master -> master block','master',2,'p_master','parser.py',40),
  ('master -> block','master',1,'p_master','parser.py',41),
  ('block -> CLASS blockcontent END','block',3,'p_block','parser.py',52),
  ('block -> CLASS END','block',2,'p_block','parser.py',53),
  ('blockcontent -> blockcontent attr','blockcontent',2,'p_blockcontent','parser.py',70),
  ('blockcontent -> blockcontent block','blockcontent',2,'p_blockcontent','parser.py',71),
  ('blockcontent -> attr','blockcontent',1,'p_blockcontent','parser.py',72),
  ('blockcontent -> block','blockcontent',1,'p_blockcontent','parser.py',73),
  ('attr -> ATTR expr','attr',2,'p_attrset','parser.py',91),
  ('attr -> BODY','attr',1,'p_attrset','parser.py',92),
  ('expr -> expr PLUS term','expr',3,'p_binops','parser.py',102),
  ('expr -> expr MINUS term','expr',3,'p_binops','parser.py',103),
  ('expr -> term','expr',1,'p_binops','parser.py',104),
  ('term -> term TIMES factor','term',3,'p_binops','parser.py',105),
  ('term -> term DIVIDE factor','term',3,'p_binops','parser.py',106),
  ('term -> term TIMES TIMES factor','term',4,'p_binops','parser.py',107),
  ('term -> term DIVIDE DIVIDE factor','term',4,'p_binops','parser.py',108),
  ('term -> factor','term',1,'p_binops','parser.py',109),
  ('factor -> NUM_INT','factor',1,'p_factor_num','parser.py',124),
  ('factor -> NUM_FLOAT','factor',1,'p_factor_num','parser.py',125),
  ('factor -> NUM_HEX','factor',1,'p_factor_num','parser.py',126),
  ('factor -> NUM_OCT','factor',1,'p_factor_num','parser.py',127),
  ('factor -> NUM_IMAG','factor',1,'p_factor_num','parser.py',128),
  ('factor -> NUM_BIN','factor',1,'p_factor_num','parser.py',129),
  ('factor -> PLUS factor','factor',2,'p_factor_num','parser.py',130),
  ('factor -> MINUS factor','factor',2,'p_factor_num','parser.py',131),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor_paren_expr','parser.py',140),
  ('factor -> STRING','factor',1,'p_factor_str','parser.py',146),
  ('factor -> BOOL','factor',1,'p_factor_bool','parser.py',152),
  ('factor -> NONE','factor',1,'p_factor_none','parser.py',157),
  ('factor -> identifier','factor',1,'p_factor_id','parser.py',163),
  ('factor -> func','factor',1,'p_factor_id','parser.py',164),
  ('func -> ID LPAREN funcargs RPAREN','func',4,'p_func','parser.py',169),
  ('func -> ID LPAREN RPAREN','func',3,'p_func','parser.py',170),
  ('funcargs -> funcargs COMMA expr','funcargs',3,'p_funcargs','parser.py',178),
  ('funcargs -> expr','funcargs',1,'p_funcargs','parser.py',179),
  ('identifier -> factor DOT func','identifier',3,'p_id_func','parser.py',188),
  ('identifier -> identifier DOT func','identifier',3,'p_id_func','parser.py',189),
  ('identifier -> identifier DOT ID','identifier',3,'p_id','parser.py',194),
  ('identifier -> factor DOT ID','identifier',3,'p_id','parser.py',195),
  ('identifier -> func','identifier',1,'p_id','parser.py',196),
  ('identifier -> ID','identifier',1,'p_id','parser.py',197),
  ('identifier -> identifier LARRAY expr RARRAY','identifier',4,'p_id_index','parser.py',209),
  ('arraydata -> arraydata COMMA expr','arraydata',3,'p_arraydata','parser.py',216),
  ('arraydata -> expr','arraydata',1,'p_arraydata','parser.py',217),
  ('factor -> LARRAY arraydata RARRAY','factor',3,'p_factor_arr','parser.py',227),
  ('factor -> LARRAY arraydata COMMA RARRAY','factor',4,'p_factor_arr','parser.py',228),
  ('factor -> LARRAY RARRAY','factor',2,'p_factor_arr','parser.py',229),
  ('dictdata -> dictdata COMMA dictcouple','dictdata',3,'p_dictdata','parser.py',238),
  ('dictdata -> dictcouple','dictdata',1,'p_dictdata','parser.py',239),
  ('expr -> NOT expr','expr',2,'p_not','parser.py',248),
  ('dictdata -> dict','dictdata',1,'p_dict_dictdata','parser.py',253),
  ('dictcouple -> expr COLON expr','dictcouple',3,'p_factor_dictcouple','parser.py',258),
  ('dict -> LDICT dictdata RDICT','dict',3,'p_factor_dict','parser.py',263),
  ('dict -> LDICT dictdata COMMA RDICT','dict',4,'p_factor_dict','parser.py',264),
  ('dict -> LDICT RDICT','dict',2,'p_factor_dict','parser.py',265),
  ('factor -> dict','factor',1,'p_dict','parser.py',270),
]
