Metadata-Version: 2.1
Name: rollercoaster
Version: 2.1.0
Summary: economic estimation
License: GPL 3.0 + CC BY-NC-SA 4.0
Keywords: rain & pour,economic estimation,finance,commerce,wealth,money,treasures,treasury,subconscious trading
Description-Content-Type: text/markdown
Requires-Dist: ramps-galactic
Requires-Dist: volts
Requires-Dist: ships
Requires-Dist: somatic
Requires-Dist: semver
Requires-Dist: toml
Requires-Dist: alpaca-py
Requires-Dist: arrow
Requires-Dist: backtrader
Requires-Dist: basana
Requires-Dist: cufflinks
Requires-Dist: cryptography
Requires-Dist: ccxt
Requires-Dist: click
Requires-Dist: dash
Requires-Dist: finvizfinance
Requires-Dist: ipychart
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: pandas-ta
Requires-Dist: pandas-datareader
Requires-Dist: plotly
Requires-Dist: pydash
Requires-Dist: PyJSONViewer
Requires-Dist: PyJWT
Requires-Dist: quandl
Requires-Dist: sanic
Requires-Dist: stock-indicators
Requires-Dist: ta
Requires-Dist: tabulate
Requires-Dist: talipp
Requires-Dist: technical-indicators-lib
Requires-Dist: tradingview-ta
Requires-Dist: tradingview-screener
Requires-Dist: yahooquery
Requires-Dist: yfinance



Bravo! You have received a Mercantilism Diploma in "rollercoaster" from the Orbital Convergence University International Air and Water Embassy of the Tangerine Planet (the planet that is one ellipse further from the Sun than Earth's ellipse).

You are now officially certified to include "rollercoaster" in your practice.

--
# rollercoaster

## install
```
pip install rollercoaster
```

## rides (OCHLV)
rides.season_3.super_hero_trend

## stats (options)
### stats.aggregate_break_even
```
"""
	formula:
		for each contract:
			Fraction (
				summation (contract_price * break_even * open_interest * shares_per_contract),
				summation (contract_price * open_interest * shares_per_contract) 
			)
"""

Tradier_API_authorization = ""
		
#
#	This presumes that the symbol is unique...
#
import rollercoaster.clouds.Tradier.procedures.options.combine as combine_options  
import rollercoaster.stats.aggregate_break_even as aggregate_break_even
break_evens = aggregate_break_even.calc ({
	"expirations": combine_options.presently ({
		"symbol": "SOYB",
		"authorization": Tradier_API_authorization
	})
})

import rich
rich.print_json (data = break_evens)

```

### stats.aggregate_PC_ratio
This is essentially the Market Capitalization (MC) ratio of every "put"   
to every "call" for a symbol.   

```
	example:
		2 : 1

		indicates that:
			2/3 of the money is on puts 
			1/3 of the money is on calls
```


```
	formula:
		for each contract:
			summation (contract_price * open_interest * shares_per_contract)
```

```
import rollercoaster.stats.aggregate_PC_ratio as aggregate_PC_ratio
import rollercoaster.clouds.Tradier.procedures.options.combine as combine_options  
PC_ratios = aggregate_PC_ratio.calc ({
	"expirations": combine_options.presently ({
		"symbol": "SOYB",
		"authorization": Tradier_API_authorization
	})
})

import rich
rich.print_json (data = {
	"PC ratios": PC_ratios
})
```


## clouds
clouds.Coinbase.API.products.candles
