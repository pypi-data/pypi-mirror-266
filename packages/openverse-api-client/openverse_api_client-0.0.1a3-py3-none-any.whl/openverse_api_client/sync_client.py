"""
This file is generated by `openverse_api_client`, do not edit it directly.
"""

from datetime import datetime, timedelta, UTC
from typing_extensions import Dict, Any, cast, Self, Literal, overload
import httpx

from openverse_api_client import endpoints
from openverse_api_client.auth import OpenverseAuth
from openverse_api_client.meta import Empty, empty, OpenverseAPIResponse, OpenverseAPIRequest


EXPIRY_THRESHOLD = 30


class OpenverseClient:
    base_url: str = "https://api.openverse.engineering/"
    auth: OpenverseAuth | None = None
    client: httpx.Client

    _is_shared_client: bool

    def __init__(
        self,
        base_url: str | None = None,
        client_id: str | None = None,
        client_secret: str | None = None,
        httpx_client: httpx.Client | None = None,
    ):
        self.base_url = base_url if base_url else self.base_url
        if self.base_url[-1] != "/":
            self.base_url += "/"

        if client_id or client_secret:
            assert client_id and client_secret, "`client_id` and `client_secret` are both required when either is defined"

            self.auth = OpenverseAuth(
                client=self,
                client_id=client_id,
                client_secret=client_secret,
            )

        if httpx_client is None:
            self.client = httpx.Client()
            self._is_shared_client = False
        else:
            self.client = httpx_client
            self._is_shared_client = True

    def __enter__(self) -> Self:
        return self

    def __exit__(self, exc_type=None, exc_value=None, traceback=None) -> None:
        self.client.__exit__(exc_type, exc_value, traceback)

    def close(self):
        self.client.close()

    def _base_request(
        self,
        *,
        method: str,
        path: str,
        **kwargs,
    ) -> httpx.Response:
        return self.client.request(
            method=method,
            url=f"{self.base_url}{path}",
            **kwargs,
        )

    def _request(
        self,
        *,
        method: str,
        path: str,
        **kwargs,
    ) -> httpx.Response:
        kwargs.setdefault("auth", self.auth)
        return self._base_request(
            method=method,
            path=path,
            **kwargs,
        )
    
    def POST_v1_auth_tokens_register(
        self,
        name: str,
        description: str,
        email: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.POST_v1_auth_tokens_register.response]:
        params = cast(
            endpoints.POST_v1_auth_tokens_register.params,
            {
                "name": name,
                "description": description,
                "email": email,
            }
        )

        params = cast(
            endpoints.POST_v1_auth_tokens_register.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/auth_tokens/register/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def POST_v1_auth_tokens_token(
        self,
        grant_type: Literal['client_credentials'],
        client_id: str,
        client_secret: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.POST_v1_auth_tokens_token.response]:
        params = cast(
            endpoints.POST_v1_auth_tokens_token.params,
            {
                "grant_type": grant_type,
                "client_id": client_id,
                "client_secret": client_secret,
            }
        )

        params = cast(
            endpoints.POST_v1_auth_tokens_token.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/auth_tokens/token/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/x-www-form-urlencoded")

        response = self._request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_rate_limit(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_rate_limit.response]:
        params = cast(
            endpoints.GET_v1_rate_limit.params,
            {
            }
        )

        params = cast(
            endpoints.GET_v1_rate_limit.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/rate_limit/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_images_stats(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images_stats.response]:
        params = cast(
            endpoints.GET_v1_images_stats.params,
            {
            }
        )

        params = cast(
            endpoints.GET_v1_images_stats.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/stats/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_audio_stats(
        self,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio_stats.response]:
        params = cast(
            endpoints.GET_v1_audio_stats.params,
            {
            }
        )

        params = cast(
            endpoints.GET_v1_audio_stats.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/stats/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    @overload
    def GET_v1_images(
        self,
        q: str,
        category: str | list[str] | Empty = empty,
        aspect_ratio: str | list[str] | Empty = empty,
        size: list | Empty = empty,
        page: int | Empty = empty,
        page_size: int | Empty = empty,
        source: str | list[str] | Empty = empty,
        excluded_source: str | list[str] | Empty = empty,
        license: str | list[str] | Empty = empty,
        license_type: str | list[str] | Empty = empty,
        tags: str | list[str] | Empty = empty,
        filter_dead: bool | Empty = empty,
        extension: str | list[str] | Empty = empty,
        include_sensitive_results: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images.response]:
        ...
    @overload
    def GET_v1_images(
        self,
        creator: str,
        title: str,
        category: str | list[str] | Empty = empty,
        aspect_ratio: str | list[str] | Empty = empty,
        size: list | Empty = empty,
        page: int | Empty = empty,
        page_size: int | Empty = empty,
        source: str | list[str] | Empty = empty,
        excluded_source: str | list[str] | Empty = empty,
        license: str | list[str] | Empty = empty,
        license_type: str | list[str] | Empty = empty,
        tags: str | list[str] | Empty = empty,
        filter_dead: bool | Empty = empty,
        extension: str | list[str] | Empty = empty,
        include_sensitive_results: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images.response]:
        ...
    def GET_v1_images(self, **kwargs):
        headers = kwargs.pop("headers", None)
        params = cast(endpoints.GET_v1_images.params, kwargs)

        params = cast(
            endpoints.GET_v1_images.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    @overload
    def GET_v1_audio(
        self,
        q: str,
        category: str | list[str] | Empty = empty,
        length: str | list[str] | Empty = empty,
        peaks: bool | Empty = empty,
        page: int | Empty = empty,
        page_size: int | Empty = empty,
        source: str | list[str] | Empty = empty,
        excluded_source: str | list[str] | Empty = empty,
        license: str | list[str] | Empty = empty,
        license_type: str | list[str] | Empty = empty,
        tags: str | list[str] | Empty = empty,
        filter_dead: bool | Empty = empty,
        extension: str | list[str] | Empty = empty,
        include_sensitive_results: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio.response]:
        ...
    @overload
    def GET_v1_audio(
        self,
        creator: str,
        title: str,
        category: str | list[str] | Empty = empty,
        length: str | list[str] | Empty = empty,
        peaks: bool | Empty = empty,
        page: int | Empty = empty,
        page_size: int | Empty = empty,
        source: str | list[str] | Empty = empty,
        excluded_source: str | list[str] | Empty = empty,
        license: str | list[str] | Empty = empty,
        license_type: str | list[str] | Empty = empty,
        tags: str | list[str] | Empty = empty,
        filter_dead: bool | Empty = empty,
        extension: str | list[str] | Empty = empty,
        include_sensitive_results: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio.response]:
        ...
    def GET_v1_audio(self, **kwargs):
        headers = kwargs.pop("headers", None)
        params = cast(endpoints.GET_v1_audio.params, kwargs)

        params = cast(
            endpoints.GET_v1_audio.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_single_image(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_single_image.response]:
        params = cast(
            endpoints.GET_v1_single_image.params,
            {
                "identifier": identifier,
            }
        )

        params = cast(
            endpoints.GET_v1_single_image.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/:identifier/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_single_audio(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_single_audio.response]:
        params = cast(
            endpoints.GET_v1_single_audio.params,
            {
                "identifier": identifier,
            }
        )

        params = cast(
            endpoints.GET_v1_single_audio.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/:identifier/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_images_related(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images_related.response]:
        params = cast(
            endpoints.GET_v1_images_related.params,
            {
                "identifier": identifier,
            }
        )

        params = cast(
            endpoints.GET_v1_images_related.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/:identifier/related/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_audio_related(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio_related.response]:
        params = cast(
            endpoints.GET_v1_audio_related.params,
            {
                "identifier": identifier,
            }
        )

        params = cast(
            endpoints.GET_v1_audio_related.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/:identifier/related/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_images_thumbnail(
        self,
        identifier: str,
        full_size: bool | Empty = empty,
        compressed: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images_thumbnail.response]:
        params = cast(
            endpoints.GET_v1_images_thumbnail.params,
            {
                "identifier": identifier,
                "full_size": full_size,
                "compressed": compressed,
            }
        )

        params = cast(
            endpoints.GET_v1_images_thumbnail.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/:identifier/thumb/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.content
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_audio_thumbnail(
        self,
        identifier: str,
        full_size: bool | Empty = empty,
        compressed: bool | Empty = empty,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio_thumbnail.response]:
        params = cast(
            endpoints.GET_v1_audio_thumbnail.params,
            {
                "identifier": identifier,
                "full_size": full_size,
                "compressed": compressed,
            }
        )

        params = cast(
            endpoints.GET_v1_audio_thumbnail.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/:identifier/thumb/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.content
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_audio_waveform(
        self,
        identifier: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_audio_waveform.response]:
        params = cast(
            endpoints.GET_v1_audio_waveform.params,
            {
                "identifier": identifier,
            }
        )

        params = cast(
            endpoints.GET_v1_audio_waveform.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/audio/:identifier/waveform/"
        path = path.replace(":identifier", params["identifier"])
        del params["identifier"]

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    
    def GET_v1_images_oembed(
        self,
        url: str,
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.GET_v1_images_oembed.response]:
        params = cast(
            endpoints.GET_v1_images_oembed.params,
            {
                "url": url,
            }
        )

        params = cast(
            endpoints.GET_v1_images_oembed.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "v1/images/oembed"

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "application/json")

        response = self._request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
        )

        response.read()
        content = response.json()
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    