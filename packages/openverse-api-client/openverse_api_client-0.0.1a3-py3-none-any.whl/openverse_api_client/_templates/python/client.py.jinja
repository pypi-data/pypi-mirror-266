"""
This file is generated by `openverse_api_client`, do not edit it directly.
"""

from datetime import datetime, timedelta, UTC
from typing_extensions import Dict, Any, cast, Self, Literal, overload
import httpx
{%- if Async %}
import asyncio
{%- endif %}

from openverse_api_client import endpoints
from openverse_api_client.auth import OpenverseAuth
from openverse_api_client.meta import Empty, empty, OpenverseAPIResponse, OpenverseAPIRequest


EXPIRY_THRESHOLD = 30


class {{ Async }}OpenverseClient:
    base_url: str = "https://api.openverse.engineering/"
    auth: OpenverseAuth | None = None
    client: httpx.{{ Async }}Client

    _is_shared_client: bool

    def __init__(
        self,
        base_url: str | None = None,
        client_id: str | None = None,
        client_secret: str | None = None,
        httpx_client: httpx.{{ Async }}Client | None = None,
    ):
        self.base_url = base_url if base_url else self.base_url
        if self.base_url[-1] != "/":
            self.base_url += "/"

        if client_id or client_secret:
            assert client_id and client_secret, "`client_id` and `client_secret` are both required when either is defined"

            self.auth = OpenverseAuth(
                client=self,
                client_id=client_id,
                client_secret=client_secret,
            )

        if httpx_client is None:
            self.client = httpx.{{ Async }}Client()
            self._is_shared_client = False
        else:
            self.client = httpx_client
            self._is_shared_client = True

    {{ def }} __{{ a }}enter__(self) -> Self:
        return self

    {{ def }} __{{ a }}exit__(self, exc_type=None, exc_value=None, traceback=None) -> None:
        {{ await }}self.client.__{{ a }}exit__(exc_type, exc_value, traceback)

    {{ def }} close(self):
        {{ await }}self.client.{{ a }}close()

    {{ def }} _base_request(
        self,
        *,
        method: str,
        path: str,
        **kwargs,
    ) -> httpx.Response:
        return {{ await }}self.client.request(
            method=method,
            url=f"{self.base_url}{path}",
            **kwargs,
        )

    {{ def }} _request(
        self,
        *,
        method: str,
        path: str,
        **kwargs,
    ) -> httpx.Response:
        kwargs.setdefault("auth", self.auth)
        return {{ await }}self._base_request(
            method=method,
            path=path,
            **kwargs,
        )
    {% for method in methods -%}
    {% for signature in method.signatures -%}
    {% if method.overloaded %}
    @overload
    {%- endif %}
    {{ def }} {{ method.endpoint.__name__ }}(
        self,
        {% for param in signature.parameters -%}
        {{ param.name }}: {{ param.type }}{% if not param.required %} | Empty{% endif %}
        {%- if param.default is defined %} = {{ param.default }}
        {%- elif not param.required %} = empty
        {%- endif %},
        {% endfor -%}
        headers: dict | httpx.Headers | None = None
    ) -> OpenverseAPIResponse[endpoints.{{ method.endpoint.__name__ }}.response]:
        {%- if method.overloaded %}
        ...{% endif -%}
    {% endfor -%}
        {%- if method.overloaded %}
    {{ def }} {{ method.endpoint.__name__ }}(self, **kwargs):
        headers = kwargs.pop("headers", None)
        params = cast(endpoints.{{ method.endpoint.__name__ }}.params, kwargs)
        {%- else %}
        params = cast(
            endpoints.{{ method.endpoint.__name__ }}.params,
            {
                {%- for param in (method.signatures | first).parameters %}
                "{{ param.name }}": {{ param.name }},
                {%- endfor %}
            }
        )
        {%- endif %}

        params = cast(
            endpoints.{{ method.endpoint.__name__ }}.params,
            {
                k: v
                for k, v in params.items()
                if v != empty
            }
        )

        path = "{{ method.endpoint.endpoint }}"

        {%- for path_param in method.endpoint.path_params %}
        path = path.replace(":{{ path_param }}", params["{{ path_param }}"])
        del params["{{ path_param }}"]
        {%- endfor %}

        headers = httpx.Headers(headers or {})
        headers.setdefault("content-type", "{{ method.endpoint.content_type }}")

        response = {{ await }}self._request(
            method="{{ method.endpoint.method }}",
            path=path,
            params=params,
            headers=headers,
        )

        {{ await }}response.{{ a }}read()
        {% if method.json_response -%}
        content = response.json()
        {% else -%}
        content = response.content
        {% endif -%}
        return OpenverseAPIResponse(
            body=content,
            headers=response.headers,
            status_code=response.status_code,
            request=OpenverseAPIRequest(
                headers=headers,
                params=params,
            )
        )
    {% endfor -%}
