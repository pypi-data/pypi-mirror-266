from typing import AsyncIterable, Iterable, TypeVar, Generic, overload, Literal
from abc import ABC, abstractmethod
from haskellian.either import Either
from .errors import ExistentItem, InexistentItem, DBError, InvalidData

T = TypeVar('T')

class AsyncAPI(ABC, Generic[T]):
  @overload
  @abstractmethod
  async def insert(self, key: str, value: T, *, replace: Literal[True]) -> Either[DBError, None]: ...
  @overload
  @abstractmethod
  async def insert(self, key: str, value: T, *, replace: Literal[False] = False) -> Either[DBError | ExistentItem, None]: ...

  @abstractmethod
  async def update(self, key: str, value: T) -> Either[DBError | InexistentItem, None]: ...
  @abstractmethod
  async def read(self, key: str) -> Either[DBError | InvalidData | InexistentItem, T]: ...
  @abstractmethod
  async def delete(self, key: str) -> Either[DBError | InexistentItem, None]: ...
  @abstractmethod
  def items(self, batch_size: int | None = None) -> AsyncIterable[Either[DBError | InvalidData, tuple[str, T]]]: ...
  @abstractmethod
  def keys(self, batch_size: int | None = None) -> AsyncIterable[Either[DBError, str]]: ...

  @abstractmethod
  async def commit(self) -> Either[DBError, None]: ...
  @abstractmethod
  async def rollback(self) -> Either[DBError, None]: ...

class API(ABC, Generic[T]):
  @overload
  @abstractmethod
  def insert(self, key: str, value: T, *, replace: Literal[True]) -> Either[DBError, None]: ...
  @overload
  @abstractmethod
  def insert(self, key: str, value: T, *, replace: Literal[False] = False) -> Either[DBError | ExistentItem, None]: ...

  @abstractmethod
  def read(self, key: str) -> Either[DBError | InvalidData | InexistentItem, T]: ...
  @abstractmethod
  def delete(self, key: str) -> Either[DBError | InexistentItem, None]: ...
  @abstractmethod
  def items(self, batch_size: int | None = None) -> Iterable[Either[DBError | InvalidData, tuple[str, T]]]: ...
  @abstractmethod
  def keys(self, batch_size: int | None = None) -> Iterable[Either[DBError, str]]: ...

  @abstractmethod
  def commit(self) -> Either[DBError, None]: ...
  @abstractmethod
  def rollback(self) -> Either[DBError, None]: ...
