{"version":3,"file":"static/js/647.2d46acf1.chunk.js","mappings":"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","sources":["evaluation/data/GeneralEvaluationDataConfiguration.tsx"],"sourcesContent":["import {\n  Checkbox,\n  Flex,\n  Loader,\n  NumberInput,\n  ScrollArea,\n  SegmentedControl,\n  Select,\n} from \"@mantine/core\";\nimport { PropertyLabel } from \"../../components/SettingsPropertyRenderer\";\nimport { useEffect, useState } from \"react\";\nimport { UseFormReturnType } from \"@mantine/form\";\nimport { GeneralDataConfiguration } from \"./EvaluationDataSection\";\nimport { showNotification } from \"@mantine/notifications\";\n\ntype Props = {\n  configurationForm: UseFormReturnType<GeneralDataConfiguration>;\n  getEvaluationModels: (search?: string) => Promise<string[]>;\n};\n\n// TODO: Schematize / generalize this component\nexport default function GeneralEvaluationDataConfiguration({\n  configurationForm,\n  getEvaluationModels,\n}: Props) {\n  const [modelSearchValue, setModelSearchValue] = useState<string>(\"\");\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [isLoadingModels, setIsLoadingModels] = useState(true);\n\n  useEffect(() => {\n    getEvaluationModels(modelSearchValue)\n      .then((models) => {\n        setAvailableModels(models);\n      })\n      .catch((e) => {\n        showNotification({\n          title: \"Error loading models for evaluation\",\n          message: (e as { message?: string }).message,\n          color: \"red\",\n        });\n      })\n      .finally(() => {\n        setIsLoadingModels(false);\n      });\n  }, [getEvaluationModels, modelSearchValue]);\n\n  return (\n    <ScrollArea mah={350} type=\"auto\" style={{ overflowY: \"scroll\" }}>\n      <Flex direction=\"row\" align=\"center\" my=\"sm\">\n        {isLoadingModels && <Loader mr=\"0.5em\" size=\"sm\" />}\n        <Select\n          placeholder=\"Select model\"\n          label=\"Model\"\n          required\n          searchable\n          onSearchChange={setModelSearchValue}\n          disabled={isLoadingModels}\n          searchValue={modelSearchValue}\n          nothingFound=\"No models found\"\n          data={availableModels}\n          mb=\"sm\"\n          miw={300}\n          {...configurationForm.getInputProps(\"model\")}\n        />\n      </Flex>\n      <Flex my=\"sm\">\n        <PropertyLabel\n          propertyName=\"Max Fields\"\n          propertyDescription=\"Maximum number of oil fields to extract\"\n        />\n        <NumberInput\n          min={0}\n          step={1}\n          radius=\"md\"\n          {...configurationForm.getInputProps(\"maxFields\")}\n        />\n      </Flex>\n      <Flex my=\"sm\">\n        <PropertyLabel\n          propertyName=\"Deep Run\"\n          propertyDescription={`For deep run, field name and year would be from model, \n          otherwise they are from ground truth file`}\n        />\n        <Checkbox\n          styles={{ inner: { alignSelf: \"center\" } }}\n          {...configurationForm.getInputProps(\"deepRun\")}\n        />\n      </Flex>\n      <Flex my=\"sm\">\n        <PropertyLabel\n          propertyName=\"Success Only\"\n          propertyDescription=\"Only display and evaluate succesfully parsed values in results\"\n        />\n        <Checkbox\n          styles={{ inner: { alignSelf: \"center\" } }}\n          {...configurationForm.getInputProps(\"successOnly\")}\n        />\n      </Flex>\n      <Flex>\n        <PropertyLabel\n          propertyName=\"Question Grouping\"\n          propertyDescription={`Group questions into large sections (supported by gpt-4) \n          or smaller individual questions (e.g. gpt-3.5-turbo)`}\n        />\n        <SegmentedControl\n          data={[\n            { label: \"section\", value: \"section\" },\n            { label: \"individual\", value: \"individual\" },\n          ]}\n          {...configurationForm.getInputProps(\"groupedBy\")}\n        />\n      </Flex>\n      <Flex my=\"sm\">\n        <PropertyLabel\n          propertyName=\"Token Size\"\n          propertyDescription=\"Split the text into pieces by token size (0 means max token size for model)\"\n        />\n        <NumberInput\n          min={0}\n          step={10}\n          radius=\"md\"\n          {...configurationForm.getInputProps(\"tokenSize\")}\n        />\n      </Flex>\n      <Flex>\n        <PropertyLabel\n          propertyName=\"Splitter\"\n          propertyDescription=\"How to split the text in the document\"\n        />\n        <SegmentedControl\n          data={[\n            { label: \"token_size\", value: \"token_size\" },\n            { label: \"page_num\", value: \"page_num\" },\n          ]}\n          {...configurationForm.getInputProps(\"splitter\")}\n        />\n      </Flex>\n    </ScrollArea>\n  );\n}\n"],"names":["GeneralEvaluationDataConfiguration","_ref","configurationForm","getEvaluationModels","modelSearchValue","setModelSearchValue","useState","availableModels","setAvailableModels","isLoadingModels","setIsLoadingModels","useEffect","then","models","catch","e","showNotification","title","message","color","finally","_jsxs","ScrollArea","mah","type","style","overflowY","children","Flex","direction","align","my","_jsx","Loader","mr","size","Select","placeholder","label","required","searchable","onSearchChange","disabled","searchValue","nothingFound","data","mb","miw","getInputProps","PropertyLabel","propertyName","propertyDescription","NumberInput","min","step","radius","Checkbox","styles","inner","alignSelf","SegmentedControl","value"],"sourceRoot":""}