# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from voiceos.models.twilio_telephony import TwilioTelephony
from typing import Optional, Set
from typing_extensions import Self

class PhoneNumber(BaseModel):
    """
    PhoneNumber
    """ # noqa: E501
    uri: StrictStr = Field(description="The uri of the phone number.")
    inbound_agent_uri: Optional[StrictStr] = Field(default=None, description="The agent uri that will be used for inbound calls. If null, the phone number is will not receive any calls.")
    phone_number: StrictStr = Field(description="The phone number.")
    account_id: StrictStr = Field(description="The account id associated with the phone number.")
    created_at: datetime = Field(description="The date the phone number was created.")
    updated_at: datetime = Field(description="The date the phone number was last updated.")
    telephony: TwilioTelephony = Field(description="The telephony of the phone number.")
    stripe_subscription_id: Optional[StrictStr] = Field(default=None, description="The stripe subscription id of the phone number. Returns null if the phone number was imported.")
    __properties: ClassVar[List[str]] = ["uri", "inbound_agent_uri", "phone_number", "account_id", "created_at", "updated_at", "telephony", "stripe_subscription_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of telephony
        if self.telephony:
            _dict['telephony'] = self.telephony.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "inbound_agent_uri": obj.get("inbound_agent_uri"),
            "phone_number": obj.get("phone_number"),
            "account_id": obj.get("account_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "telephony": TwilioTelephony.from_dict(obj["telephony"]) if obj.get("telephony") is not None else None,
            "stripe_subscription_id": obj.get("stripe_subscription_id")
        })
        return _obj


